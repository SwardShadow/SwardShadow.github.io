<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>归墟</title>
  <subtitle>Catch the Timer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-03T09:19:22.383Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>赵文元</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack的使用</title>
    <link href="http://yoursite.com/2017/09/21/24.Webpack%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/21/24.Webpack的使用/</id>
    <published>2017-09-21T05:13:11.000Z</published>
    <updated>2017-11-03T09:19:22.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-Webpack的使用"><a href="#Vue-js-Webpack的使用" class="headerlink" title="Vue.js - Webpack的使用"></a>Vue.js - Webpack的使用</h1><h2 id="在网页中会引用哪些常见的静态资源？"><a href="#在网页中会引用哪些常见的静态资源？" class="headerlink" title="在网页中会引用哪些常见的静态资源？"></a>在网页中会引用哪些常见的静态资源？</h2><ul>
<li>JS<ul>
<li>.js  .jsx  .coffee  .ts（TypeScript  类 C# 语言）</li>
</ul>
</li>
<li>CSS<ul>
<li>.css  .less   .sass  .scss</li>
</ul>
</li>
<li>Images<ul>
<li>.jpg   .png   .gif   .bmp   .svg</li>
</ul>
</li>
<li>字体文件（Fonts）<ul>
<li>.svg   .ttf   .eot   .woff   .woff2</li>
</ul>
</li>
<li>模板文件<ul>
<li>.ejs   .jade  .vue【这是在webpack中定义组件的方式，推荐这么用】</li>
</ul>
</li>
</ul>
<h2 id="网页中引入的静态资源多了以后有什么问题？？？"><a href="#网页中引入的静态资源多了以后有什么问题？？？" class="headerlink" title="网页中引入的静态资源多了以后有什么问题？？？"></a>网页中引入的静态资源多了以后有什么问题？？？</h2><ol>
<li>网页加载速度慢， 因为 我们要发起很多的二次请求；</li>
<li>要处理错综复杂的依赖关系</li>
</ol>
<h2 id="webpack和gulp的区别"><a href="#webpack和gulp的区别" class="headerlink" title="webpack和gulp的区别"></a>webpack和gulp的区别</h2><ul>
<li>gulp小巧，灵活方便，站在某个功能点去考虑问题</li>
<li>gulp强调的是前端开发的工作流程，我们可以通过配置一系列的task，定义task处理的事务(例如文件压缩合并，雪碧图(精灵图)，启动server，版本控制等)，然后定义执行顺序，来让gulp执行这些task从而构建项目的整个前端开发流程。</li>
<li>简单的说就是一个Task Runner<ul>
<li>gulp是工具链，构建工具，可以配合各种插件实现js压缩，css压缩，less编译等替换手工实现自动化工作<ol>
<li>构建工具</li>
<li>自动化</li>
<li>提高效率</li>
</ol>
</li>
</ul>
</li>
<li>webpack更加宏观，站在整个项目区考虑问题。</li>
<li>webpack是一个前端模块化方案，更侧重模块打包，我们可以把开发中的所有资源(图片，js文件，css文件等)都看成模块，通过loader(加载器)和plugins(插件)对资源进行处理，打包陈符合生产环境部署的前端资源。</li>
<li>webpack is a module bundle<ul>
<li>webpack是文件打包工具，可以把项目中的各种js，css文件等打包合并成一个或者多个文件，主要用于模块化方案，预编译模块的方案<ol>
<li>打包工具</li>
<li>模块化识别</li>
<li>编译模块代码方案</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="如何解决上述两个问题"><a href="#如何解决上述两个问题" class="headerlink" title="如何解决上述两个问题"></a>如何解决上述两个问题</h2><ol>
<li>合并、压缩、精灵图、图片的Base64编码(只适合小图片)</li>
<li>可以使用之前学过的requireJS、也可以使用webpack可以解决各个包之间的复杂依赖关系；</li>
</ol>
<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack?"></a>什么是webpack?</h2><p>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；</p>
<h2 id="如何完美实现上述的2种解决方案"><a href="#如何完美实现上述的2种解决方案" class="headerlink" title="如何完美实现上述的2种解决方案"></a>如何完美实现上述的2种解决方案</h2><ol>
<li>使用Gulp， 是基于 task 任务的；</li>
<li>使用Webpack， 是基于整个项目进行构建的；</li>
</ol>
<ul>
<li>借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li>
<li>根据官网的图片介绍webpack打包的过程</li>
<li><a href="http://webpack.github.io/" target="_blank" rel="external">webpack官网</a></li>
</ul>
<h2 id="webpack安装的两种方式"><a href="#webpack安装的两种方式" class="headerlink" title="webpack安装的两种方式"></a>webpack安装的两种方式</h2><ol>
<li>运行<code>npm i webpack -g</code>全局安装webpack，这样就能在全局使用webpack的命令</li>
<li>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</li>
</ol>
<h2 id="初步使用webpack打包构建列表隔行变色案例"><a href="#初步使用webpack打包构建列表隔行变色案例" class="headerlink" title="初步使用webpack打包构建列表隔行变色案例"></a>初步使用webpack打包构建列表隔行变色案例</h2><ol>
<li>运行<code>npm init</code>初始化项目，使用npm管理项目中的依赖包</li>
<li>创建项目基本的目录结构</li>
<li>使用<code>cnpm i jquery --save</code>安装jquery类库</li>
<li>创建<code>main.js</code>并书写各行变色的代码逻辑：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 导入jquery类库</span></div><div class="line">   <span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></div><div class="line"></div><div class="line">   <span class="comment">// 设置偶数行背景色，索引从0开始，0是偶数</span></div><div class="line">   $(<span class="string">'#list li:even'</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'lightblue'</span>);</div><div class="line">   <span class="comment">// 设置奇数行背景色</span></div><div class="line">   $(<span class="string">'#list li:odd'</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'pink'</span>);</div></pre></td></tr></table></figure>
<ol>
<li>直接在页面上引用<code>main.js</code>会报错，因为浏览器不认识<code>import</code>这种高级的JS语法，需要使用webpack进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；</li>
<li>运行<code>webpack 入口文件路径 输出文件路径</code>对<code>main.js</code>进行处理：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack src/js/main.js dist/bundle.js</div></pre></td></tr></table></figure>
<h2 id="使用webpack的配置文件简化打包时候的命令"><a href="#使用webpack的配置文件简化打包时候的命令" class="headerlink" title="使用webpack的配置文件简化打包时候的命令"></a>使用webpack的配置文件简化打包时候的命令</h2><ol>
<li>在项目根目录中创建<code>webpack.config.js</code></li>
<li>由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.config.js</code>中配置这两个路径：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 导入处理路径的模块</span></div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    entry: path.resolve(__dirname, <span class="string">'src/js/main.js'</span>), <span class="comment">// 项目入口文件</span></div><div class="line">    output: &#123; <span class="comment">// 配置输出选项</span></div><div class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>), <span class="comment">// 配置输出的路径</span></div><div class="line">        filename: <span class="string">'bundle.js'</span> <span class="comment">// 配置输出的文件名</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运行服务器的方法-npm-run-dev"><a href="#运行服务器的方法-npm-run-dev" class="headerlink" title="运行服务器的方法 npm run dev"></a>运行服务器的方法 npm run dev</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 它会向外暴露成员，所以一般的js都会写成这种形式</span></div><div class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">"jquery"</span></div><div class="line"><span class="comment">// 不向外暴露数据，一般的css都用这种方式</span></div><div class="line"><span class="keyword">import</span> <span class="string">"./css/index.css"</span></div></pre></td></tr></table></figure>
<h2 id="实现webpack的实时打包构建"><a href="#实现webpack的实时打包构建" class="headerlink" title="实现webpack的实时打包构建"></a>实现webpack的实时打包构建</h2><ol>
<li>由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦，所以使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</li>
<li>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</li>
<li><p>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令，发现可以进行实时打包，但是dist目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中</p>
<ul>
<li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li>
<li>这个时候访问webpack-dev-server启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:<code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code></li>
<li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到index首页，可以使用<code>--contentBase src</code>指令来修改dev指令，指定启动的根目录：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dev"</span>: <span class="string">"webpack-dev-server --contentBase src"</span></div></pre></td></tr></table></figure>
<p>同时修改index页面中script的src属性为<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></p>
</li>
</ol>
<h2 id="使用html-webpack-plugin插件配置启动页面"><a href="#使用html-webpack-plugin插件配置启动页面" class="headerlink" title="使用html-webpack-plugin插件配置启动页面"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h2><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p>
<ol>
<li>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</li>
<li>修改<code>webpack.config.js</code>配置文件如下：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 导入处理路径的模块</span></div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="comment">// 导入自动生成HTMl文件的插件</span></div><div class="line"><span class="keyword">var</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    entry: path.resolve(__dirname, <span class="string">'src/js/main.js'</span>), <span class="comment">// 项目入口文件</span></div><div class="line">    output: &#123; <span class="comment">// 配置输出选项</span></div><div class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>), <span class="comment">// 配置输出的路径</span></div><div class="line">        filename: <span class="string">'bundle.js'</span> <span class="comment">// 配置输出的文件名</span></div><div class="line">    &#125;,</div><div class="line">    plugins:[ <span class="comment">// 添加plugins节点配置插件</span></div><div class="line">        <span class="keyword">new</span> htmlWebpackPlugin(&#123;</div><div class="line">            template:path.resolve(__dirname, <span class="string">'src/index.html'</span>),<span class="comment">//模板路径</span></div><div class="line">            filename:<span class="string">'index.html'</span><span class="comment">//自动生成的HTML文件的名称</span></div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>修改<code>package.json</code>中<code>script</code>节点中的dev指令如下：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dev"</span>: <span class="string">"webpack-dev-server"</span></div></pre></td></tr></table></figure>
<ol>
<li>将index.html中script标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把bundle.js注入到index.html页面中！</li>
</ol>
<h2 id="实现自动打开浏览器、热更新和配置浏览器的默认端口号"><a href="#实现自动打开浏览器、热更新和配置浏览器的默认端口号" class="headerlink" title="实现自动打开浏览器、热更新和配置浏览器的默认端口号"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h2><p><strong>注意：热更新在JS中表现的不明显，可以从一会儿要讲到的CSS身上进行介绍说明！</strong></p>
<h3 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h3><ul>
<li>修改<code>package.json</code>的script节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为4321，<code>--hot</code>表示启用浏览器热更新：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dev"</span>: <span class="string">"webpack-dev-server --hot --port 4321 --open"</span></div></pre></td></tr></table></figure>
<h3 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h3><ol>
<li>修改<code>webpack.config.js</code>文件，新增<code>devServer</code>节点如下：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">devServer:&#123;</div><div class="line">        hot:<span class="literal">true</span>,</div><div class="line">        open:<span class="literal">true</span>,</div><div class="line">        port:<span class="number">4321</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li>在头部引入<code>webpack</code>模块：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div></pre></td></tr></table></figure>
<ol>
<li>在<code>plugins</code>节点下新增：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div></pre></td></tr></table></figure>
<h2 id="使用webpack打包css文件"><a href="#使用webpack打包css文件" class="headerlink" title="使用webpack打包css文件"></a>使用webpack打包css文件</h2><ol>
<li>运行<code>cnpm i style-loader css-loader --save-dev</code></li>
<li>修改<code>webpack.config.js</code>这个配置文件：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123; <span class="comment">// 用来配置第三方loader模块的</span></div><div class="line">        rules: [ <span class="comment">// 文件的匹配规则</span></div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>] &#125;<span class="comment">//处理css文件的规则</span></div><div class="line">        ]</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li>注意：<code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；<code>use</code>中相关loader模块的调用顺序是从后向前调用的；</li>
</ol>
<h2 id="使用webpack打包less文件"><a href="#使用webpack打包less文件" class="headerlink" title="使用webpack打包less文件"></a>使用webpack打包less文件</h2><ol>
<li>运行<code>cnpm i less-loader less -D</code></li>
<li>修改<code>webpack.config.js</code>这个配置文件：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>] &#125;,</div></pre></td></tr></table></figure>
<h2 id="使用webpack打包sass文件"><a href="#使用webpack打包sass文件" class="headerlink" title="使用webpack打包sass文件"></a>使用webpack打包sass文件</h2><ol>
<li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li>
<li>在<code>webpack.config.js</code>中添加处理sass文件的loader模块：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>] &#125;</div></pre></td></tr></table></figure>
<h2 id="使用webpack处理css中的路径"><a href="#使用webpack处理css中的路径" class="headerlink" title="使用webpack处理css中的路径"></a>使用webpack处理css中的路径</h2><ol>
<li>运行<code>cnpm i url-loader file-loader --save-dev</code></li>
<li>在<code>webpack.config.js</code>中添加处理url路径的loader模块：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader'</span> &#125;</div></pre></td></tr></table></figure>
<ol>
<li>可以通过<code>limit</code>指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader?limit=43960'</span> &#125;,</div></pre></td></tr></table></figure>
<h2 id="使用babel处理高级JS语法"><a href="#使用babel处理高级JS语法" class="headerlink" title="使用babel处理高级JS语法"></a>使用babel处理高级JS语法</h2><ol>
<li>运行<code>cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</code>安装babel的相关loader包</li>
<li>运行<code>cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev</code>安装babel转换的语法</li>
<li>在<code>webpack.config.js</code>中添加相关loader模块，其中需要注意的是，一定要把<code>node_modules</code>文件夹添加到排除项：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: <span class="string">'babel-loader'</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> &#125;</div></pre></td></tr></table></figure>
<ol>
<li>在项目根目录中添加<code>.babelrc</code>文件，并修改这个配置文件如下：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"presets"</span>:[<span class="string">"es2015"</span>, <span class="string">"stage-0"</span>],</div><div class="line">    <span class="string">"plugins"</span>:[<span class="string">"transform-runtime"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><strong>注意：语法插件<code>babel-preset-es2015</code>可以更新为<code>babel-preset-env</code>，它包含了所有的ES相关的语法；</strong></li>
</ol>
<p><strong>webpack.config.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"><span class="comment">// 启用热更新的第二步</span></div><div class="line"><span class="keyword">const</span> webpack=<span class="built_in">require</span>(<span class="string">"webpack"</span>);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 到如在内存中生成HTML页面的插件</span></div><div class="line"><span class="comment"> * 只要是插件，都一定要放到plugins节点中去</span></div><div class="line"><span class="comment"> * 这个插件的两个作用：</span></div><div class="line"><span class="comment"> * 1. 自动在内存中根据指定页面生成一个内存的页面</span></div><div class="line"><span class="comment"> * 2.自动，把打包好的bundle.js追加到页面中去</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">const</span> htmlWebpackPlugin=<span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 这个配置文件，其实就是一个js文件，通过Node中的模块操作，向外暴露了一个配置对象</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="built_in">module</span>.exports=&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 要举一反三，大家觉得在配置文件中，需要手动指定入口和出口</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="comment">// 入口，表示要使用webpack打包哪个文件</span></div><div class="line">	entry:path.join(__dirname,<span class="string">"./src/main.js"</span>),</div><div class="line">	<span class="comment">// 输出文件相关的配置</span></div><div class="line">	output:&#123;</div><div class="line">		<span class="comment">// 指定大安保号的文件输出到哪个目录中去</span></div><div class="line">		path:path.join(__dirname,<span class="string">"./dist"</span>),</div><div class="line">		<span class="comment">// 指定输出的文件的名称</span></div><div class="line">		filename:<span class="string">"bundle.js"</span></div><div class="line">	&#125;,</div><div class="line">	devServer:&#123;</div><div class="line">		<span class="comment">/**</span></div><div class="line"><span class="comment">		 * 这是配置dev-server命令参数的第二种形式，相对来说，这种方式麻烦一些</span></div><div class="line"><span class="comment">		 * open --port 3000 (自动打开3000端口的浏览器)</span></div><div class="line"><span class="comment">		 * contentBase src --hot (配置热更新)</span></div><div class="line"><span class="comment">		 */</span></div><div class="line">		<span class="comment">// 自动打开浏览器</span></div><div class="line">		open:<span class="literal">true</span>,</div><div class="line">		<span class="comment">// 设置启动时候的运行端口</span></div><div class="line">		port:<span class="number">3000</span>,</div><div class="line">		<span class="comment">// 指定托管的根目录</span></div><div class="line">		contentBase:<span class="string">"src"</span>,</div><div class="line">		<span class="comment">// 启用热更新的第一步</span></div><div class="line">		hot:<span class="literal">true</span></div><div class="line">	&#125;,</div><div class="line">	plugins:[</div><div class="line">		<span class="comment">// 配置插件的节点</span></div><div class="line">		<span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</div><div class="line">		<span class="comment">// new一个热更新的模块对象，这是启用热更新的第三步</span></div><div class="line">		<span class="keyword">new</span> htmlWebpackPlugin(&#123;</div><div class="line">			<span class="comment">// 创建一个在内存中生成html页面插件</span></div><div class="line">				<span class="comment">// 指定模版页面，将来会根据指定的页面路径，去生成内存中的页面</span></div><div class="line">			template:path.join(__dirname,<span class="string">"./src/index.html"</span>),</div><div class="line">			<span class="comment">// 指定生成的页面的名称</span></div><div class="line">			filename:<span class="string">"index.html"</span></div><div class="line">		&#125;)</div><div class="line">	],</div><div class="line">	<span class="built_in">module</span>:&#123;</div><div class="line">		<span class="comment">/**</span></div><div class="line"><span class="comment">		 * 这个节点用于配置所有第三方模块加载器</span></div><div class="line"><span class="comment">		 */</span></div><div class="line">		rules:[</div><div class="line">			<span class="comment">// 所有第三方模块的匹配规则</span></div><div class="line">			<span class="comment">// 配置处理 .css文件的第三方loader规则</span></div><div class="line">			&#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">"style-loader"</span>,<span class="string">"css-loader"</span>]&#125;,</div><div class="line">			<span class="comment">// 配置处理.less文件的第三方loader规则</span></div><div class="line">			&#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">"style-loader"</span>,<span class="string">"css-loader"</span>,<span class="string">"less-loader"</span>]&#125;,</div><div class="line">			<span class="comment">// 配置处理 .scss文件的第三方loader规则</span></div><div class="line">			&#123;<span class="attr">test</span>:<span class="regexp">/\.scss$/</span>,<span class="attr">use</span>:[<span class="string">"style-loader"</span>,<span class="string">"css-loader"</span>,<span class="string">"sass-loader"</span>]&#125;</div><div class="line">		]</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 当我们在控制台直接输入webpack命令执行的时候，webpack做了以下几步：</span></div><div class="line"><span class="comment"> * 1.首先，webpack发现，我们并没有通过命令的形式给它指定入口和出口</span></div><div class="line"><span class="comment"> * 2.webpack就会去项目的根目录去查找一个叫做"webpack.config.js"的配置文件</span></div><div class="line"><span class="comment"> * 3.当找到配置文件后，webpack会去解析执行这个配置文件，当解析执行完配置文件后，就得到了配置文件中导出的配置对象</span></div><div class="line"><span class="comment"> * 4.当webpack拿到配置对象后，就拿到配置对象后，就拿到了配置对象中，指定的入口和出口，然后进行打包构建</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure></p>
<p><strong>main.js</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">// 这是main.js是我们项目的JS入口文件</div><div class="line">/**</div><div class="line"> * 1.导入jQuery</div><div class="line"> * import *** from ***</div><div class="line"> * 是ES6中导入模块的方式</div><div class="line"> * 由于ES6的代码太高级了，浏览器解析不了，所以这一行执行会报错</div><div class="line"> */</div><div class="line">import $ from "jquery";</div><div class="line">// const $=require("jquery");</div><div class="line">// 使用import语法，导入css样式表</div><div class="line">import "./css/index.css";</div><div class="line">import "./css/index.less";</div><div class="line">import "./css/index.scss";</div><div class="line">/**</div><div class="line"> * 注意：webpack默认只能打包处理JS类型的文件，无法处理其他的非JS类型的文件</div><div class="line"> * 如果要处理费JS类型的文件，我们需要手动安装一些合适第三方loader加载器</div><div class="line"> * 1.如果想要打包处理css文件，需要安装 cnpm i style-loader css-loader -D</div><div class="line"> * 2.打开webpack.config.js这个配置文件，在里面，新增一个配置节点，叫做module，它是一个对象;在这个module对象身上，有个rules属性，这个rules属性是个数组；这个数组中，存放了所有第三方文件的匹配和处理规则；</div><div class="line"> */</div><div class="line">/**</div><div class="line"> * 注意：webpack处理第三方文件类型的过程：</div><div class="line"> * 1.发现这个要处理的文件不是JS文件，然后就去配置文件中，查找有没有对应的第三方loader规则</div><div class="line"> * 2.如果能找到对应的规则，就会调用对应的loader处理这种文件类型</div><div class="line"> * 3.在调用loader的时候，是从后往前调用的</div><div class="line"> * 4.当最后的一个loader调用完毕，会把处理的结果直接交给webpack进行打包合并，最终输出到bundle.js中去</div><div class="line"> */</div><div class="line">$(function () &#123;</div><div class="line">	$("li:odd").css("backgroundColor", "yellow"),</div><div class="line">		$("li:even").css("backgroundColor", function () &#123;</div><div class="line">			return "#" + "D97634";</div><div class="line">		&#125;)</div><div class="line">&#125;)</div><div class="line">/**</div><div class="line"> * 经过刚才的演示，webpack可以做的事情：</div><div class="line"> * 1.webpack能够处理JS文件的互相依赖关系</div><div class="line"> * 2.webpack能够处理JS的兼容问题，把高级的，浏览器不识别的语法转化为低级的，浏览器能够正常识别的语法</div><div class="line"> */</div><div class="line">// 刚才运行的命令格式：webpack要打包的文件的路径，打包好的输出文件的路径</div><div class="line">/**</div><div class="line"> * 使用webpack-dev-server这个工具，来实现自动打包编译的功能</div><div class="line"> * 1.运行npm i webpack-dev-server -D</div><div class="line"> * 	把这个工具安装到项目的本地开发依赖</div><div class="line"> * 2.安装完毕后，这个工具的用法和webpack命令的用法，完全一样</div><div class="line"> * 3.由于，我们是在项目中，本地散装的webpack-dev-server，所以，无法把它当做脚本命令，为powershell终端中直接运行;(只有那些安装到全局 -g的工具，才能在终端中正常执行)</div><div class="line"> * 4.注意：webpack-dev-server这个工具，如果想要正常运行，要求，在本地项目中，必须安装webpack</div><div class="line"> * 5.webpack-dev-server帮我们打包生成的bundle.js文件，并没有存放到实际的物理磁盘上；而是直接托管到了电脑的内存中，所以，我们在项目根目录中，根本找不到这个打包好的bundle.js</div><div class="line"> * 6.我们可以认为，webpack-dev-server把打包好的文件以一种虚拟的形式托管到了咱们项目的根目录中，虽然我们看不到它，但是可以认为和dist src node_modules平级，有一个看不见的文件，叫做bundle.js</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://segmentfault.com/p/1210000008466178" target="_blank" rel="external">babel-preset-env：你需要的唯一Babel插件</a><br><a href="https://segmentfault.com/a/1190000009065987" target="_blank" rel="external">Runtime transform 运行时编译es6</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue-js-Webpack的使用&quot;&gt;&lt;a href=&quot;#Vue-js-Webpack的使用&quot; class=&quot;headerlink&quot; title=&quot;Vue.js - Webpack的使用&quot;&gt;&lt;/a&gt;Vue.js - Webpack的使用&lt;/h1&gt;&lt;h2 id=&quot;在
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue-开怀</title>
    <link href="http://yoursite.com/2017/08/21/23.Vue.js-%E5%BC%80%E6%80%80/"/>
    <id>http://yoursite.com/2017/08/21/23.Vue.js-开怀/</id>
    <published>2017-08-21T04:13:11.000Z</published>
    <updated>2017-11-03T09:18:23.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-开怀"><a href="#Vue-js-开怀" class="headerlink" title="Vue.js - 开怀"></a>Vue.js - 开怀</h1><h2 id="定义组件的方式"><a href="#定义组件的方式" class="headerlink" title="定义组件的方式"></a>定义组件的方式</h2><ul>
<li>定义组件的时候，如果要定义全局的组件 Vue.component(“组件的名称”.{});</li>
<li>通过对象字面量的形式，定义一个组件模版对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> login=&#123;</div><div class="line">    template:<span class="string">"&lt;h1&gt;1234&lt;/h1&gt;"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过Vue.component把组件模版对象注册为一个全局的Vue组件，同时为这个组件起了一个名称，我们可以通过标签形式，在页面中直接引入这个组件。</li>
</ul>
<h2 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><ol>
<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<ul>
<li>父组件可以在引用子组件的时候，通过属性绑定(v-bind:)的形式把需要传递给子组件的数据，以属性绑定的形式，传递到子组件内部，供子组件使用。</li>
<li>经过演示发现子组件中，默认无法访问到父组件中的data上的数据和methods上的方法。</li>
<li><strong>注意：子组件中的data数据，并不是通过父组件传递过来的，而是子组件自身私有的，比如：子组件通过Ajax请求回来的数据，都可以放到data身上。</strong></li>
<li>注意：子组件中的所有props中的数据都是通过父组价传递给子组件中的。props中的数据都是只读的，无法重新赋值。</li>
<li>把父组件传递过来的partentmsg属性，需要在props数组中先定义一下，这样才能使用这个数据。</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>父组件向子组件传值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 父组件，可以在引用子组件的时候，通过属性绑定(v-bind:)的形式,把需要传递给子组件的数据，以属性绑定的形式，传递到子组件内部，供子组件使用 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">com1</span> <span class="attr">v-bind:parentmsg</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">com1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="javascript">				msg: <span class="string">"123-父组件中的数据"</span></span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;&#125;,</span></div><div class="line"><span class="undefined">			components: &#123;</span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="undefined">					结论：经过演示发现子组件中，默认无法访问到父组件中的data上的数据和methods最后那个的方法</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="undefined">				com1: &#123;</span></div><div class="line"><span class="undefined">					data() &#123;</span></div><div class="line"><span class="undefined">						/*</span></div><div class="line"><span class="undefined">							注意：子组件中的data数据，并不是通过父组件传递过来的，而是子组件自身私有的，比如：子组件通过Ajax请求回来的数据，都可以放到data身上;</span></div><div class="line"><span class="undefined">						*/</span></div><div class="line"><span class="javascript">						<span class="keyword">return</span> &#123;</span></div><div class="line"><span class="javascript">							title: <span class="string">"123"</span>,</span></div><div class="line"><span class="javascript">							content: <span class="string">"qqq"</span></span></div><div class="line"><span class="undefined">						&#125;</span></div><div class="line"><span class="undefined">					&#125;,</span></div><div class="line"><span class="xml">					template: "<span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">'change'</span>&gt;</span>这是子组件---&#123;&#123;parentmsg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>",</span></div><div class="line"><span class="undefined">					/*</span></div><div class="line"><span class="undefined">						注意：组件中的所有props中的数据，都是通过父组件传递给子组件中的</span></div><div class="line"><span class="undefined">						props中的数据，都是只读的，无法重新赋值</span></div><div class="line"><span class="undefined">					*/</span></div><div class="line"><span class="javascript">					props: [<span class="string">"parentmsg"</span>],</span></div><div class="line"><span class="undefined">					/*</span></div><div class="line"><span class="undefined">						把父组件传递过来的parentmsg属性，现在props数组中，定义一下，这样才能使用这个数据</span></div><div class="line"><span class="undefined">					*/</span></div><div class="line"><span class="undefined">					directives: &#123;&#125;,</span></div><div class="line"><span class="undefined">					filters: &#123;&#125;,</span></div><div class="line"><span class="undefined">					components: &#123;&#125;,</span></div><div class="line"><span class="undefined">					methods: &#123;</span></div><div class="line"><span class="undefined">						change() &#123;</span></div><div class="line"><span class="javascript">							<span class="keyword">this</span>.parentmsg = <span class="string">"被修改了"</span>;</span></div><div class="line"><span class="javascript">							<span class="comment">// Vue不鼓励这样写，会报错警告</span></span></div><div class="line"><span class="undefined">						&#125;</span></div><div class="line"><span class="undefined">					&#125;</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      el: <span class="string">'#app'</span>,</div><div class="line">      data: &#123;</div><div class="line">        msg: <span class="string">'这是父组件中的消息'</span></div><div class="line">      &#125;,</div><div class="line">      components: &#123;</div><div class="line">        son: &#123;</div><div class="line">          template: <span class="string">'&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;/h1&gt;'</span>,</div><div class="line">          props: [<span class="string">'finfo'</span>]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">son</span> <span class="attr">:finfo</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>父组件向子组件传递方法使用的是事件绑定机制:v-on。当我们自定义一个事件属性之后，那么子组件就能够通过某些方式来调用传递进去的这个方法了。</li>
<li>emit是触发调用发射的意思。this.$emit(“function”,123,456);</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>父组件把方法传递给子组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 父组件向子组件传递方法，使用的是事件绑定机制:v-on。当我们自定义一个事件属性之后，那么，子组件就能够，通过某些方式来调用传递进去的这个方法了 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">com2</span> @<span class="attr">func</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">com2</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"这是子组件中的按钮-点击触发父组件传递过来的func方法"</span> @<span class="attr">click</span>=<span class="string">"myclick"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="comment">// 定义一个字面量来兴的组件模版对象</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> com2 = &#123;</span></div><div class="line"><span class="javascript">			template: <span class="string">"#tmpl"</span>,</span></div><div class="line"><span class="javascript">			<span class="comment">// 通过制定一个Id，表示说要去加载这个指定Id的template元素中的内容，当做组件的HTML结构</span></span></div><div class="line"><span class="undefined">			data() &#123;</span></div><div class="line"><span class="javascript">				<span class="keyword">return</span> &#123;</span></div><div class="line"><span class="undefined">					sonmsg: &#123;</span></div><div class="line"><span class="javascript">						name: <span class="string">"儿子"</span>,</span></div><div class="line"><span class="javascript">						age: <span class="string">"12"</span></span></div><div class="line"><span class="undefined">					&#125;</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;</span></div><div class="line"><span class="undefined">				myclick() &#123;</span></div><div class="line"><span class="undefined">					/*</span></div><div class="line"><span class="undefined">						当点击子组件的按钮的时候，如何拿到父组件传递过来的func方法，并调用这个方法</span></div><div class="line"><span class="undefined">						emit：是触发调用发射的意思</span></div><div class="line"><span class="javascript">						<span class="keyword">this</span>.$emit(<span class="string">"func123"</span>,<span class="number">123</span>,<span class="number">456</span>);</span></div><div class="line"><span class="undefined">					*/</span></div><div class="line"><span class="javascript">					<span class="keyword">this</span>.$emit(<span class="string">"func"</span>, <span class="keyword">this</span>.sonmsg);</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="javascript">				datamsgFormSon: <span class="literal">null</span></span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;</span></div><div class="line"><span class="undefined">				show(data) &#123;</span></div><div class="line"><span class="javascript">					<span class="keyword">this</span>.datamsgFormSon = data;</span></div><div class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">"调用了父组件身上的show方法---"</span> + data);</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			components: &#123;</span></div><div class="line"><span class="javascript">				<span class="comment">// com2:com2</span></span></div><div class="line"><span class="undefined">				com2</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><ol>
<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>
<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">son</span> @<span class="attr">func</span>=<span class="string">"getMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 引用父组件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">son</span> @<span class="attr">func</span>=<span class="string">"getMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 组件模板定义 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"x-template"</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"向父组件传值"</span> @<span class="attr">click</span>=<span class="string">"sendMsg"</span> /&gt;</span></span></div><div class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 子组件的定义方式</span></span></div><div class="line"><span class="javascript">    Vue.component(<span class="string">'son'</span>, &#123;</span></div><div class="line"><span class="javascript">      template: <span class="string">'#son'</span>, <span class="comment">// 组件模板Id</span></span></div><div class="line"><span class="undefined">      methods: &#123;</span></div><div class="line"><span class="javascript">        sendMsg() &#123; <span class="comment">// 按钮的点击事件</span></span></div><div class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'func'</span>, <span class="string">'OK'</span>); <span class="comment">// 调用父组件传递过来的方法，同时把数据传递出去</span></span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">      data: &#123;&#125;,</span></div><div class="line"><span class="undefined">      methods: &#123;</span></div><div class="line"><span class="javascript">        getMsg(val)&#123; <span class="comment">// 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span></span></div><div class="line"><span class="undefined">          alert(val);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="组件中data和props的区别"><a href="#组件中data和props的区别" class="headerlink" title="组件中data和props的区别"></a>组件中data和props的区别</h2><table>
<thead>
<tr>
<th>类型</th>
<th>data</th>
<th>props</th>
</tr>
</thead>
<tbody>
<tr>
<td>来源</td>
<td>子组件中的data数据并不是通过父组件传递过来的，而是子组件自身私有的，比如子组件通过ajax，请求回来的数据，都可以放到data身上</td>
<td>组件中的所有props中的数据，都是通过父组件传递给子组件的</td>
</tr>
<tr>
<td>特点</td>
<td>本身自有的，可读可写的</td>
<td>外部传入的，只读的</td>
</tr>
</tbody>
</table>
<p><strong>注意：把父组件传递过来的parentmsg属性，现在props数组中定义一下，这样才能使用这个数据</strong>  </p>
<h2 id="ref获取DOM元素和组件"><a href="#ref获取DOM元素和组件" class="headerlink" title="ref获取DOM元素和组件"></a>ref获取DOM元素和组件</h2><ul>
<li>ref是英文单词[reference]值类型和引用类型 referenceError</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>ref获取DOM元素和组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取元素"</span> @<span class="attr">click</span>=<span class="string">"getElement"</span> <span class="attr">ref</span>=<span class="string">"mybtn"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"myh3"</span> <span class="attr">ref</span>=<span class="string">"myh3"</span>&gt;</span>哈哈哈，今天天气真好!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">login</span> <span class="attr">ref</span>=<span class="string">"mylogin"</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> login = &#123;</span></div><div class="line"><span class="xml">			template: "<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>",</span></div><div class="line"><span class="undefined">			data() &#123;</span></div><div class="line"><span class="javascript">				<span class="keyword">return</span> &#123;</span></div><div class="line"><span class="javascript">					msg: <span class="string">"son msg"</span></span></div><div class="line"><span class="undefined">				&#125;;</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;</span></div><div class="line"><span class="undefined">				show() &#123;</span></div><div class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">"调用了子组件的方法"</span>);</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;</span></div><div class="line"><span class="undefined">				getElement() &#123;</span></div><div class="line"><span class="undefined">					/*</span></div><div class="line"><span class="javascript">						<span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"myh3"</span>).innerText);</span></div><div class="line"><span class="undefined">						ref是英文单词[reference]值类型和引用类型</span></div><div class="line"><span class="undefined">						referenceRrror</span></div><div class="line"><span class="javascript">						<span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.mylogin.msg)</span></div><div class="line"><span class="javascript">						<span class="keyword">this</span>.$refs.mylogin.show();</span></div><div class="line"><span class="undefined">					*/</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			components: &#123;</span></div><div class="line"><span class="undefined">				login</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="评论列表案例"><a href="#评论列表案例" class="headerlink" title="评论列表案例"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>
<h2 id="使用-this-refs-来获取元素和组件"><a href="#使用-this-refs-来获取元素和组件" class="headerlink" title="使用 this.$refs 来获取元素和组件"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取元素内容"</span> @<span class="attr">click</span>=<span class="string">"getElement"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用 ref 获取元素 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">"myh1"</span>&gt;</span>这是一个大大的H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用 ref 获取子组件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">my-com</span> <span class="attr">ref</span>=<span class="string">"mycom"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  Vue.component(<span class="string">'my-com'</span>, &#123;</span></div><div class="line"><span class="xml">    template: '<span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是一个子组件<span class="tag">&lt;/<span class="name">h5</span>&gt;</span>',</span></div><div class="line"><span class="undefined">    data() &#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></div><div class="line"><span class="javascript">        name: <span class="string">'子组件'</span></span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">    data: &#123;&#125;,</span></div><div class="line"><span class="undefined">    methods: &#123;</span></div><div class="line"><span class="undefined">      getElement() &#123;</span></div><div class="line"><span class="javascript">        <span class="comment">// 通过 this.$refs 来获取元素</span></span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.myh1.innerText);</span></div><div class="line"><span class="javascript">        <span class="comment">// 通过 this.$refs 来获取组件</span></span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.mycom.name);</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><ol>
<li><p><strong>后端路由：</strong>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>
</li>
<li><p><strong>前端路由：</strong>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>
</li>
<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>
</li>
</ol>
<h2 id="在-vue-中使用-vue-router"><a href="#在-vue-中使用-vue-router" class="headerlink" title="在 vue 中使用 vue-router"></a>在 vue 中使用 vue-router</h2><ol>
<li>导入 vue-router 组件类库：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="number">1.</span> 导入 vue-router 组件类库 --&gt;</div><div class="line">  &lt;script src=<span class="string">"./lib/vue-router-2.7.0.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ol>
<li>使用 router-link 组件来导航</li>
</ol>
<ul>
<li>这个是vue-router提供的锇元素，专门用来当做占位符的，将来，路由规则匹配到的组件，都会展示到这个router-view中去。所以，我们可以把这个router-view认为是一个占位符。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>使用 router-view 组件来显示匹配到的组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>创建使用<code>Vue.extend</code>创建组件</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 4.1 使用 Vue.extend 来创建登录组件</span></div><div class="line"><span class="keyword">var</span> login = Vue.extend(&#123;</div><div class="line">  template: <span class="string">'&lt;h1&gt;登录组件&lt;/h1&gt;'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 4.2 使用 Vue.extend 来创建注册组件</span></div><div class="line"><span class="keyword">var</span> register = Vue.extend(&#123;</div><div class="line">  template: <span class="string">'&lt;h1&gt;注册组件&lt;/h1&gt;'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span></div><div class="line">    <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">      routes: [</div><div class="line">        &#123; <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">component</span>: login &#125;,</div><div class="line">        &#123; <span class="attr">path</span>: <span class="string">'/register'</span>, <span class="attr">component</span>: register &#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<ol>
<li>使用 router 属性来使用路由规则</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 6. 创建 Vue 实例，得到 ViewModel</span></div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      el: <span class="string">'#app'</span>,</div><div class="line">      router: router <span class="comment">// 使用 router 属性来使用路由规则</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h2 id="使用tag属性指定router-link渲染的标签类型"><a href="#使用tag属性指定router-link渲染的标签类型" class="headerlink" title="使用tag属性指定router-link渲染的标签类型"></a>使用tag属性指定router-link渲染的标签类型</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"login"</span> <span class="attr">tag</span>=<span class="string">"span"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>创建一个路由对象，当导入vue-router包之后，在window全局对象中，就有了一个路由的构造函数，叫做VueRouter。在new路由对象的时候，可以为构造函数传递一个配置对象。</li>
</ul>
<h2 id="设置路由重定向"><a href="#设置路由重定向" class="headerlink" title="设置路由重定向"></a>设置路由重定向</h2><ul>
<li>{path:”/“,redirect:”/login}”;这里的redirect和Node中的redirect完全是两码事</li>
<li>route这个配置对象中的router便是[路由匹配原则的意思]</li>
<li><strong>路由匹配原则</strong><ul>
<li>每个路由规则都是一个对象，这个对象身上有连个必须的属性 <ul>
<li>属性1是path，表示监听哪个路由链接地址</li>
<li>属性2是component表示，如果路由是前面匹配到的path，则展示component属性对应的那个组件</li>
<li><strong>注意：component的属性值必须是一个组件的模版对象，不能是组件的引用名称</strong> {path:”/“,component:login};</li>
<li>将路由规则对象注册到vm实例上，用来监听url地址的变化，然后展示对应的组件。</li>
<li>如果在路由中使用查询字符串，给路由传递参数，则不需要修改路由规则的path属性。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>路由的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-router-3.0.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.router-link-active</span>,</span></div><div class="line"><span class="undefined">		myactive &#123;</span></div><div class="line"><span class="undefined">			color: yellow;</span></div><div class="line"><span class="undefined">			font-size: 40px;</span></div><div class="line"><span class="undefined">			font-weight: bold;</span></div><div class="line"><span class="undefined">			font-family: "全新硬笔行书简";</span></div><div class="line"><span class="undefined">			background-color: skyblue;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.v-enter</span>,</span></div><div class="line"><span class="css">		<span class="selector-class">.v-leave-to</span> &#123;</span></div><div class="line"><span class="undefined">			opacity: 0;</span></div><div class="line"><span class="undefined">			transform: translateX(140px);</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.v-enter-active</span>,</span></div><div class="line"><span class="css">		<span class="selector-class">.v-leave-active</span> &#123;</span></div><div class="line"><span class="css">			<span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.5s</span> <span class="selector-tag">ease</span>;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;a href="#/login"&gt;登录&lt;/a&gt;</span></div><div class="line"><span class="comment">		&lt;a href="#/register"&gt;注册&lt;/a&gt; --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- router-link 默认渲染一个a标签 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"login"</span> <span class="attr">tag</span>=<span class="string">"span"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 这个是vue-router提供的元素，专门用来当做占位符的，将来，路由规则匹配到的组件，就会展示到这个router-view中去 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 所以：我们可以把router-view认为是一个占位符 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="comment">// 组件的模版对象</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> login = &#123;</span></div><div class="line"><span class="xml">			template: "<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>"</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> register = &#123;</span></div><div class="line"><span class="xml">			template: "<span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>"</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined">		/*</span></div><div class="line"><span class="javascript">			Vue.component(<span class="string">"login"</span>,&#123;</span></div><div class="line"><span class="xml">				template:"<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>"</span></div><div class="line"><span class="undefined">			&#125;)</span></div><div class="line"><span class="undefined">		*/</span></div><div class="line"><span class="undefined">		/*</span></div><div class="line"><span class="javascript">			<span class="number">2.</span>创建一个路由对象，当导入vue-router包之后，在<span class="built_in">window</span>全局对象中，就有了一个路由的构造函数，叫做VueRouter</span></div><div class="line"><span class="javascript">			在<span class="keyword">new</span>路由对象的时候，可以为构造函数，传递一个配置对象</span></div><div class="line"><span class="undefined">		*/</span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> routerObj = <span class="keyword">new</span> VueRouter(&#123;</span></div><div class="line"><span class="undefined">			/*</span></div><div class="line"><span class="undefined">				route这个配置对象中的router表示【路由匹配原则】的意思</span></div><div class="line"><span class="undefined">			*/</span></div><div class="line"><span class="undefined">			routes: [</span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="undefined">					路由匹配规则：</span></div><div class="line"><span class="undefined">					每个路由规则都是一个对象，这个对象身上有两个必须的属性</span></div><div class="line"><span class="undefined">					属性1是path，表示监听哪个路由链接地址</span></div><div class="line"><span class="undefined">					属性2是component表示，如果路哟是前面匹配到的path，则展示component属性对应的那个组件</span></div><div class="line"><span class="undefined">					注意：component的属性值必须是一个组件的模版对象，不能是组件的引用名称</span></div><div class="line"><span class="javascript">					&#123;<span class="attr">path</span>:<span class="string">"/"</span>,<span class="attr">component</span>:login&#125;</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="undefined">				&#123;</span></div><div class="line"><span class="javascript">					path: <span class="string">"/"</span>,</span></div><div class="line"><span class="javascript">					redirect: <span class="string">"/login"</span></span></div><div class="line"><span class="undefined">				&#125;,</span></div><div class="line"><span class="javascript">				<span class="comment">// 这里的redirect和Node中的redirect完全是两码事</span></span></div><div class="line"><span class="undefined">				&#123;</span></div><div class="line"><span class="javascript">					path: <span class="string">"/login"</span>,</span></div><div class="line"><span class="undefined">					component: login</span></div><div class="line"><span class="undefined">				&#125;,</span></div><div class="line"><span class="undefined">				&#123;</span></div><div class="line"><span class="javascript">					path: <span class="string">"/register"</span>,</span></div><div class="line"><span class="undefined">					component: register</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			],</span></div><div class="line"><span class="javascript">			linkActiveClass: <span class="string">"myactive"</span></span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;&#125;,</span></div><div class="line"><span class="undefined">			router: routerObj</span></div><div class="line"><span class="undefined">			/*</span></div><div class="line"><span class="undefined">				将路由规则对象注册到vm实例上，用来监听URL地址的变化，然后展示对应的组件</span></div><div class="line"><span class="undefined">			*/</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="设置路由高亮"><a href="#设置路由高亮" class="headerlink" title="设置路由高亮"></a>设置路由高亮</h2><ul>
<li>linkActiveClass类名的添加，可以给这个类名设置样式。这个意思是当前选中的样式，可以添加高亮效果。</li>
<li>linkActiveClass:”myactive”;也可以使用自定义样式的方式来实现第二类高亮的方法。</li>
</ul>
<h2 id="设置路由切换动效"><a href="#设置路由切换动效" class="headerlink" title="设置路由切换动效"></a>设置路由切换动效</h2><h2 id="在路由规则中定义参数"><a href="#在路由规则中定义参数" class="headerlink" title="在路由规则中定义参数"></a>在路由规则中定义参数</h2><ol>
<li>在规则中定义参数：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/register/:id'</span>, <span class="attr">component</span>: register &#125;</div></pre></td></tr></table></figure>
<ol>
<li>通过 <code>this.$route.params</code>来获取路由中的参数：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> register = Vue.extend(&#123;</div><div class="line">      template: <span class="string">'&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;/h1&gt;'</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h2 id="使用-children-属性实现路由嵌套"><a href="#使用-children-属性实现路由嵌套" class="headerlink" title="使用 children 属性实现路由嵌套"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account"</span>&gt;</span>Account<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">// 父路由中的组件</span></span></div><div class="line"><span class="javascript">  <span class="keyword">const</span> account = Vue.extend(&#123;</span></div><div class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="undefined">      这是account组件</span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account/login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> | </span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account/register"</span>&gt;</span>register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">// 子路由中的 login 组件</span></span></div><div class="line"><span class="javascript">  <span class="keyword">const</span> login = Vue.extend(&#123;</span></div><div class="line"><span class="xml">    template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">// 子路由中的 register 组件</span></span></div><div class="line"><span class="javascript">  <span class="keyword">const</span> register = Vue.extend(&#123;</span></div><div class="line"><span class="xml">    template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">// 路由实例</span></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></div><div class="line"><span class="undefined">    routes: [</span></div><div class="line"><span class="javascript">      &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/account/login'</span> &#125;, <span class="comment">// 使用 redirect 实现路由重定向</span></span></div><div class="line"><span class="undefined">      &#123;</span></div><div class="line"><span class="javascript">        path: <span class="string">'/account'</span>,</span></div><div class="line"><span class="undefined">        component: account,</span></div><div class="line"><span class="javascript">        children: [ <span class="comment">// 通过 children 数组属性，来实现路由的嵌套</span></span></div><div class="line"><span class="javascript">          &#123; <span class="attr">path</span>: <span class="string">'login'</span>, <span class="attr">component</span>: login &#125;, <span class="comment">// 注意，子路由的开头位置，不要加 / 路径符</span></span></div><div class="line"><span class="javascript">          &#123; <span class="attr">path</span>: <span class="string">'register'</span>, <span class="attr">component</span>: register &#125;</span></div><div class="line"><span class="undefined">        ]</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    ]</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">    data: &#123;&#125;,</span></div><div class="line"><span class="undefined">    methods: &#123;&#125;,</span></div><div class="line"><span class="undefined">    components: &#123;</span></div><div class="line"><span class="undefined">      account</span></div><div class="line"><span class="undefined">    &#125;,</span></div><div class="line"><span class="undefined">    router: router</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>使用children属性实现子路由的时候子路由的path前面，不要带/。这样默认是永远以根目录去查找，很可能查找不到，这样不方便我们用户去理解URL地址。</li>
</ul>
<h2 id="命名视图实现经典布局"><a href="#命名视图实现经典布局" class="headerlink" title="命名视图实现经典布局"></a>命名视图实现经典布局</h2><ol>
<li>标签代码结构：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>JS代码：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">var</span> header = Vue.component(<span class="string">'header'</span>, &#123;</div><div class="line">      template: <span class="string">'&lt;div class="header"&gt;header&lt;/div&gt;'</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> sidebar = Vue.component(<span class="string">'sidebar'</span>, &#123;</div><div class="line">      template: <span class="string">'&lt;div class="sidebar"&gt;sidebar&lt;/div&gt;'</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> mainbox = Vue.component(<span class="string">'mainbox'</span>, &#123;</div><div class="line">      template: <span class="string">'&lt;div class="mainbox"&gt;mainbox&lt;/div&gt;'</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 创建路由对象</span></div><div class="line">    <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">      routes: [</div><div class="line">        &#123;</div><div class="line">          path: <span class="string">'/'</span>, <span class="attr">components</span>: &#123;</div><div class="line">            <span class="keyword">default</span>: header,</div><div class="line">            a: sidebar,</div><div class="line">            b: mainbox</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      el: <span class="string">'#app'</span>,</div><div class="line">      data: &#123;&#125;,</div><div class="line">      methods: &#123;&#125;,</div><div class="line">      router</div><div class="line">    &#125;);</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>CSS 样式：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">style</span>&gt;</div><div class="line">  <span class="selector-class">.header</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.content</span>&#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.sidebar</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">2</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid green;</div><div class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.mainbox</span>&#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">8</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</div><div class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h2 id="watch属性的使用"><a href="#watch属性的使用" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>
<ol>
<li>监听<code>data</code>中属性的改变：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"firstName"</span>&gt;</span> +</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"lastName"</span>&gt;</span> =</div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">      data: &#123;</span></div><div class="line"><span class="javascript">        firstName: <span class="string">'jack'</span>,</span></div><div class="line"><span class="javascript">        lastName: <span class="string">'chen'</span>,</span></div><div class="line"><span class="javascript">        fullName: <span class="string">'jack - chen'</span></span></div><div class="line"><span class="undefined">      &#125;,</span></div><div class="line"><span class="undefined">      methods: &#123;&#125;,</span></div><div class="line"><span class="undefined">      watch: &#123;</span></div><div class="line"><span class="javascript">        <span class="string">'firstName'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123; <span class="comment">// 第一个参数是新数据，第二个参数是旧数据</span></span></div><div class="line"><span class="javascript">          <span class="keyword">this</span>.fullName = newVal + <span class="string">' - '</span> + <span class="keyword">this</span>.lastName;</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        <span class="string">'lastName'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' - '</span> + newVal;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>监听路由对象的改变：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> login = Vue.extend(&#123;</span></div><div class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> register = Vue.extend(&#123;</span></div><div class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></div><div class="line"><span class="undefined">      routes: [</span></div><div class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">"/login"</span>, <span class="attr">component</span>: login &#125;,</span></div><div class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">"/register"</span>, <span class="attr">component</span>: register &#125;</span></div><div class="line"><span class="undefined">      ]</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">      data: &#123;&#125;,</span></div><div class="line"><span class="undefined">      methods: &#123;&#125;,</span></div><div class="line"><span class="undefined">      router: router,</span></div><div class="line"><span class="undefined">      watch: &#123;</span></div><div class="line"><span class="javascript">        <span class="string">'$route'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">if</span> (newVal.path === <span class="string">'/login'</span>) &#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'这是登录组件'</span>);</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h2><ol>
<li>默认只有<code>getter</code>的计算属性：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"firstName"</span>&gt;</span> +</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"lastName"</span>&gt;</span> =</div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">      data: &#123;</span></div><div class="line"><span class="javascript">        firstName: <span class="string">'jack'</span>,</span></div><div class="line"><span class="javascript">        lastName: <span class="string">'chen'</span></span></div><div class="line"><span class="undefined">      &#125;,</span></div><div class="line"><span class="undefined">      methods: &#123;&#125;,</span></div><div class="line"><span class="javascript">      computed: &#123; <span class="comment">// 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span></span></div><div class="line"><span class="undefined">        fullName() &#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' - '</span> + <span class="keyword">this</span>.lastName;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>定义有<code>getter</code>和<code>setter</code>的计算属性：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"firstName"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"lastName"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"修改fullName"</span> @<span class="attr">click</span>=<span class="string">"changeName"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">      data: &#123;</span></div><div class="line"><span class="javascript">        firstName: <span class="string">'jack'</span>,</span></div><div class="line"><span class="javascript">        lastName: <span class="string">'chen'</span></span></div><div class="line"><span class="undefined">      &#125;,</span></div><div class="line"><span class="undefined">      methods: &#123;</span></div><div class="line"><span class="undefined">        changeName() &#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">this</span>.fullName = <span class="string">'TOM - chen2'</span>;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;,</span></div><div class="line"><span class="undefined">      computed: &#123;</span></div><div class="line"><span class="undefined">        fullName: &#123;</span></div><div class="line"><span class="javascript">          get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' - '</span> + <span class="keyword">this</span>.lastName;</span></div><div class="line"><span class="undefined">          &#125;,</span></div><div class="line"><span class="javascript">          set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> parts = newVal.split(<span class="string">' - '</span>);</span></div><div class="line"><span class="javascript">            <span class="keyword">this</span>.firstName = parts[<span class="number">0</span>];</span></div><div class="line"><span class="javascript">            <span class="keyword">this</span>.lastName = parts[<span class="number">1</span>];</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>
<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>
<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>
<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>
</ol>
<h2 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>
<ol>
<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>
<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>
<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；<blockquote>
<p>注意： nrm 只是单纯的提供了几个常用的下载包的URL地址，并能够让我们在这几个地址之间，很方便的进行切换，但是，我们每次装包的时候，使用的 装包工具，都是  npm。</p>
</blockquote>
</li>
</ol>
<h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><ol>
<li><a href="http://www.cnblogs.com/joyho/articles/4430148.html" target="_blank" rel="external">URL中的hash（井号）</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue-js-开怀&quot;&gt;&lt;a href=&quot;#Vue-js-开怀&quot; class=&quot;headerlink&quot; title=&quot;Vue.js - 开怀&quot;&gt;&lt;/a&gt;Vue.js - 开怀&lt;/h1&gt;&lt;h2 id=&quot;定义组件的方式&quot;&gt;&lt;a href=&quot;#定义组件的方式&quot; class
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-情动</title>
    <link href="http://yoursite.com/2017/07/05/22.Vue.js-%E6%83%85%E5%8A%A8/"/>
    <id>http://yoursite.com/2017/07/05/22.Vue.js-情动/</id>
    <published>2017-07-05T14:23:11.000Z</published>
    <updated>2017-11-03T09:17:52.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-情动"><a href="#Vue-js-情动" class="headerlink" title="Vue.js - 情动"></a>Vue.js - 情动</h1><h2 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h2><ul>
<li>在Vue的生命周期中，发ajax请求最早只能在created中发，再早的话就访问不到了。</li>
<li>Vue自定义前缀可以区分不同组织间的动画<h2 id="定义Vue组件"><a href="#定义Vue组件" class="headerlink" title="定义Vue组件"></a>定义Vue组件</h2>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：<ul>
<li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li>
<li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；<h3 id="全局组件定义的三种方式"><a href="#全局组件定义的三种方式" class="headerlink" title="全局组件定义的三种方式"></a>全局组件定义的三种方式</h3></li>
</ul>
</li>
</ul>
<ol>
<li>使用 Vue.extend 配合 Vue.component 方法：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> login = Vue.extend(&#123;</div><div class="line">      template: <span class="string">'&lt;h1&gt;登录&lt;/h1&gt;'</span></div><div class="line">    &#125;);</div><div class="line">    Vue.component(<span class="string">'login'</span>, login);</div></pre></td></tr></table></figure>
<ol>
<li>直接使用 Vue.component 方法：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'register'</span>, &#123;</div><div class="line">      template: <span class="string">'&lt;h1&gt;注册&lt;/h1&gt;'</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<ol>
<li>将模板字符串，定义到script标签种：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script id=<span class="string">"tmpl"</span> type=<span class="string">"x-template"</span>&gt;</div><div class="line">      &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> | <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">    &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>同时，需要使用 Vue.component 来定义组件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'account'</span>, &#123;</div><div class="line">      template: <span class="string">'#tmpl'</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p>
</blockquote>
<h3 id="组件中展示数据和响应事件"><a href="#组件中展示数据和响应事件" class="headerlink" title="组件中展示数据和响应事件"></a>组件中展示数据和响应事件</h3><ol>
<li>在组件中，<code>data</code>需要被定义为一个方法，例如：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'account'</span>, &#123;</div><div class="line">      template: <span class="string">'#tmpl'</span>,</div><div class="line">      data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          msg: <span class="string">'大家好！'</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      methods:&#123;</div><div class="line">        login()&#123;</div><div class="line">          alert(<span class="string">'点击了登录按钮'</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<ol>
<li>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</li>
</ol>
<h3 id="【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象"><a href="#【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象" class="headerlink" title="【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象"></a>【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象</h3><ol>
<li>通过计数器案例演示</li>
</ol>
<h3 id="使用components属性定义局部子组件"><a href="#使用components属性定义局部子组件" class="headerlink" title="使用components属性定义局部子组件"></a>使用<code>components</code>属性定义局部子组件</h3><ol>
<li>组件实例定义方式：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      el: <span class="string">'#app'</span>,</div><div class="line">      data: &#123;&#125;,</div><div class="line">      methods: &#123;&#125;,</div><div class="line">      components: &#123; <span class="comment">// 定义子组件</span></div><div class="line">        account: &#123; <span class="comment">// account 组件</span></div><div class="line">          template: <span class="string">'&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;login&gt;&lt;/login&gt;&lt;/div&gt;'</span>, <span class="comment">// 在这里使用定义的子组件</span></div><div class="line">          components: &#123; <span class="comment">// 定义子组件的子组件</span></div><div class="line">            login: &#123; <span class="comment">// login 组件</span></div><div class="line">              template: <span class="string">"&lt;h3&gt;这是登录组件&lt;/h3&gt;"</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>引用组件：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">account</span>&gt;</span><span class="tag">&lt;/<span class="name">account</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="创建组件的方式"><a href="#创建组件的方式" class="headerlink" title="创建组件的方式"></a>创建组件的方式</h2><ul>
<li>如果要使用组件，直接把组件的名称，以html标签的形式引入到页面中即可。</li>
<li>使用Vue.extend来创建全局的Vue组件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> com1=Vue.extend(&#123;</div><div class="line">    template:<span class="string">"&lt;h3这是使用Vue.extend创建的组件&lt;/h3&gt;&gt;"</span></div><div class="line">    <span class="comment">// 通过template属性，指定了组件要展示的html结构</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>使用Vue.component定义全局组件的时候，这个名称使用了驼峰命名，则在引用组件的时候，需要把大写的驼峰改为小写的字母，同时，两个单词之间使用-链接。</li>
<li>如果不适用驼峰，则直接拿名称来使用即可。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">"myCom1"</span>,com1);</div><div class="line">Vue.component(<span class="string">"mycom2"</span>,com2);</div></pre></td></tr></table></figure>
<ul>
<li>第一个参数为组件的名称，将来在引用组件的时候，就是一个标签格式来引入它的</li>
<li>第二个参数:Vue.entend创建的组件，其中template就是组件将来要展示的html内容</li>
<li><strong>不论是那种方式创建出来的组件，组件的template属性执行的模版内容，必须有且只能有唯一的一个根元素。</strong></li>
</ul>
<h2 id="使用flag标识符结合v-if和v-else切换组件"><a href="#使用flag标识符结合v-if和v-else切换组件" class="headerlink" title="使用flag标识符结合v-if和v-else切换组件"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h2><ol>
<li>页面结构：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"toggle"</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">my-com1</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">my-com2</span> <span class="attr">v-else</span>=<span class="string">"flag"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>Vue实例定义：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    Vue.component(<span class="string">'myCom1'</span>, &#123;</div><div class="line">      template: <span class="string">'&lt;h3&gt;奔波霸&lt;/h3&gt;'</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    Vue.component(<span class="string">'myCom2'</span>, &#123;</div><div class="line">      template: <span class="string">'&lt;h3&gt;霸波奔&lt;/h3&gt;'</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      el: <span class="string">'#app'</span>,</div><div class="line">      data: &#123;</div><div class="line">        flag: <span class="literal">true</span></div><div class="line">      &#125;,</div><div class="line">      methods: &#123;&#125;</div><div class="line">    &#125;);</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用-is属性来切换不同的子组件-并添加切换动画"><a href="#使用-is属性来切换不同的子组件-并添加切换动画" class="headerlink" title="使用:is属性来切换不同的子组件,并添加切换动画"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h2><ol>
<li>组件实例定义方式：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 登录组件</span></div><div class="line">  <span class="keyword">const</span> login = Vue.extend(&#123;</div><div class="line">    template: <span class="string">`&lt;div&gt;</span></div><div class="line"><span class="string">      &lt;h3&gt;登录组件&lt;/h3&gt;</span></div><div class="line"><span class="string">    &lt;/div&gt;`</span></div><div class="line">  &#125;);</div><div class="line">  Vue.component(<span class="string">'login'</span>, login);</div><div class="line"></div><div class="line">  <span class="comment">// 注册组件</span></div><div class="line">  <span class="keyword">const</span> register = Vue.extend(&#123;</div><div class="line">    template: <span class="string">`&lt;div&gt;</span></div><div class="line"><span class="string">      &lt;h3&gt;注册组件&lt;/h3&gt;</span></div><div class="line"><span class="string">    &lt;/div&gt;`</span></div><div class="line">  &#125;);</div><div class="line">  Vue.component(<span class="string">'register'</span>, register);</div><div class="line"></div><div class="line">  <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></div><div class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#app'</span>,</div><div class="line">    data: &#123; <span class="attr">comName</span>: <span class="string">'login'</span> &#125;,</div><div class="line">    methods: &#123;&#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<ol>
<li>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click.prevent</span>=<span class="string">"comName='login'"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click.prevent</span>=<span class="string">"comName='register'"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"comName"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>添加切换样式：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">style</span>&gt;</div><div class="line">  <span class="selector-class">.v-enter</span>,</div><div class="line">  <span class="selector-class">.v-leave-to</span> &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(30px);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.v-enter-active</span>,</div><div class="line">  <span class="selector-class">.v-leave-active</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-tag">h3</span>&#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="私有组件的创建"><a href="#私有组件的创建" class="headerlink" title="私有组件的创建"></a>私有组件的创建</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>创建组件的方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mycom3</span>&gt;</span><span class="tag">&lt;/<span class="name">mycom3</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mycom3</span>&gt;</span><span class="tag">&lt;/<span class="name">mycom3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">login</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 在被控制的#app外面，使用template元素，定义组件的html模版结构 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是通过template元素，在外部定义的组件结构，这个方式，有代码的只能提示和高亮<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h4</span>&gt;</span>戴好，都歪了<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl2"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是私有的login组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		Vue.component(<span class="string">"mycom3"</span>, &#123;</span></div><div class="line"><span class="javascript">			template: <span class="string">"#tmpl"</span></span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app2"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;&#125;,</span></div><div class="line"><span class="undefined">			filters: &#123;&#125;,</span></div><div class="line"><span class="undefined">			directives: &#123;&#125;,</span></div><div class="line"><span class="undefined">			components: &#123;</span></div><div class="line"><span class="javascript">				<span class="comment">// 定义实例内部私有组件的</span></span></div><div class="line"><span class="undefined">				login: &#123;</span></div><div class="line"><span class="javascript">					template: <span class="string">"#tmpl2"</span></span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			beforeCreate() &#123;&#125;,</span></div><div class="line"><span class="undefined">			created() &#123;&#125;,</span></div><div class="line"><span class="undefined">			beforeMount() &#123;&#125;,</span></div><div class="line"><span class="undefined">			mounted() &#123;&#125;,</span></div><div class="line"><span class="undefined">			beforeUpdate() &#123;&#125;,</span></div><div class="line"><span class="undefined">			updated() &#123;&#125;,</span></div><div class="line"><span class="undefined">			beforeDestroy() &#123;&#125;,</span></div><div class="line"><span class="undefined">			destroyed() &#123;&#125;</span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>组件可以有自己的data数据，这里的data和实例的data有点不一样。实例中的data可以为一个对象，但是组件中的data必须为一个方法</li>
<li>组件中的data除了必须为一个方法之外，这个方法的内部还必须返回一个对象才行</li>
<li>组件中的data数据，使用方式和实例中的data使用方式完全一样。看下面的例子</li>
<li><strong>Why components data must be a function</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"teml"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"+1"</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> dataObj = &#123;</span></div><div class="line"><span class="undefined">			count: 0</span></div><div class="line"><span class="undefined">		&#125;;</span></div><div class="line"><span class="javascript">		<span class="comment">// 这是一个计数器的组件，身上有个按钮，每当点击按钮，让data中的count值+1</span></span></div><div class="line"><span class="javascript">		Vue.compinent(<span class="string">"counter"</span>, &#123;</span></div><div class="line"><span class="javascript">			template: <span class="string">"#tmpl"</span>,</span></div><div class="line"><span class="javascript">			data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">				<span class="keyword">return</span> &#123;</span></div><div class="line"><span class="undefined">					count: 0</span></div><div class="line"><span class="undefined">				&#125;;</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;</span></div><div class="line"><span class="undefined">				increment() &#123;</span></div><div class="line"><span class="javascript">					<span class="keyword">this</span>.count++;</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>组件切换动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.v-enter</span>,</span></div><div class="line"><span class="css">		<span class="selector-class">.v-leave-to</span> &#123;</span></div><div class="line"><span class="undefined">			opacity: 0;</span></div><div class="line"><span class="undefined">			transform: translateX(150px);</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.v-enter-active</span>,</span></div><div class="line"><span class="css">		<span class="selector-class">.v-leave-active</span> &#123;</span></div><div class="line"><span class="css">			<span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.5s</span> <span class="selector-tag">ease</span>;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click.prevent</span>=<span class="string">"comName='login'"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click.prevent</span>=<span class="string">"comName='register'"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 通过mode属性，设置组件切换时候的模式 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"comName"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="comment">// 组件名称是字符串</span></span></div><div class="line"><span class="javascript">		Vue.component(<span class="string">"login"</span>, &#123;</span></div><div class="line"><span class="xml">			template: "<span class="tag">&lt;<span class="name">h3</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>"</span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="javascript">		Vue.component(<span class="string">"register"</span>, &#123;</span></div><div class="line"><span class="xml">			template: "<span class="tag">&lt;<span class="name">h3</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>"</span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="javascript">				<span class="comment">// 当前component中的:is绑定的组件的名称</span></span></div><div class="line"><span class="javascript">				comName: <span class="string">"login"</span></span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>三个counter返回都指向统一个data，所以创建一个组件所有组件都能访问到data。所以data就要定义为一个function并且返回一个count:0;其目的就是为了使数据互不影响。</li>
<li>设置<code>mode=&quot;out-in&quot;</code>是为了防止离开动画和进入动画相遇，导致用户体验不好。</li>
</ul>
<h2 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><ol>
<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      el: <span class="string">'#app'</span>,</div><div class="line">      data: &#123;</div><div class="line">        msg: <span class="string">'这是父组件中的消息'</span></div><div class="line">      &#125;,</div><div class="line">      components: &#123;</div><div class="line">        son: &#123;</div><div class="line">          template: <span class="string">'&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;/h1&gt;'</span>,</div><div class="line">          props: [<span class="string">'finfo'</span>]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">son</span> <span class="attr">:finfo</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><ol>
<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>
<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">son</span> @<span class="attr">func</span>=<span class="string">"getMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 引用父组件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">son</span> @<span class="attr">func</span>=<span class="string">"getMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 组件模板定义 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"x-template"</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"向父组件传值"</span> @<span class="attr">click</span>=<span class="string">"sendMsg"</span> /&gt;</span></span></div><div class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 子组件的定义方式</span></span></div><div class="line"><span class="javascript">    Vue.component(<span class="string">'son'</span>, &#123;</span></div><div class="line"><span class="javascript">      template: <span class="string">'#son'</span>, <span class="comment">// 组件模板Id</span></span></div><div class="line"><span class="undefined">      methods: &#123;</span></div><div class="line"><span class="javascript">        sendMsg() &#123; <span class="comment">// 按钮的点击事件</span></span></div><div class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'func'</span>, <span class="string">'OK'</span>); <span class="comment">// 调用父组件传递过来的方法，同时把数据传递出去</span></span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">      data: &#123;&#125;,</span></div><div class="line"><span class="undefined">      methods: &#123;</span></div><div class="line"><span class="javascript">        getMsg(val)&#123; <span class="comment">// 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span></span></div><div class="line"><span class="undefined">          alert(val);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="评论列表案例"><a href="#评论列表案例" class="headerlink" title="评论列表案例"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>
<h2 id="使用-this-refs-来获取元素和组件"><a href="#使用-this-refs-来获取元素和组件" class="headerlink" title="使用 this.$refs 来获取元素和组件"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取元素内容"</span> @<span class="attr">click</span>=<span class="string">"getElement"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用 ref 获取元素 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">"myh1"</span>&gt;</span>这是一个大大的H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用 ref 获取子组件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">my-com</span> <span class="attr">ref</span>=<span class="string">"mycom"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  Vue.component(<span class="string">'my-com'</span>, &#123;</span></div><div class="line"><span class="xml">    template: '<span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是一个子组件<span class="tag">&lt;/<span class="name">h5</span>&gt;</span>',</span></div><div class="line"><span class="undefined">    data() &#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></div><div class="line"><span class="javascript">        name: <span class="string">'子组件'</span></span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">    data: &#123;&#125;,</span></div><div class="line"><span class="undefined">    methods: &#123;</span></div><div class="line"><span class="undefined">      getElement() &#123;</span></div><div class="line"><span class="javascript">        <span class="comment">// 通过 this.$refs 来获取元素</span></span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.myh1.innerText);</span></div><div class="line"><span class="javascript">        <span class="comment">// 通过 this.$refs 来获取组件</span></span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.mycom.name);</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><ol>
<li><p>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>
</li>
<li><p>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>
</li>
<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>
</li>
</ol>
<h2 id="在-vue-中使用-vue-router"><a href="#在-vue-中使用-vue-router" class="headerlink" title="在 vue 中使用 vue-router"></a>在 vue 中使用 vue-router</h2><ol>
<li>导入 vue-router 组件类库：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-router-2.7.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>使用 router-link 组件来导航</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>使用 router-view 组件来显示匹配到的组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>创建使用<code>Vue.extend</code>创建组件</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 4.1 使用 Vue.extend 来创建登录组件</span></div><div class="line"><span class="keyword">var</span> login = Vue.extend(&#123;</div><div class="line">  template: <span class="string">'&lt;h1&gt;登录组件&lt;/h1&gt;'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 4.2 使用 Vue.extend 来创建注册组件</span></div><div class="line"><span class="keyword">var</span> register = Vue.extend(&#123;</div><div class="line">  template: <span class="string">'&lt;h1&gt;注册组件&lt;/h1&gt;'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li><p>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</div><div class="line">    var router = new VueRouter(&#123;</div><div class="line">      routes: [</div><div class="line">        &#123; path: &apos;/login&apos;, component: login &#125;,</div><div class="line">        &#123; path: &apos;/register&apos;, component: register &#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>使用 router 属性来使用路由规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 6. 创建 Vue 实例，得到 ViewModel</div><div class="line">    var vm = new Vue(&#123;</div><div class="line">      el: &apos;#app&apos;,</div><div class="line">      router: router // 使用 router 属性来使用路由规则</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="设置路由高亮"><a href="#设置路由高亮" class="headerlink" title="设置路由高亮"></a>设置路由高亮</h2><h2 id="设置路由切换动效"><a href="#设置路由切换动效" class="headerlink" title="设置路由切换动效"></a>设置路由切换动效</h2><h2 id="在路由规则中定义参数"><a href="#在路由规则中定义参数" class="headerlink" title="在路由规则中定义参数"></a>在路由规则中定义参数</h2><ol>
<li><p>在规则中定义参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; path: &apos;/register/:id&apos;, component: register &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过 <code>this.$route.params</code>来获取路由中的参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var register = Vue.extend(&#123;</div><div class="line">      template: &apos;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;/h1&gt;&apos;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用-children-属性实现路由嵌套"><a href="#使用-children-属性实现路由嵌套" class="headerlink" title="使用 children 属性实现路由嵌套"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">  &lt;router-link to=&quot;/account&quot;&gt;Account&lt;/router-link&gt;</div><div class="line"></div><div class="line">  &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">  // 父路由中的组件</div><div class="line">  const account = Vue.extend(&#123;</div><div class="line">    template: `&lt;div&gt;</div><div class="line">      这是account组件</div><div class="line">      &lt;router-link to=&quot;/account/login&quot;&gt;login&lt;/router-link&gt; | </div><div class="line">      &lt;router-link to=&quot;/account/register&quot;&gt;register&lt;/router-link&gt;</div><div class="line">      &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">    &lt;/div&gt;`</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  // 子路由中的 login 组件</div><div class="line">  const login = Vue.extend(&#123;</div><div class="line">    template: &apos;&lt;div&gt;登录组件&lt;/div&gt;&apos;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  // 子路由中的 register 组件</div><div class="line">  const register = Vue.extend(&#123;</div><div class="line">    template: &apos;&lt;div&gt;注册组件&lt;/div&gt;&apos;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  // 路由实例</div><div class="line">  var router = new VueRouter(&#123;</div><div class="line">    routes: [</div><div class="line">      &#123; path: &apos;/&apos;, redirect: &apos;/account/login&apos; &#125;, // 使用 redirect 实现路由重定向</div><div class="line">      &#123;</div><div class="line">        path: &apos;/account&apos;,</div><div class="line">        component: account,</div><div class="line">        children: [ // 通过 children 数组属性，来实现路由的嵌套</div><div class="line">          &#123; path: &apos;login&apos;, component: login &#125;, // 注意，子路由的开头位置，不要加 / 路径符</div><div class="line">          &#123; path: &apos;register&apos;, component: register &#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  // 创建 Vue 实例，得到 ViewModel</div><div class="line">  var vm = new Vue(&#123;</div><div class="line">    el: &apos;#app&apos;,</div><div class="line">    data: &#123;&#125;,</div><div class="line">    methods: &#123;&#125;,</div><div class="line">    components: &#123;</div><div class="line">      account</div><div class="line">    &#125;,</div><div class="line">    router: router</div><div class="line">  &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="命名视图实现经典布局"><a href="#命名视图实现经典布局" class="headerlink" title="命名视图实现经典布局"></a>命名视图实现经典布局</h2><ol>
<li><p>标签代码结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">    &lt;div class=&quot;content&quot;&gt;</div><div class="line">      &lt;router-view name=&quot;a&quot;&gt;&lt;/router-view&gt;</div><div class="line">      &lt;router-view name=&quot;b&quot;&gt;&lt;/router-view&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>JS代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    var header = Vue.component(&apos;header&apos;, &#123;</div><div class="line">      template: &apos;&lt;div class=&quot;header&quot;&gt;header&lt;/div&gt;&apos;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    var sidebar = Vue.component(&apos;sidebar&apos;, &#123;</div><div class="line">      template: &apos;&lt;div class=&quot;sidebar&quot;&gt;sidebar&lt;/div&gt;&apos;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    var mainbox = Vue.component(&apos;mainbox&apos;, &#123;</div><div class="line">      template: &apos;&lt;div class=&quot;mainbox&quot;&gt;mainbox&lt;/div&gt;&apos;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // 创建路由对象</div><div class="line">    var router = new VueRouter(&#123;</div><div class="line">      routes: [</div><div class="line">        &#123;</div><div class="line">          path: &apos;/&apos;, components: &#123;</div><div class="line">            default: header,</div><div class="line">            a: sidebar,</div><div class="line">            b: mainbox</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // 创建 Vue 实例，得到 ViewModel</div><div class="line">    var vm = new Vue(&#123;</div><div class="line">      el: &apos;#app&apos;,</div><div class="line">      data: &#123;&#125;,</div><div class="line">      methods: &#123;&#125;,</div><div class="line">      router</div><div class="line">    &#125;);</div><div class="line">  &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>CSS 样式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">  .header &#123;</div><div class="line">    border: 1px solid red;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  .content&#123;</div><div class="line">    display: flex;</div><div class="line">  &#125;</div><div class="line">  .sidebar &#123;</div><div class="line">    flex: 2;</div><div class="line">    border: 1px solid green;</div><div class="line">    height: 500px;</div><div class="line">  &#125;</div><div class="line">  .mainbox&#123;</div><div class="line">    flex: 8;</div><div class="line">    border: 1px solid blue;</div><div class="line">    height: 500px;</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="watch属性的使用"><a href="#watch属性的使用" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>
<ol>
<li><p>监听<code>data</code>中属性的改变：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</div><div class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</div><div class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line"></div><div class="line">  &lt;script&gt;</div><div class="line">    // 创建 Vue 实例，得到 ViewModel</div><div class="line">    var vm = new Vue(&#123;</div><div class="line">      el: &apos;#app&apos;,</div><div class="line">      data: &#123;</div><div class="line">        firstName: &apos;jack&apos;,</div><div class="line">        lastName: &apos;chen&apos;,</div><div class="line">        fullName: &apos;jack - chen&apos;</div><div class="line">      &#125;,</div><div class="line">      methods: &#123;&#125;,</div><div class="line">      watch: &#123;</div><div class="line">        &apos;firstName&apos;: function (newVal, oldVal) &#123; // 第一个参数是新数据，第二个参数是旧数据</div><div class="line">          this.fullName = newVal + &apos; - &apos; + this.lastName;</div><div class="line">        &#125;,</div><div class="line">        &apos;lastName&apos;: function (newVal, oldVal) &#123;</div><div class="line">          this.fullName = this.firstName + &apos; - &apos; + newVal;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>监听路由对象的改变：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</div><div class="line">    &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</div><div class="line"></div><div class="line">    &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line"></div><div class="line">  &lt;script&gt;</div><div class="line">    var login = Vue.extend(&#123;</div><div class="line">      template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    var register = Vue.extend(&#123;</div><div class="line">      template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    var router = new VueRouter(&#123;</div><div class="line">      routes: [</div><div class="line">        &#123; path: &quot;/login&quot;, component: login &#125;,</div><div class="line">        &#123; path: &quot;/register&quot;, component: register &#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // 创建 Vue 实例，得到 ViewModel</div><div class="line">    var vm = new Vue(&#123;</div><div class="line">      el: &apos;#app&apos;,</div><div class="line">      data: &#123;&#125;,</div><div class="line">      methods: &#123;&#125;,</div><div class="line">      router: router,</div><div class="line">      watch: &#123;</div><div class="line">        &apos;$route&apos;: function (newVal, oldVal) &#123;</div><div class="line">          if (newVal.path === &apos;/login&apos;) &#123;</div><div class="line">            console.log(&apos;这是登录组件&apos;);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h2><ol>
<li><p>默认只有<code>getter</code>的计算属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</div><div class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</div><div class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line"></div><div class="line">  &lt;script&gt;</div><div class="line">    // 创建 Vue 实例，得到 ViewModel</div><div class="line">    var vm = new Vue(&#123;</div><div class="line">      el: &apos;#app&apos;,</div><div class="line">      data: &#123;</div><div class="line">        firstName: &apos;jack&apos;,</div><div class="line">        lastName: &apos;chen&apos;</div><div class="line">      &#125;,</div><div class="line">      methods: &#123;&#125;,</div><div class="line">      computed: &#123; // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</div><div class="line">        fullName() &#123;</div><div class="line">          return this.firstName + &apos; - &apos; + this.lastName;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>定义有<code>getter</code>和<code>setter</code>的计算属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;</div><div class="line">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;修改fullName&quot; @click=&quot;changeName&quot;&gt;</div><div class="line"></div><div class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line"></div><div class="line">  &lt;script&gt;</div><div class="line">    // 创建 Vue 实例，得到 ViewModel</div><div class="line">    var vm = new Vue(&#123;</div><div class="line">      el: &apos;#app&apos;,</div><div class="line">      data: &#123;</div><div class="line">        firstName: &apos;jack&apos;,</div><div class="line">        lastName: &apos;chen&apos;</div><div class="line">      &#125;,</div><div class="line">      methods: &#123;</div><div class="line">        changeName() &#123;</div><div class="line">          this.fullName = &apos;TOM - chen2&apos;;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      computed: &#123;</div><div class="line">        fullName: &#123;</div><div class="line">          get: function () &#123;</div><div class="line">            return this.firstName + &apos; - &apos; + this.lastName;</div><div class="line">          &#125;,</div><div class="line">          set: function (newVal) &#123;</div><div class="line">            var parts = newVal.split(&apos; - &apos;);</div><div class="line">            this.firstName = parts[0];</div><div class="line">            this.lastName = parts[1];</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>
<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>
<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>
<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>
</ol>
<h2 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>
<ol>
<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>
<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>
<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>
</ol>
<h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><ol>
<li><a href="http://www.cnblogs.com/joyho/articles/4430148.html" target="_blank" rel="external">URL中的hash（井号）</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue-js-情动&quot;&gt;&lt;a href=&quot;#Vue-js-情动&quot; class=&quot;headerlink&quot; title=&quot;Vue.js - 情动&quot;&gt;&lt;/a&gt;Vue.js - 情动&lt;/h1&gt;&lt;h2 id=&quot;杂七杂八&quot;&gt;&lt;a href=&quot;#杂七杂八&quot; class=&quot;head
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-偶遇</title>
    <link href="http://yoursite.com/2017/06/20/21.vue.js-%E5%81%B6%E9%81%87/"/>
    <id>http://yoursite.com/2017/06/20/21.vue.js-偶遇/</id>
    <published>2017-06-20T02:12:11.000Z</published>
    <updated>2017-11-03T09:17:13.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-偶遇"><a href="#Vue-js-偶遇" class="headerlink" title="Vue.js -偶遇"></a>Vue.js -偶遇</h1><h2 id="品牌管理案例"><a href="#品牌管理案例" class="headerlink" title="品牌管理案例"></a>品牌管理案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>品牌列表改进版<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./lib/bootstrap-3.3.7.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span>添加豪车<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body form-inline"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">					Id:</div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">					name:</div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"name"</span> @<span class="attr">keyup.f2</span>=<span class="string">"add"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 在Vue中，使用事件绑定机制，为元素指定处理函数的时候，如果加了小括号，就可以给函数传参了 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"添加"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">					搜索名称关键字:</div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"keywords"</span> <span class="attr">placeholder</span>=<span class="string">"请输入关键字"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">v-focus</span> <span class="attr">v-color</span>=<span class="string">"'green'"</span>&gt;</span></div><div class="line">					<span class="comment">&lt;!-- 这里的green加引号，不加引号会去下面去找 --&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-hover table-striped"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>Ctime<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>Operation<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 之前v-for中的数据，都是直接从data上的list、中直接渲染过来的 --&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 现在，我们定义了一个search方法，同时，把所有的关键字，通过传参的形式，传递给了search方法 --&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 在search方法内部，通过执行for循环，把所有符合搜索关键字的数据，保存到一个新数组中返回 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in search(keywords)"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.ctime | dateFormat()&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click.prevent</span>=<span class="string">"del(item.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 这里pink不加引号会显示undefined，回去下面找 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-color</span>=<span class="string">"'pink'"</span> <span class="attr">v-fontweight</span>=<span class="string">"900"</span> <span class="attr">v-fontsize</span>=<span class="string">"50"</span>&gt;</span>&#123;&#123;dt|dateFormat&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">		/*</span></div><div class="line"><span class="undefined">									全局的过滤器，进行事件的格式化</span></div><div class="line"><span class="undefined">									所谓全局过滤器，就是所有的VM实例都是共享的</span></div><div class="line"><span class="undefined">								*/</span></div><div class="line"><span class="javascript">		Vue.filter(<span class="string">"dateFormat"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">dateStr, pattern = <span class="string">""</span></span>) </span>&#123;</span></div><div class="line"><span class="javascript">			<span class="comment">// 根据给定的时间字符串，得到特定的时间</span></span></div><div class="line"><span class="javascript">			<span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dateStr);</span></div><div class="line"><span class="javascript">			<span class="comment">// yyyy-mm-dd</span></span></div><div class="line"><span class="javascript">			<span class="keyword">var</span> y = dt.getFullYear();</span></div><div class="line"><span class="javascript">			<span class="keyword">var</span> m = dt.getMonth() + <span class="number">1</span>;</span></div><div class="line"><span class="javascript">			<span class="keyword">var</span> d = dt.getDate();</span></div><div class="line"><span class="javascript">			<span class="comment">// getDay()是获取星期几的</span></span></div><div class="line"><span class="javascript">			<span class="comment">// return y+"-"+m+"-"+d</span></span></div><div class="line"><span class="javascript">			<span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">"yyyy-mm-dd"</span>) &#123;</span></div><div class="line"><span class="javascript">				<span class="comment">// ``模版字符串</span></span></div><div class="line"><span class="javascript">				<span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</span></div><div class="line"><span class="javascript">			&#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">				<span class="keyword">var</span> hh = dt.getHours();</span></div><div class="line"><span class="javascript">				<span class="keyword">var</span> mm = dt.getMinutes();</span></div><div class="line"><span class="javascript">				<span class="keyword">var</span> ss = dt.getSeconds();</span></div><div class="line"><span class="javascript">				<span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span>;</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="javascript">		<span class="comment">// 自定义全局按键修饰符</span></span></div><div class="line"><span class="undefined">		Vue.config.keyCodes.f2 = 113;</span></div><div class="line"><span class="undefined">		/*</span></div><div class="line"><span class="undefined">			使用Vue.directive()定义全局的指令v-focus</span></div><div class="line"><span class="undefined">			其中:参数1：指令的名称，注意，在定义的时候，指令的名称前面，不需要加v-前缀</span></div><div class="line"><span class="undefined">			但是，在调用的时候，必须在指令名称前加上v-前缀来进行调用</span></div><div class="line"><span class="undefined">			参数2：是一个对象，这个对象身上，有一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作</span></div><div class="line"><span class="undefined">		*/</span></div><div class="line"><span class="javascript">		Vue.directive(<span class="string">"focus"</span>, &#123;</span></div><div class="line"><span class="javascript">			bind: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="undefined">					每当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次</span></div><div class="line"><span class="undefined">					注意：在每个函数中，死一个参数永远是el，表示被绑定了指令的那个元素，这个el参数是一个原生的js对象</span></div><div class="line"><span class="undefined">					在元素刚绑定了指令的时候，还没有插入到DOM中去，这时候，调用focus方法没有作用，因为一个元素，只要插入DOM之后，才能获取焦点</span></div><div class="line"><span class="undefined">					el.focus();</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="javascript">			inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="undefined">					inserted表示元素插入到DOM中的时候，会执行inserted函数[触发一次]</span></div><div class="line"><span class="undefined">					和js行为有关的操作，最好在inserted中去执行，防止js行为不生效</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="undefined">				el.focus();</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="javascript">			updated: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></div><div class="line"><span class="javascript">				<span class="comment">// 当VNode更新的时候，会执行updated，可能会触发多次</span></span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="javascript">		<span class="comment">// 自定义一个设置字体颜色的指令</span></span></div><div class="line"><span class="javascript">		Vue.directive(<span class="string">"color"</span>, &#123;</span></div><div class="line"><span class="undefined">			/*</span></div><div class="line"><span class="undefined">				样式，只要通过指令绑定给了元素，不管这个元素有没有被插入到页面中去，这个元素肯定有了一个内联的样式</span></div><div class="line"><span class="undefined">				将来元素肯定会显示到页面中，这个时候，浏览器的渲染引擎必然会解析样式，应用给这个元素</span></div><div class="line"><span class="undefined">			*/</span></div><div class="line"><span class="javascript">			bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="javascript">					el.style.color=<span class="string">"red"</span>;</span></div><div class="line"><span class="javascript">					<span class="built_in">console</span>.log(binding.name);</span></div><div class="line"><span class="undefined">					和样式相关的操作，一般都可以在bind执行</span></div><div class="line"><span class="javascript">					<span class="built_in">console</span>.log(binding.value);green</span></div><div class="line"><span class="javascript">					<span class="built_in">console</span>.log(binding.expression);<span class="string">"green"</span></span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="javascript">				id: <span class="string">""</span>,</span></div><div class="line"><span class="javascript">				name: <span class="string">""</span>,</span></div><div class="line"><span class="javascript">				<span class="comment">// 搜索的关键字</span></span></div><div class="line"><span class="javascript">				keywords: <span class="string">""</span>,</span></div><div class="line"><span class="undefined">				list: [&#123;</span></div><div class="line"><span class="undefined">						id: 1,</span></div><div class="line"><span class="javascript">						name: <span class="string">"玛莎拉蒂"</span>,</span></div><div class="line"><span class="javascript">						ctime: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></div><div class="line"><span class="undefined">					&#125;,</span></div><div class="line"><span class="undefined">					&#123;</span></div><div class="line"><span class="undefined">						id: 2,</span></div><div class="line"><span class="javascript">						name: <span class="string">"兰博基尼"</span>,</span></div><div class="line"><span class="javascript">						ctime: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></div><div class="line"><span class="undefined">					&#125;</span></div><div class="line"><span class="undefined">				]</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;</span></div><div class="line"><span class="javascript">				<span class="comment">// 添加的方法</span></span></div><div class="line"><span class="undefined">				add() &#123;</span></div><div class="line"><span class="undefined">					/*</span></div><div class="line"><span class="undefined">						分析：</span></div><div class="line"><span class="undefined">						1.获取到id和name，直接从data上面获取</span></div><div class="line"><span class="undefined">						2.组织出一个对象</span></div><div class="line"><span class="undefined">						3.把这个对象，调用数组的相关方法，添加到当前data上的list中</span></div><div class="line"><span class="undefined">						4.注意：在Vue中，已经实现了数据的双向绑定，每当我们修改了data中的数据，Vue会默认监听到数据的改动，自动把最新的数据应用到页面上；</span></div><div class="line"><span class="undefined">						5.当我们意识到上面的第四步的时候，就证明已经入门Vue了，我们更多的是在进行VM中Model数据的操作，同时，在操作Model数据的时候，指定的业务逻辑操作</span></div><div class="line"><span class="undefined">					*/</span></div><div class="line"><span class="javascript">					<span class="keyword">var</span> car = &#123;</span></div><div class="line"><span class="javascript">						id: <span class="keyword">this</span>.id,</span></div><div class="line"><span class="javascript">						name: <span class="keyword">this</span>.name,</span></div><div class="line"><span class="javascript">						ctime: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></div><div class="line"><span class="undefined">					&#125;;</span></div><div class="line"><span class="javascript">					<span class="keyword">this</span>.list.push(car);</span></div><div class="line"><span class="javascript">					<span class="keyword">this</span>.id = <span class="keyword">this</span>.name = <span class="string">""</span>;</span></div><div class="line"><span class="undefined">				&#125;,</span></div><div class="line"><span class="javascript">				<span class="comment">// 根据Id删除数据</span></span></div><div class="line"><span class="undefined">				del(id) &#123;</span></div><div class="line"><span class="undefined">					/*</span></div><div class="line"><span class="undefined">						分析：</span></div><div class="line"><span class="undefined">							1.如何根据Id，找到要删除这一项的索引</span></div><div class="line"><span class="undefined">							2.如果找到了索引了，直接调用数组的splice方法</span></div><div class="line"><span class="undefined">					*/</span></div><div class="line"><span class="undefined">					/*</span></div><div class="line"><span class="javascript">						在数组的some方法中，如果<span class="keyword">return</span> <span class="literal">true</span>，就会立即终止这个数组的后续循环 </span></div><div class="line"><span class="undefined">					*/</span></div><div class="line"><span class="javascript">					<span class="comment">// this.list.some((item, i) =&gt; &#123;</span></span></div><div class="line"><span class="javascript">					<span class="comment">// 	this.list.splice(i, 1);</span></span></div><div class="line"><span class="javascript">					<span class="comment">// 	return true;</span></span></div><div class="line"><span class="javascript">					<span class="comment">// &#125;)</span></span></div><div class="line"><span class="javascript">					<span class="keyword">var</span> index = <span class="keyword">this</span>.list.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></div><div class="line"><span class="javascript">						<span class="keyword">if</span> (item.id == id) &#123;</span></div><div class="line"><span class="javascript">							<span class="keyword">return</span> <span class="literal">true</span>;</span></div><div class="line"><span class="undefined">						&#125;</span></div><div class="line"><span class="undefined">					&#125;);</span></div><div class="line"><span class="javascript">					<span class="keyword">this</span>.list.splice(index, <span class="number">1</span>);</span></div><div class="line"><span class="undefined">				&#125;,</span></div><div class="line"><span class="javascript">				<span class="comment">// 根据关键字，进行数据的搜索</span></span></div><div class="line"><span class="undefined">				search(keywords) &#123;</span></div><div class="line"><span class="javascript">					<span class="comment">// var newList=[];</span></span></div><div class="line"><span class="javascript">					<span class="comment">// this.list.forEach(item=&gt;&#123;</span></span></div><div class="line"><span class="javascript">					<span class="comment">// 	if(item.name.indexOf(keywords)!=-1)&#123;</span></span></div><div class="line"><span class="javascript">					<span class="comment">// 		newList.push(item);</span></span></div><div class="line"><span class="javascript">					<span class="comment">// 	&#125;</span></span></div><div class="line"><span class="javascript">					<span class="comment">// &#125;)</span></span></div><div class="line"><span class="javascript">					<span class="comment">// return newList;</span></span></div><div class="line"><span class="undefined">					/*</span></div><div class="line"><span class="undefined">						注意：forEach some filter fineIndex这些都属于数组的新方法，都会对数组中的每一项进行遍历，执行相关的操作</span></div><div class="line"><span class="undefined">					*/</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">					<span class="keyword">return</span> <span class="keyword">this</span>.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></div><div class="line"><span class="javascript">						<span class="comment">// if(item.name.indexOf(keywords)!=-1)</span></span></div><div class="line"><span class="undefined">						/*</span></div><div class="line"><span class="javascript">							注意：ES6中，为字符串提供了一个新方法，叫做<span class="built_in">String</span>.prototype.includes(<span class="string">"要包含的字符串"</span>)</span></div><div class="line"><span class="javascript">							如果包含，则返回<span class="literal">true</span>，否则返回<span class="literal">false</span></span></div><div class="line"><span class="undefined">							contain</span></div><div class="line"><span class="undefined">						*/</span></div><div class="line"><span class="javascript">						<span class="keyword">if</span> (item.name.includes(keywords)) &#123;</span></div><div class="line"><span class="javascript">							<span class="keyword">return</span> item;</span></div><div class="line"><span class="undefined">						&#125;</span></div><div class="line"><span class="undefined">					&#125;);</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="javascript">		<span class="comment">// 如何自定义一个私有的过滤器(局部)</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app2"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="javascript">				dt: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;&#125;,</span></div><div class="line"><span class="undefined">			filters: &#123;</span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="undefined">					定义私有过滤器</span></div><div class="line"><span class="undefined">					过滤器有两个条件[过滤器名称]和[处理函数]</span></div><div class="line"><span class="undefined">					过滤器调用的时候，采用的就是就近原则，如果私有过滤器和全局过滤器名称一致了，这时候优先调用私有过滤器</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="javascript">				dateFormat: <span class="function"><span class="keyword">function</span> (<span class="params">dataStr, pattern = <span class="string">""</span></span>) </span>&#123;</span></div><div class="line"><span class="javascript">					<span class="comment">//pattern要给一个赋值，不谈会显示undefined而报错</span></span></div><div class="line"><span class="javascript">					<span class="comment">// 根据给定的事件字符串，得到特定的时间</span></span></div><div class="line"><span class="javascript">					<span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></div><div class="line"><span class="javascript">					<span class="comment">// yyyy-mm-dd</span></span></div><div class="line"><span class="javascript">					<span class="comment">// padStart是ES6新提供的方法，用来删除替换的</span></span></div><div class="line"><span class="javascript">					<span class="keyword">var</span> y = dt.getFullYear();</span></div><div class="line"><span class="javascript">					<span class="keyword">var</span> m = (dt.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">"0"</span>);</span></div><div class="line"><span class="javascript">					<span class="keyword">var</span> d = dt.getDate().toString().padStart(<span class="number">2</span>, <span class="string">"0"</span>);</span></div><div class="line"><span class="javascript">					<span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">"yyyy-mm-dd"</span>) &#123;</span></div><div class="line"><span class="javascript">						<span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</span></div><div class="line"><span class="javascript">					&#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">						<span class="keyword">var</span> hh = dt.getHours().toString().padStart(<span class="number">2</span>, <span class="string">"0"</span>);</span></div><div class="line"><span class="javascript">						<span class="keyword">var</span> mm = dt.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">"0"</span>);</span></div><div class="line"><span class="javascript">						<span class="keyword">var</span> ss = dt.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">"0"</span>);</span></div><div class="line"><span class="javascript">						<span class="keyword">return</span> <span class="string">`❤<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>❤`</span></span></div><div class="line"><span class="undefined">					&#125;</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="javascript">			<span class="comment">// 记住私有方法后面都有s</span></span></div><div class="line"><span class="undefined">			directives: &#123;</span></div><div class="line"><span class="javascript">				<span class="comment">// 自定义私有指令</span></span></div><div class="line"><span class="javascript">				<span class="string">"fontweight"</span>: &#123;</span></div><div class="line"><span class="javascript">					<span class="comment">// 设置字体粗细的</span></span></div><div class="line"><span class="javascript">					bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span></div><div class="line"><span class="undefined">						el.style.fontWeight = binding.value;</span></div><div class="line"><span class="undefined">					&#125;</span></div><div class="line"><span class="undefined">				&#125;,</span></div><div class="line"><span class="javascript">				<span class="string">"fontsize"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span></div><div class="line"><span class="undefined">					/*</span></div><div class="line"><span class="javascript">						注意：这个<span class="function"><span class="keyword">function</span>等同于把代码写到了<span class="title">bind</span>和<span class="title">update</span>中去</span></span></div><div class="line"><span class="undefined">					*/</span></div><div class="line"><span class="javascript">					el.style.fontSize = <span class="built_in">parseInt</span>(binding.value) + <span class="string">"px"</span>;</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="undefined">		/*</span></div><div class="line"><span class="undefined">		过滤器的定义语法</span></div><div class="line"><span class="javascript">		Vue.filter(<span class="string">"过滤器的名称"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span></div><div class="line"><span class="javascript">		过滤器中的<span class="function"><span class="keyword">function</span>，第一个参数已经被规定死了，永远都是过滤器，管道符前面传递过来的数据</span></span></div><div class="line"><span class="javascript">		Vue.filter(<span class="string">"过滤器的名称"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></div><div class="line"><span class="javascript">			<span class="keyword">return</span> data+<span class="string">"123"</span>;</span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="undefined">		*/</span></div><div class="line"><span class="javascript">		<span class="comment">// 原生实现方法</span></span></div><div class="line"><span class="javascript">		<span class="comment">// document.getElementById("search").focus();</span></span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="添加新品牌"><a href="#添加新品牌" class="headerlink" title="添加新品牌"></a>添加新品牌</h3><h3 id="删除品牌"><a href="#删除品牌" class="headerlink" title="删除品牌"></a>删除品牌</h3><h4 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h4><ul>
<li>==<strong>注意，在Vue中，已经实现了数据的双向绑定，每当我们修改了data中的数据，Vue会默认监听到数据的改动，自动把最新的数据应用到页面上。</strong>==</li>
<li>数组的some方法，如果return true，就会立即终止这个数组的后续循环。</li>
<li>==<strong>注意：forEach，some，filter，findIndex这些都属于数组的心方法，都会对数组中的每一项进行遍历，执行相关的操作。</strong>==</li>
<li>注意：在ES6中，为字符串提供了一个新方法，叫做String.prototype.includes(“要包含的字符串”);如果包含，则返回true，否则返回false。</li>
<li>在Vue中，使用事件绑定机制为元素指定处理函数的时候，如果加了小括号，就可以给函数传参了。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">v-focus</span> <span class="attr">v-color</span>=<span class="string">"'green'"</span>;</span></div><div class="line">&lt;!--这里的green一定要用引号引起来，不然会认为是一个变量，会到下面data中去找，找不到的话返回undefined--&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>字符串</code>这样的字符串叫做模版字符串</li>
</ul>
<h3 id="根据条件筛选品牌"><a href="#根据条件筛选品牌" class="headerlink" title="根据条件筛选品牌"></a>根据条件筛选品牌</h3><ol>
<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>
</ol>
<p><a href="https://v1-cn.vuejs.org/api/#filterBy" target="_blank" rel="external">filterBy - 指令</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in list | filterBy searchName in 'name'"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.ctime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click.prevent</span>=<span class="string">"del(item.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>在2.x版本中<a href="https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果" target="_blank" rel="external">手动实现筛选的方式</a>：</li>
</ol>
<ul>
<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span> 输入筛选名称：</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"searchName"</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in search(searchName)"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.ctime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line"></div><div class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click.prevent</span>=<span class="string">"del(item.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">search(name) &#123;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.list.filter(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> x.name.indexOf(name) != <span class="number">-1</span>;</div><div class="line"></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Vue调试工具vue-devtools的安装步骤和使用"><a href="#Vue调试工具vue-devtools的安装步骤和使用" class="headerlink" title="Vue调试工具vue-devtools的安装步骤和使用"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN" target="_blank" rel="external">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>
<h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><ol>
<li>HTML元素：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.ctime | dataFormat('yyyy-mm-dd')&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>私有 <code>filters</code> 定义方式：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">filters: &#123; <span class="comment">// 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span></div><div class="line"></div><div class="line">    dataFormat(input, pattern = <span class="string">""</span>) &#123; <span class="comment">// 在参数列表中 通过 pattern="" 来指定形参默认值，防止报错</span></div><div class="line"></div><div class="line">      <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(input);</div><div class="line"></div><div class="line">      <span class="comment">// 获取年月日</span></div><div class="line"></div><div class="line">      <span class="keyword">var</span> y = dt.getFullYear();</div><div class="line"></div><div class="line">      <span class="keyword">var</span> m = (dt.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</div><div class="line"></div><div class="line">      <span class="keyword">var</span> d = dt.getDate().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span></div><div class="line"></div><div class="line">      <span class="comment">// 否则，就返回  年-月-日 时：分：秒</span></div><div class="line"></div><div class="line">      <span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">'yyyy-mm-dd'</span>) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</div><div class="line"></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 获取时分秒</span></div><div class="line"></div><div class="line">        <span class="keyword">var</span> hh = dt.getHours().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> mm = dt.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> ss = dt.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span>;</div><div class="line"></div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>
</blockquote>
<h3 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h3><ul>
<li>箭头函数默认就是匿名函数</li>
</ul>
<h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><ul>
<li>全局过滤器，进行事件的格式化。所谓的全局过滤器，就是所有的VM实例都是共享的。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 定义一个全局过滤器</span></div><div class="line"></div><div class="line">Vue.filter(<span class="string">'dataFormat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">input, pattern = <span class="string">''</span></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(input);</div><div class="line"></div><div class="line">  <span class="comment">// 获取年月日</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> y = dt.getFullYear();</div><div class="line"></div><div class="line">  <span class="keyword">var</span> m = (dt.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> d = dt.getDate().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span></div><div class="line"></div><div class="line">  <span class="comment">// 否则，就返回  年-月-日 时：分：秒</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">'yyyy-mm-dd'</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</div><div class="line"></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 获取时分秒</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> hh = dt.getHours().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> mm = dt.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> ss = dt.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span>;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>==<strong>记住全局的过滤器是filter，没有s。而私有过滤器是filters，是有s的。</strong>==</li>
<li>过滤器定义的语法  <ul>
<li>Vue.filter(“过滤器的名称”,function(){});</li>
<li>过滤器的function，第一个参数已经被规定死了，永远都是过滤器管道符前面传递过来的数据。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vue.filter(<span class="string">"过滤器的名称"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> data+<span class="string">"123"</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>字符串的replace方法，死一个参数除了可以写一个字符串外，还可以定义一个正则</li>
</ul>
<blockquote>
<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！过滤器有两个条件【过滤器名称】和【处理函数】。过滤器调用几个的饿时候，采用的就是就近原则，如果私有过滤器和全局过滤器名称一致了，这个时候优先调用私有过滤器。</p>
</blockquote>
<h2 id="键盘修饰符以及自定义键盘修饰符"><a href="#键盘修饰符以及自定义键盘修饰符" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id="自定义全局按键修饰符"><a href="#自定义全局按键修饰符" class="headerlink" title="自定义全局按键修饰符"></a>自定义全局按键修饰符</h3><ul>
<li>使用Vue.directive()定义全局的指令v-focus（Vue未提供这个方法，属于自定义的）</li>
<li>其中，参数1位指令的名称，==<strong>注意：在定义的时候，指令的名称前面，不需要加-v前缀</strong>==</li>
<li>==<strong>但是，在调用的时候，必须在指令名称前加上v-前缀来调用</strong>==</li>
<li>参数2是一个对象，这个对象身上有一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作。</li>
<li>patStrt是ES6新提供的方法，用来删除替换的。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hh = dt.getHours().toString().padStart(<span class="number">2</span>, <span class="string">"0"</span>);</div><div class="line">&lt;!--这个的意思就是补全<span class="number">2</span>位，用<span class="string">"0"</span>补全--&gt;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dateFormat:<span class="function"><span class="keyword">function</span>(<span class="params">dataStr,pattern=<span class="string">""</span></span>)</span>&#123;&#125;</div><div class="line">&lt;!--pattern要给一个复制，不给的话会显示<span class="literal">undefined</span>而报错--&gt;</div></pre></td></tr></table></figure>
<h3 id="1-x中自定义键盘修饰符【了解即可】"><a href="#1-x中自定义键盘修饰符【了解即可】" class="headerlink" title="1.x中自定义键盘修饰符【了解即可】"></a>1.x中自定义键盘修饰符【了解即可】</h3><p>直接用键码值丢进去就直接绑定了，也可以起别名<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keyCode <span class="number">126</span>=F15</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Vue.directive(&apos;on&apos;).keyCodes.f2 = 113;</div></pre></td></tr></table></figure>
<h3 id="2-x中自定义键盘修饰符"><a href="#2-x中自定义键盘修饰符" class="headerlink" title="2.x中自定义键盘修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#键值修饰符" target="_blank" rel="external">2.x中自定义键盘修饰符</a></h3><ol>
<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Vue.config.keyCodes.f2 = <span class="number">113</span>;</div></pre></td></tr></table></figure>
<ol>
<li>使用自定义的按键修饰符：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span> @<span class="attr">keyup.f2</span>=<span class="string">"add"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="自定义指令的实现过程"><a href="#自定义指令的实现过程" class="headerlink" title="自定义指令的实现过程"></a>自定义指令的实现过程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Vue.directive(<span class="string">"focus"</span>, &#123;</div><div class="line">	bind: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">    每当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次</span></div><div class="line"><span class="comment">	注意：在每个函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数是一个原生的js对象</span></div><div class="line"><span class="comment">	在元素刚绑定了指令的时候，还没有插入到DOM中去，这时候，调用focus方法没有作用，因为一个元素，只要插入DOM之后，才能获取焦点el.focus();</span></div><div class="line"><span class="comment">*/</span></div><div class="line">	&#125;,</div><div class="line">	inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">	inserted表示元素插入到DOM中的时候，会执行inserted函数[触发一次]</span></div><div class="line"><span class="comment">	和js行为有关的操作，最好在inserted中去执行，防止js行为不生效</span></div><div class="line"><span class="comment">*/</span></div><div class="line">	el.focus();</div><div class="line">	&#125;,</div><div class="line">	updated: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line"><span class="comment">// 当VNode更新的时候，会执行updated，可能会触发多次</span></div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>bind阶段：每当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次。<ul>
<li>==<strong>注意：在每个函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数是一个原生的js对象。在元素刚绑定了指令的时候，还没有插入到DOM中去，这时候，调用focus方法没有作用，因为一个元素，只要插入DOM之后，才能获取焦点el.focus()</strong>==</li>
<li>==<strong>和样式相关的擦欧洲哦，一般都可以在bind执行</strong>==</li>
</ul>
</li>
<li>inserted阶段：inserted表示元素插入到DOM中的时候，会执行inserted函数[触发一次]<ul>
<li>==<strong>和js有关的操作，最好在inserted中去执行，防止js行为不生效</strong>==</li>
</ul>
</li>
<li>updated阶段：当VNode更新的时候，会执行updated，可能会触发多次。 </li>
</ul>
<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="external">自定义指令</a></h2><ol>
<li>自定义全局和局部的 自定义指令：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span></div><div class="line"></div><div class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</div><div class="line"></div><div class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123; <span class="comment">// inserted 表示被绑定元素插入父节点时调用</span></div><div class="line"></div><div class="line">    el.focus();</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span></div><div class="line"></div><div class="line">  directives: &#123;</div><div class="line"></div><div class="line">    color: &#123; <span class="comment">// 为元素设置指定的字体颜色</span></div><div class="line"></div><div class="line">      bind(el, binding) &#123;</div><div class="line"></div><div class="line">        el.style.color = binding.value;</div><div class="line"></div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="string">'font-weight'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding2</span>) </span>&#123; <span class="comment">// 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span></div><div class="line"></div><div class="line">      el.style.fontWeight = binding2.value;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ol>
<li>自定义指令的使用方式：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"searchName"</span> <span class="attr">v-focus</span> <span class="attr">v-color</span>=<span class="string">"'red'"</span> <span class="attr">v-font-weight</span>=<span class="string">"900"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-1-x-中-自定义元素指令【已废弃-了解即可】"><a href="#Vue-1-x-中-自定义元素指令【已废弃-了解即可】" class="headerlink" title="Vue 1.x 中 自定义元素指令【已废弃,了解即可】"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Vue.elementDirective(<span class="string">'red-color'</span>, &#123;</div><div class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.el.style.color = <span class="string">'red'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用方式：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">red-color</span>&gt;</span>1232<span class="tag">&lt;/<span class="name">red-color</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="vue实例的生命周期"><a href="#vue实例的生命周期" class="headerlink" title="vue实例的生命周期"></a><a href="https://cn.vuejs.org/v2/guide/instance.html#实例生命周期" target="_blank" rel="external">vue实例的生命周期</a></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>生命周期函数演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"修改msg"</span> @<span class="attr">click</span>=<span class="string">"msg='No'"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"h3"</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="javascript">				msg: <span class="string">"ok"</span></span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;</span></div><div class="line"><span class="undefined">				show() &#123;</span></div><div class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">"执行了show方法了"</span>);</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			beforeCreate() &#123;</span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="undefined">					这是我们遇到的第一个生命周期函数，表示实例完全被创建出来之前，会执行它</span></div><div class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="keyword">this</span>.msg);</span></div><div class="line"><span class="javascript">					<span class="keyword">this</span>.show();</span></div><div class="line"><span class="undefined">					注意：在beforeCreate生命周期函数执行的时候，data和methods中的数据都还没有初始化</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			created() &#123;</span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="undefined">					这是遇到的第二个生命周期函数</span></div><div class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="keyword">this</span>.msg);</span></div><div class="line"><span class="undefined">					在created中，data和methods都已经被初始化好了!</span></div><div class="line"><span class="undefined">					如果要调用methods中的方法，或者操作data中的数据，最早只能在created中操作</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			beforeMount() &#123;</span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="undefined">					这是遇到的第三个生命周期函数，表示模版已经在内存中编辑完成了，但是尚未把模版渲染到页面中</span></div><div class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"h3"</span>).innerText);</span></div><div class="line"><span class="undefined">					在beforeMount执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模版字符串</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			mounted() &#123;</span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="undefined">					这是遇到的第四个生命周期函数，表示内存中的模版，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了</span></div><div class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"h3"</span>).innerText);</span></div><div class="line"><span class="undefined">					注意:mouted是实例创建期间的最后一个生命周期函数，当执行完mounted就表示，实例已经被完全创建好了，此时，如果没哟其他操作的话，这个实例就静静地躺在我们的内存中，一动不动</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">			<span class="comment">// 接下来是运行中的两个事件</span></span></div><div class="line"><span class="undefined">			beforeUpdate() &#123;</span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="undefined">					这个时候，表示我们的界面还没有被更新[单数数据已经更新了]</span></div><div class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">"界面上的元素的内容:"</span>+<span class="built_in">document</span>.getElementById(<span class="string">"h3"</span>).innerText);</span></div><div class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">"data中的msg数据是:"</span>+<span class="keyword">this</span>.msg);</span></div><div class="line"><span class="undefined">					得出结论：当执行beforeUpdate的时候，页面中的显示的数据，还是旧的，此时data数据是最新的，页面尚未和最新的数据保持同步</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			updated() &#123;</span></div><div class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">"界面上元素的内容:"</span> + <span class="built_in">document</span>.getElementById(<span class="string">"h3"</span>).innerText);</span></div><div class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">"data中的msg数据是:"</span> + <span class="keyword">this</span>.msg);</span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="undefined">					updated事件执行的时候，页面和data数据已经保持同步了，都是最新的</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li>
<li><a href="https://cn.vuejs.org/v2/api/#选项-生命周期钩子" target="_blank" rel="external">生命周期钩子</a>：就是生命周期事件的别名而已；</li>
<li>生命周期钩子 = 生命周期函数 = 生命周期事件</li>
<li>主要的生命周期函数分类：<ul>
<li>创建期间的生命周期函数：<ul>
<li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li>
<li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li>
<li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li>
<li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li>
</ul>
</li>
<li>运行期间的生命周期函数：<ul>
<li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li>
<li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li>
</ul>
</li>
<li>销毁期间的生命周期函数：<ul>
<li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li>
<li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="vue-resource-实现-get-post-jsonp请求"><a href="#vue-resource-实现-get-post-jsonp请求" class="headerlink" title="vue-resource 实现 get, post, jsonp请求"></a><a href="https://github.com/pagekit/vue-resource" target="_blank" rel="external">vue-resource 实现 get, post, jsonp请求</a></h2><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p>
<ol>
<li>之前的学习中，如何发起数据请求？</li>
<li>常见的数据请求类型？  get  post jsonp</li>
<li>测试的URL请求资源地址：<ul>
<li>get请求地址： <a href="http://vue.studyit.io/api/getlunbo" target="_blank" rel="external">http://vue.studyit.io/api/getlunbo</a></li>
<li>post请求地址：<a href="http://vue.studyit.io/api/post" target="_blank" rel="external">http://vue.studyit.io/api/post</a></li>
<li>jsonp请求地址：<a href="http://vue.studyit.io/api/jsonp" target="_blank" rel="external">http://vue.studyit.io/api/jsonp</a></li>
</ul>
</li>
<li><p>JSONP的实现原理</p>
<ul>
<li>由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</li>
<li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；</li>
<li>具体实现过程：<ul>
<li>先在客户端定义一个回调方法，预定义对数据的操作；</li>
<li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li>
<li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li>
<li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；</li>
</ul>
</li>
<li>带大家通过 Node.js ，来手动实现一个JSONP的请求例子；</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="comment">// 导入解析 URL 地址的核心模块</span></div><div class="line"><span class="keyword">const</span> urlModule = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> server = http.createServer();</div><div class="line"><span class="comment">// 监听 服务器的 request 请求事件，处理每个请求</span></div><div class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> url = req.url;</div><div class="line"></div><div class="line">  <span class="comment">// 解析客户端请求的URL地址</span></div><div class="line">  <span class="keyword">var</span> info = urlModule.parse(url, <span class="literal">true</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 如果请求的 URL 地址是 /getjsonp ，则表示要获取JSONP类型的数据</span></div><div class="line">  <span class="keyword">if</span> (info.pathname === <span class="string">'/getjsonp'</span>) &#123;</div><div class="line">    <span class="comment">// 获取客户端指定的回调函数的名称</span></div><div class="line">    <span class="keyword">var</span> cbName = info.query.callback;</div><div class="line">    <span class="comment">// 手动拼接要返回给客户端的数据对象</span></div><div class="line">    <span class="keyword">var</span> data = &#123;</div><div class="line">      name: <span class="string">'zs'</span>,</div><div class="line">      age: <span class="number">22</span>,</div><div class="line">      gender: <span class="string">'男'</span>,</div><div class="line">      hobby: [<span class="string">'吃饭'</span>, <span class="string">'睡觉'</span>, <span class="string">'运动'</span>]</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：</span></div><div class="line">    <span class="keyword">var</span> result = <span class="string">`<span class="subst">$&#123;cbName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span>;</div><div class="line">    <span class="comment">// 将拼接好的方法的调用，返回给客户端去解析执行</span></div><div class="line">    res.end(result);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.end(<span class="string">'404'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server running at http://127.0.0.1:3000'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>vue-resource 的配置步骤：</p>
<ul>
<li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li>
<li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li>
</ul>
</li>
<li>发送get请求：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getInfo() &#123; <span class="comment">// get 方式获取数据</span></div><div class="line">  <span class="keyword">this</span>.$http.get(<span class="string">'http://127.0.0.1:8899/api/getlunbo'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(res.body);</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$http.get(<span class="string">"/someUrl"</span>,[options]).then(successCallback,errorCallback);</div><div class="line">&lt;!--第一个successCallback为必须要写的，而后面的errorCallback为可选项--&gt;</div></pre></td></tr></table></figure>
<ol>
<li>发送post请求：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">postInfo() &#123;</div><div class="line">  <span class="keyword">var</span> url = <span class="string">'http://127.0.0.1:8899/api/post'</span>;</div><div class="line">  <span class="comment">// post 方法接收三个参数：</span></div><div class="line">  <span class="comment">// 参数1： 要请求的URL地址</span></div><div class="line">  <span class="comment">// 参数2： 要发送的数据对象</span></div><div class="line">  <span class="comment">// 参数3： 指定post提交的编码类型为 application/x-www-form-urlencoded</span></div><div class="line">  <span class="keyword">this</span>.$http.post(url, &#123; <span class="attr">name</span>: <span class="string">'zs'</span> &#125;, &#123; <span class="attr">emulateJSON</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(res.body);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>发送JSONP请求获取数据:</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">jsonpInfo() &#123; <span class="comment">// JSONP形式从服务器获取数据</span></div><div class="line">  <span class="keyword">var</span> url = <span class="string">'http://127.0.0.1:8899/api/jsonp'</span>;</div><div class="line">  <span class="keyword">this</span>.$http.jsonp(url).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(res.body);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="配置本地数据库和数据接口API"><a href="#配置本地数据库和数据接口API" class="headerlink" title="配置本地数据库和数据接口API"></a>配置本地数据库和数据接口API</h2><ol>
<li>先解压安装 <code>PHPStudy</code>;</li>
<li>解压安装 <code>Navicat</code> 这个数据库可视化工具，并激活；</li>
<li>打开 <code>Navicat</code> 工具，新建空白数据库，名为 <code>dtcmsdb4</code>;</li>
<li>双击新建的数据库，连接上这个空白数据库，在新建的数据库上<code>右键</code> -&gt; <code>运行SQL文件</code>，选择并执行 <code>dtcmsdb4.sql</code> 这个数据库脚本文件；如果执行不报错，则数据库导入完成；</li>
<li>进入文件夹 <code>vuecms3_nodejsapi</code> 内部，执行 <code>npm i</code> 安装所有的依赖项；</li>
<li>先确保本机安装了 <code>nodemon</code>, 没有安装，则运行 <code>npm i nodemon -g</code> 进行全局安装，安装完毕后，进入到 <code>vuecms3_nodejsapi</code>目录 -&gt; <code>src</code>目录 -&gt; 双击运行 <code>start.bat</code></li>
<li>如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 <code>app.js</code> 中第 <code>14行</code> 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root</li>
</ol>
<h2 id="品牌管理改造"><a href="#品牌管理改造" class="headerlink" title="品牌管理改造"></a>品牌管理改造</h2><h3 id="展示品牌列表"><a href="#展示品牌列表" class="headerlink" title="展示品牌列表"></a>展示品牌列表</h3><h3 id="添加品牌数据"><a href="#添加品牌数据" class="headerlink" title="添加品牌数据"></a>添加品牌数据</h3><h3 id="删除品牌数据"><a href="#删除品牌数据" class="headerlink" title="删除品牌数据"></a>删除品牌数据</h3><ul>
<li><strong>用vue-resource的时候，如果我们通过全局配置了，其你去的数据接口根域名，在每次单独发起http请求的时候，请求的url路径应该以相对路径开头，前面不能带/，否则不会启动根路径拼接。</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--全局启用emulateJSON选项--&gt;</div><div class="line">Vue.http.options.emulateJSON=<span class="literal">true</span>;</div></pre></td></tr></table></figure>
<h2 id="Vue中的动画"><a href="#Vue中的动画" class="headerlink" title="Vue中的动画"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="external">Vue中的动画</a></h2><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p>
<h3 id="使用过渡类名"><a href="#使用过渡类名" class="headerlink" title="使用过渡类名"></a>使用过渡类名</h3><ol>
<li>HTML结构：</li>
</ol>
<ul>
<li>自定义两组样式，来控制transition内部的元素实现动画。</li>
<li>transition元素是Vue官方提供的。</li>
<li>v-enter 【这是一个时间点】 是进入之前，元素的起始状态，此时还没有开始进入</li>
<li>v-leavee-to 【这是一个时间点】是离开之后，离开的终止状态，此时元素动画已经结束了</li>
<li>v-enter-active 【入场动画的时间段】</li>
<li>v-leave-active 【离场动画的时间段】</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"动起来"</span> @<span class="attr">click</span>=<span class="string">"myAnimate"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"isshow"</span>&gt;</span>动画哦<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>VM 实例：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 Vue 实例，得到 ViewModel</span></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,</div><div class="line">  data: &#123;</div><div class="line">    isshow: <span class="literal">false</span></div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    myAnimate() &#123;</div><div class="line">      <span class="keyword">this</span>.isshow = !<span class="keyword">this</span>.isshow;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>定义两组类样式：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 定义进入和离开时候的过渡状态 */</span></div><div class="line">    .fade-enter-active,</div><div class="line">    .fade-leave-active &#123;</div><div class="line">      transition: all <span class="number">0.2</span>s ease;</div><div class="line">      position: absolute;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 定义进入过渡的开始状态 和 离开过渡的结束状态 */</span></div><div class="line">    .fade-enter,</div><div class="line">    .fade-leave-to &#123;</div><div class="line">      opacity: <span class="number">0</span>;</div><div class="line">      transform: translateX(<span class="number">100</span>px);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="自定义v-方法前缀"><a href="#自定义v-方法前缀" class="headerlink" title="自定义v-方法前缀"></a>自定义v-方法前缀</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>修改v-前缀<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-id">#circle</span> &#123;</span></div><div class="line"><span class="undefined">			width: 200px;</span></div><div class="line"><span class="undefined">			height: 200px;</span></div><div class="line"><span class="undefined">			background-color: red;</span></div><div class="line"><span class="undefined">			border-radius: 50%;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-id">#box</span> &#123;</span></div><div class="line"><span class="undefined">			width: 100px;</span></div><div class="line"><span class="undefined">			height: 100px;</span></div><div class="line"><span class="undefined">			background-color: blueviolet;</span></div><div class="line"><span class="undefined">			border-radius: 50%;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.v-enter</span>,</span></div><div class="line"><span class="css">		<span class="selector-class">.v-leave-to</span> &#123;</span></div><div class="line"><span class="undefined">			opacity: 0;</span></div><div class="line"><span class="undefined">			transform: translateX(500px);</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.v-enter-active</span>,</span></div><div class="line"><span class="css">		<span class="selector-class">.v-leave-active</span> &#123;</span></div><div class="line"><span class="undefined">			transition: all 1s ease;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.my-enter</span>,</span></div><div class="line"><span class="css">		<span class="selector-class">.my-leave-to</span> &#123;</span></div><div class="line"><span class="undefined">			opacity: 0;</span></div><div class="line"><span class="undefined">			transform: translateY(500px);</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.my-enter-active</span>,</span></div><div class="line"><span class="css">		<span class="selector-class">.my-leave-active</span> &#123;</span></div><div class="line"><span class="undefined">			transition: all 1s ease;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"切换1"</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">transition</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"circle"</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"切换2"</span> @<span class="attr">click</span>=<span class="string">"flag2=!flag2"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 这里必须有name，否则都会去找第一个 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"my"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">v-if</span>=<span class="string">"flag2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="javascript">				flag: <span class="literal">false</span>,</span></div><div class="line"><span class="javascript">				flag2: <span class="literal">false</span></span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="使用第三方-CSS-动画库"><a href="#使用第三方-CSS-动画库" class="headerlink" title="使用第三方 CSS 动画库"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#自定义过渡类名" target="_blank" rel="external">使用第三方 CSS 动画库</a></h3><ol>
<li><p>导入动画类库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./lib/animate.css&quot;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>定义 transition 及属性：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">transition</span></span></div><div class="line"><span class="tag">	<span class="attr">enter-active-class</span>=<span class="string">"fadeInRight"</span></span></div><div class="line"><span class="tag">    <span class="attr">leave-active-class</span>=<span class="string">"fadeOutRight"</span></span></div><div class="line"><span class="tag">    <span class="attr">:duration</span>=<span class="string">"&#123; enter: 500, leave: 800 &#125;"</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"animated"</span> <span class="attr">v-show</span>=<span class="string">"isshow"</span>&gt;</span>动画哦<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="使用动画钩子函数"><a href="#使用动画钩子函数" class="headerlink" title="使用动画钩子函数"></a>使用动画钩子函数</h3><ol>
<li>定义 transition 组件以及三个钩子函数：</li>
</ol>
<ul>
<li><strong>注意：动画钩子函数的第一个参数：el表示要执行动画的那个DOM元素，是个原生的JS DOM对象，可以仍为el是通过document.getElementById(“”)方式获取到的原生JS DOM对象</strong> </li>
<li>beforeEnter表示动画入场之前，此时动画尚未开始，可以在beforeEnter中，设置元素开始动画之前的起始样式</li>
<li>enter表示动画开始之后的而样式，这里可以设置完成动画之后的结束状态</li>
<li>done,其实就是afterEnter这个函数，也就是说，done是afterEnter函数的引用。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">el.offsetWidth;</div><div class="line">&lt;!--这句话貌似没有实际的作用但是不写的话会出不来动画效果，可以仍为el.offsetWidth会强制刷新动画--&gt;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"切换动画"</span> @<span class="attr">click</span>=<span class="string">"isshow = !isshow"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transition</span></span></div><div class="line"><span class="tag">    @<span class="attr">before-enter</span>=<span class="string">"beforeEnter"</span></span></div><div class="line"><span class="tag">    @<span class="attr">enter</span>=<span class="string">"enter"</span></span></div><div class="line"><span class="tag">    @<span class="attr">after-enter</span>=<span class="string">"afterEnter"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isshow"</span> <span class="attr">class</span>=<span class="string">"show"</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>定义三个 methods 钩子方法：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">        beforeEnter(el) &#123; <span class="comment">// 动画进入之前的回调</span></div><div class="line">          el.style.transform = <span class="string">'translateX(500px)'</span>;</div><div class="line">        &#125;,</div><div class="line">        enter(el, done) &#123; <span class="comment">// 动画进入完成时候的回调</span></div><div class="line">          el.offsetWidth;</div><div class="line">          el.style.transform = <span class="string">'translateX(0px)'</span>;</div><div class="line">          done();</div><div class="line">        &#125;,</div><div class="line">        afterEnter(el) &#123; <span class="comment">// 动画进入完成之后的回调</span></div><div class="line">          <span class="keyword">this</span>.isshow = !<span class="keyword">this</span>.isshow;</div><div class="line">        &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<ol>
<li>定义动画过渡时长和样式：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.show&#123;</div><div class="line">      transition: all <span class="number">0.4</span>s ease;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="v-for-的列表过渡"><a href="#v-for-的列表过渡" class="headerlink" title="v-for 的列表过渡"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#列表的进入和离开过渡" target="_blank" rel="external">v-for 的列表过渡</a></h3><ol>
<li>定义过渡样式：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">style</span>&gt;</div><div class="line">    <span class="selector-class">.list-enter</span>,</div><div class="line">    <span class="selector-class">.list-leave-to</span> &#123;</div><div class="line">      <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(10px);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.list-enter-active</span>,</div><div class="line">    <span class="selector-class">.list-leave-active</span> &#123;</div><div class="line">      <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ol>
<li>定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"txt"</span> @<span class="attr">keyup.enter</span>=<span class="string">"add"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">"ul"</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, i) in list"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>定义 VM中的结构：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 Vue 实例，得到 ViewModel</span></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,</div><div class="line">  data: &#123;</div><div class="line">    txt: <span class="string">''</span>,</div><div class="line">    list: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    add() &#123;</div><div class="line">      <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.txt);</div><div class="line">      <span class="keyword">this</span>.txt = <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="列表的排序过渡"><a href="#列表的排序过渡" class="headerlink" title="列表的排序过渡"></a>列表的排序过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p>
<ul>
<li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：</li>
<li>在实现列表过渡的时候，如果需要过渡的元素是通过v-for循环渲染出来的不能使用transition包裹，需要使用transitionGroup。</li>
<li>如果要为v-for循环创建的元素设置动画，必须为每一个元素设置key属性</li>
<li>给transition-group添加appear属性，实现页面刚展示出来的时候入场时候的效果</li>
<li>通过为transition-group元素设置tag属性，执行transition-group渲染为指定的元素，如果不指定tag属性，默认渲染为span标签。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.v-move</span>&#123;</div><div class="line">  <span class="attribute">transition</span>: all <span class="number">0.8s</span> ease;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.v-leave-active</span>&#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">appear</span> <span class="attr">tag</span>=<span class="string">"ul"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,i) in list"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span> @<span class="attr">click</span>=<span class="string">"del(i)"</span>&gt;</span></div><div class="line">		&#123;&#123;item.id&#125;&#125;---&#123;&#123;item.name&#125;&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ol>
<li><a href="https://v1-cn.vuejs.org/" target="_blank" rel="external">vue.js 1.x 文档</a></li>
<li><a href="https://cn.vuejs.org/" target="_blank" rel="external">vue.js 2.x 文档</a></li>
<li><a href="http://www.css88.com/archives/7715" target="_blank" rel="external">String.prototype.padStart(maxLength, fillString)</a></li>
<li><a href="http://www.cnblogs.com/wuhua1/p/6686237.html" target="_blank" rel="external">js 里面的键盘事件对应的键码</a></li>
<li><a href="https://github.com/pagekit/vue-resource" target="_blank" rel="external">pagekit/vue-resource</a></li>
<li><a href="https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html" target="_blank" rel="external">navicat如何导入sql文件和导出sql文件</a></li>
<li><a href="http://cubic-bezier.com/#.4,-0.3,1,.33" target="_blank" rel="external">贝塞尔在线生成器</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue-js-偶遇&quot;&gt;&lt;a href=&quot;#Vue-js-偶遇&quot; class=&quot;headerlink&quot; title=&quot;Vue.js -偶遇&quot;&gt;&lt;/a&gt;Vue.js -偶遇&lt;/h1&gt;&lt;h2 id=&quot;品牌管理案例&quot;&gt;&lt;a href=&quot;#品牌管理案例&quot; class=&quot;he
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-初见</title>
    <link href="http://yoursite.com/2017/06/11/20.vue.js-%E5%88%9D%E8%A7%81/"/>
    <id>http://yoursite.com/2017/06/11/20.vue.js-初见/</id>
    <published>2017-06-11T04:13:11.000Z</published>
    <updated>2017-11-03T09:17:20.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-初见"><a href="#Vue-js-初见" class="headerlink" title="Vue.js - 初见"></a>Vue.js - 初见</h1><h3 id="什么是Vue-js"><a href="#什么是Vue-js" class="headerlink" title="什么是Vue.js"></a>什么是Vue.js</h3><ul>
<li><p>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</p>
</li>
<li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</p>
</li>
<li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</p>
</li>
<li><p>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</p>
</li>
</ul>
<h3 id="杂项的处理"><a href="#杂项的处理" class="headerlink" title="杂项的处理"></a>杂项的处理</h3><ul>
<li>箭头函数内部的this指向始终都和外部的this指向一致</li>
<li>==<strong>注意：一般不能在body上直接写个id作为vue控制的区域，在Vue2.0版本以后就禁止这样写了</strong>==</li>
</ul>
<h2 id="为什么要学习流行框架"><a href="#为什么要学习流行框架" class="headerlink" title="为什么要学习流行框架"></a>为什么要学习流行框架</h2><ul>
<li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；<ul>
<li>企业中，使用框架，能够提高开发的效率；</li>
</ul>
</li>
</ul>
<ul>
<li>提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</li>
<li>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li>
</ul>
<ul>
<li>增强自己就业时候的竞争力<ul>
<li>人无我有，人有我优</li>
<li>你平时不忙的时候，都在干嘛？</li>
</ul>
</li>
</ul>
<h2 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h2><ul>
<li><p>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</p>
<ul>
<li>node 中的 express；</li>
</ul>
</li>
</ul>
<ul>
<li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。<ul>
<li><ol>
<li>从Jquery 切换到 Zepto</li>
</ol>
</li>
<li><ol>
<li>从 EJS 切换到 art-template</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别"><a href="#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别" class="headerlink" title="Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h2><ul>
<li>MVC 是后端的分层开发概念；</li>
<li>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</li>
<li>MVVM的优点：方便测试；便于代码的移植；兼容MVC。</li>
<li><p>MVVM的缺点：类会增多；viewModel会越来越大；调用的复杂度增加。</p>
</li>
<li><p>为什么有了MVC还要有MVVM ：前后端分离的思想，分工不同，编辑代码的思想也就不同，所以MVC和MVVM都有存在的必要。</p>
</li>
</ul>
<h2 id="Vue-js-基本代码-和-MVVM-之间的对应关系"><a href="#Vue-js-基本代码-和-MVVM-之间的对应关系" class="headerlink" title="Vue.js 基本代码 和 MVVM 之间的对应关系"></a>Vue.js 基本代码 和 MVVM 之间的对应关系</h2><h2 id="Vue之-基本的代码结构和插值表达式、v-cloak"><a href="#Vue之-基本的代码结构和插值表达式、v-cloak" class="headerlink" title="Vue之 - 基本的代码结构和插值表达式、v-cloak"></a>Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code>、<code>v-cloak</code></h2><p><strong>基本代码格式</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 导入Vue的包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 将来new的Vue实例，会控制这个元素中的所有内容 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- Vue实例所控制的这个元素区域，就是我们的V --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">		/*</span></div><div class="line"><span class="undefined">				2.创建一个Vue的实例</span></div><div class="line"><span class="undefined">				当我们导入包之后，在浏览器的内存中，就多了一个Vue构造函数</span></div><div class="line"><span class="javascript">				注意：我们<span class="keyword">new</span>出来的这个vm对象，局势我们MVVM中VM的调度者</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="javascript">			<span class="comment">// 表示当我们new的这个Vue实例，要控制页面上的哪个区域</span></span></div><div class="line"><span class="javascript">			<span class="comment">// 这里的data就是MVVM中的M，专门用来保存每个页面的数据的</span></span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="javascript">				<span class="comment">// data属性中，存放的是el中要用到的数据</span></span></div><div class="line"><span class="javascript">				msg: <span class="string">"欢迎"</span></span></div><div class="line"><span class="undefined">				/*</span></div><div class="line"><span class="undefined">				通过Vue提供的指令，很方便的就能把数据渲染都页面上，程序员不需要再动手操作DOM元素了，【前端的Vue之类的框架，不提倡我们去手动操作DOM元素了】</span></div><div class="line"><span class="undefined">				*/</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>v-cloak的学习</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-attr">[v-cloak]</span> &#123;</span></div><div class="line"><span class="undefined">			display: none;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 使用v-cloak能够解决差值表达式闪烁的问题 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>++++++&#123;&#123;msg&#125;&#125;--------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span>==============<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 默认v-text是没有闪烁的问题的 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- v-text会覆盖元素中原本的内容，但是插值表达式，只会替换自己的这个占位符，不会吧整个元素的内容清空 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"msg2"</span>&gt;</span>12121212<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- v-bind:是Vue中，提供的用于绑定属性的指令 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;input type="button" value="按钮" v-bind:title="mytitle+'123'"&gt; --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 注意：v-bind：指令可以被简写为:要绑定的属性 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- v-bind中，可以写合法的JS表达式 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- Vue中提供了v-on:事件绑定机制 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;input type="button" value="按钮" :title="mytitle+'123'" v-on:click="alert('hello')"&gt; --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="javascript">				msg: <span class="string">"123"</span>,</span></div><div class="line"><span class="xml">				msg: "<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这个是大大的h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>",</span></div><div class="line"><span class="javascript">				mytitle: <span class="string">"这是一个自定义的title"</span></span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;</span></div><div class="line"><span class="javascript">				<span class="comment">// 这个methods属性中定义了当前Vue实例所有可用的方法</span></span></div><div class="line"><span class="javascript">				show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">					alert(<span class="string">"hello"</span>);</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue指令之v-text和v-html"><a href="#Vue指令之v-text和v-html" class="headerlink" title="Vue指令之v-text和v-html"></a>Vue指令之<code>v-text</code>和<code>v-html</code></h2><h2 id="Vue指令之v-bind的三种用法"><a href="#Vue指令之v-bind的三种用法" class="headerlink" title="Vue指令之v-bind的三种用法"></a>Vue指令之<code>v-bind</code>的三种用法</h2><ol>
<li><p>直接使用指令<code>v-bind</code></p>
</li>
<li><p>使用简化指令<code>:</code></p>
</li>
<li><p>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></p>
</li>
</ol>
<h2 id="Vue指令之v-on和跑马灯效果"><a href="#Vue指令之v-on和跑马灯效果" class="headerlink" title="Vue指令之v-on和跑马灯效果"></a>Vue指令之<code>v-on</code>和<code>跑马灯效果</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 导入Vue包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 创建一个要控制的区域 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"一起摇摆"</span> @<span class="attr">click</span>=<span class="string">"shake"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"冻住不许走"</span> @<span class="attr">click</span>=<span class="string">"stop"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">		/*</span></div><div class="line"><span class="javascript">							注意：在VM实例中，如果想要获取data上的数据，或者想要调用methods中的方法，必须通过<span class="keyword">this</span>.数据属性名 或 <span class="keyword">this</span>.方法名 来进行访问，这里的<span class="keyword">this</span>就表示我们<span class="keyword">new</span>出来的VM实例对象</span></div><div class="line"><span class="undefined">						*/</span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="javascript">				msg: <span class="string">"鎏金脑凯渥酷烈"</span>,</span></div><div class="line"><span class="javascript">				<span class="comment">// 在data上定义定时器的Id</span></span></div><div class="line"><span class="javascript">				intervalId: <span class="literal">null</span></span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;</span></div><div class="line"><span class="undefined">				shake() &#123;</span></div><div class="line"><span class="javascript">					<span class="comment">// 获取到头的第一个字符this</span></span></div><div class="line"><span class="javascript">					<span class="keyword">if</span> (<span class="keyword">this</span>.intervalId != <span class="literal">null</span>) <span class="keyword">return</span>;</span></div><div class="line"><span class="javascript">					<span class="keyword">this</span>.intervalId = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></div><div class="line"><span class="javascript">						<span class="keyword">var</span> start = <span class="keyword">this</span>.msg.substring(<span class="number">0</span>, <span class="number">1</span>);</span></div><div class="line"><span class="javascript">						<span class="comment">// 获取到后面所有字符</span></span></div><div class="line"><span class="javascript">						<span class="keyword">var</span> end = <span class="keyword">this</span>.msg.substring(<span class="number">1</span>);</span></div><div class="line"><span class="javascript">						<span class="comment">// 重新拼接得到新的字符串，并赋值给this.msg</span></span></div><div class="line"><span class="javascript">						<span class="keyword">this</span>.msg = end + start;</span></div><div class="line"><span class="undefined">					&#125;, 300)</span></div><div class="line"><span class="undefined">					/*</span></div><div class="line"><span class="undefined">						注意：VM实例，会监听自己身上的data中所有数据的改变，只要数据一发生变化，就会自动把最新的数据，c从data上同步到页面中去，【好处：程序员只需要关心数据，不需要考虑如何重新渲染DOM页面】</span></div><div class="line"><span class="undefined">					*/</span></div><div class="line"><span class="undefined">				&#125;,</span></div><div class="line"><span class="undefined">				stop() &#123;</span></div><div class="line"><span class="javascript">					<span class="comment">// 停止定时器</span></span></div><div class="line"><span class="javascript">					clearInterval(<span class="keyword">this</span>.intervalId);</span></div><div class="line"><span class="javascript">					<span class="comment">// 每当清楚了定时器之后，需要重新把intervalId设置为null</span></span></div><div class="line"><span class="javascript">					<span class="keyword">this</span>.intervalId = <span class="literal">null</span>;</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;)</span></div><div class="line"><span class="undefined">		/*</span></div><div class="line"><span class="undefined">			分析：</span></div><div class="line"><span class="undefined">			1.给【一起摇摆】按钮绑定一个点击事件v-on @</span></div><div class="line"><span class="undefined">			2.在按钮的时间呢处理函数中，写相关的业务逻辑代码，拿到msg字符串，然后调用字符串的substring来进行字符串的截取操作，把第一个字符截取出来，放到最后一个位置即可；</span></div><div class="line"><span class="undefined">			3.为了实现点击下按钮自动截取的功能，需要把2步骤中的代码，放入到一个定时器中</span></div><div class="line"><span class="undefined">		*/</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="跑马灯效果"><a href="#跑马灯效果" class="headerlink" title="跑马灯效果"></a>跑马灯效果</h3><ol>
<li>HTML结构：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line"></div><div class="line">    &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;/p&gt;</div><div class="line"></div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;开启&quot; v-on:click=&quot;go&quot;&gt;</div><div class="line"></div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;停止&quot; v-on:click=&quot;stop&quot;&gt;</div><div class="line"></div><div class="line">  &lt;/div&gt;</div></pre></td></tr></table></figure>
<ol>
<li>Vue实例：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// 创建 Vue 实例，得到 ViewModel</div><div class="line"></div><div class="line">   var vm = new Vue(&#123;</div><div class="line"></div><div class="line">     el: &apos;#app&apos;,</div><div class="line"></div><div class="line">     data: &#123;</div><div class="line"></div><div class="line">       info: &apos;猥琐发育，别浪~！&apos;,</div><div class="line"></div><div class="line">       intervalId: null</div><div class="line"></div><div class="line">     &#125;,</div><div class="line"></div><div class="line">     methods: &#123;</div><div class="line"></div><div class="line">       go() &#123;</div><div class="line"></div><div class="line">         // 如果当前有定时器在运行，则直接return</div><div class="line"></div><div class="line">         if (this.intervalId != null) &#123;</div><div class="line"></div><div class="line">           return;</div><div class="line"></div><div class="line">         &#125;</div><div class="line"></div><div class="line">         // 开始定时器</div><div class="line"></div><div class="line">         this.intervalId = setInterval(() =&gt; &#123;</div><div class="line"></div><div class="line">           this.info = this.info.substring(1) + this.info.substring(0, 1);</div><div class="line"></div><div class="line">         &#125;, 500);</div><div class="line"></div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       stop() &#123;</div><div class="line"></div><div class="line">         clearInterval(this.intervalId);</div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">     &#125;</div><div class="line"></div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<h2 id="Vue指令之v-on的缩写和事件修饰符"><a href="#Vue指令之v-on的缩写和事件修饰符" class="headerlink" title="Vue指令之v-on的缩写和事件修饰符"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h2><h3 id="事件修饰符："><a href="#事件修饰符：" class="headerlink" title="事件修饰符："></a>事件修饰符：</h3><ul>
<li><p>.stop       阻止冒泡</p>
</li>
<li><p>.prevent    阻止默认事件</p>
</li>
<li><p>.capture    添加事件侦听器时使用事件捕获模式</p>
</li>
<li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p>
</li>
<li><p>.once       事件只触发一次</p>
</li>
</ul>
<h2 id="Vue指令之v-model和双向数据绑定"><a href="#Vue指令之v-model和双向数据绑定" class="headerlink" title="Vue指令之v-model和双向数据绑定"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h2><h2 id="简易计算器案例"><a href="#简易计算器案例" class="headerlink" title="简易计算器案例"></a>简易计算器案例</h2><p><strong>简易的计算器</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 引包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n1"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"opt"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"+"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"*"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n2"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"="</span> @<span class="attr">click</span>=<span class="string">"calc"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"result"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="undefined">				n1: 0,</span></div><div class="line"><span class="undefined">				n2: 0,</span></div><div class="line"><span class="undefined">				result: 0,</span></div><div class="line"><span class="javascript">				opt: <span class="string">"+"</span></span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;</span></div><div class="line"><span class="undefined">				calc() &#123;</span></div><div class="line"><span class="undefined">					/*</span></div><div class="line"><span class="undefined">						计算器算数的方法</span></div><div class="line"><span class="undefined">						逻辑:</span></div><div class="line"><span class="javascript">						<span class="keyword">switch</span>(<span class="keyword">this</span>.opt)</span></div><div class="line"><span class="undefined">						&#123;</span></div><div class="line"><span class="javascript">							<span class="keyword">case</span> <span class="string">"+"</span>:</span></div><div class="line"><span class="javascript">								<span class="keyword">this</span>.result=<span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2);</span></div><div class="line"><span class="javascript">								<span class="keyword">break</span>;</span></div><div class="line"><span class="javascript">							<span class="keyword">case</span> <span class="string">"-"</span>:</span></div><div class="line"><span class="javascript">								<span class="keyword">this</span>.result=<span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1)-paeseInt(<span class="keyword">this</span>.n2);</span></div><div class="line"><span class="javascript">								<span class="keyword">break</span>;</span></div><div class="line"><span class="javascript">							<span class="keyword">case</span> <span class="string">"*"</span>:</span></div><div class="line"><span class="javascript">								<span class="keyword">this</span>.result=<span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1);</span></div><div class="line"><span class="javascript">								<span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2);</span></div><div class="line"><span class="javascript">								<span class="keyword">break</span>;</span></div><div class="line"><span class="javascript">							<span class="keyword">case</span> <span class="string">"/"</span>:</span></div><div class="line"><span class="javascript">								<span class="keyword">this</span>.result=<span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1);</span></div><div class="line"><span class="javascript">								<span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2);</span></div><div class="line"><span class="javascript">								<span class="keyword">break</span>;</span></div><div class="line"><span class="undefined">						&#125;</span></div><div class="line"><span class="undefined">					*/</span></div><div class="line"><span class="javascript">					<span class="comment">// 注意:这是投机取巧的方式，正式开发中，尽量少用</span></span></div><div class="line"><span class="javascript">					<span class="keyword">var</span> codeStr = <span class="string">"parseInt(this.n1)"</span> + <span class="keyword">this</span>.opt + <span class="string">"parseInt(this.n2)"</span>;</span></div><div class="line"><span class="javascript">					<span class="keyword">this</span>.result = <span class="built_in">eval</span>(codeStr);</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>HTML 代码结构</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line"></div><div class="line">  &lt;input type=&quot;text&quot; v-model=&quot;n1&quot;&gt;</div><div class="line"></div><div class="line">  &lt;select v-model=&quot;opt&quot;&gt;</div><div class="line"></div><div class="line">    &lt;option value=&quot;0&quot;&gt;+&lt;/option&gt;</div><div class="line"></div><div class="line">    &lt;option value=&quot;1&quot;&gt;-&lt;/option&gt;</div><div class="line"></div><div class="line">    &lt;option value=&quot;2&quot;&gt;*&lt;/option&gt;</div><div class="line"></div><div class="line">    &lt;option value=&quot;3&quot;&gt;÷&lt;/option&gt;</div><div class="line"></div><div class="line">  &lt;/select&gt;</div><div class="line"></div><div class="line">  &lt;input type=&quot;text&quot; v-model=&quot;n2&quot;&gt;</div><div class="line"></div><div class="line">  &lt;input type=&quot;button&quot; value=&quot;=&quot; v-on:click=&quot;getResult&quot;&gt;</div><div class="line"></div><div class="line">  &lt;input type=&quot;text&quot; v-model=&quot;result&quot;&gt;</div><div class="line"></div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ol>
<li>Vue实例代码：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// 创建 Vue 实例，得到 ViewModel</div><div class="line"></div><div class="line">   var vm = new Vue(&#123;</div><div class="line"></div><div class="line">     el: &apos;#app&apos;,</div><div class="line"></div><div class="line">     data: &#123;</div><div class="line"></div><div class="line">       n1: 0,</div><div class="line"></div><div class="line">       n2: 0,</div><div class="line"></div><div class="line">       result: 0,</div><div class="line"></div><div class="line">       opt: &apos;0&apos;</div><div class="line"></div><div class="line">     &#125;,</div><div class="line"></div><div class="line">     methods: &#123;</div><div class="line"></div><div class="line">       getResult() &#123;</div><div class="line"></div><div class="line">         switch (this.opt) &#123;</div><div class="line"></div><div class="line">           case &apos;0&apos;:</div><div class="line"></div><div class="line">             this.result = parseInt(this.n1) + parseInt(this.n2);</div><div class="line"></div><div class="line">             break;</div><div class="line"></div><div class="line">           case &apos;1&apos;:</div><div class="line"></div><div class="line">             this.result = parseInt(this.n1) - parseInt(this.n2);</div><div class="line"></div><div class="line">             break;</div><div class="line"></div><div class="line">           case &apos;2&apos;:</div><div class="line"></div><div class="line">             this.result = parseInt(this.n1) * parseInt(this.n2);</div><div class="line"></div><div class="line">             break;</div><div class="line"></div><div class="line">           case &apos;3&apos;:</div><div class="line"></div><div class="line">             this.result = parseInt(this.n1) / parseInt(this.n2);</div><div class="line"></div><div class="line">             break;</div><div class="line"></div><div class="line">         &#125;</div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">     &#125;</div><div class="line"></div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<h2 id="在Vue中使用样式"><a href="#在Vue中使用样式" class="headerlink" title="在Vue中使用样式"></a>在Vue中使用样式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 引包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.red</span> &#123;</span></div><div class="line"><span class="undefined">			color: red;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.thin</span> &#123;</span></div><div class="line"><span class="undefined">			font-weight: 200;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.italic</span> &#123;</span></div><div class="line"><span class="undefined">			font-style: italic;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.active</span> &#123;</span></div><div class="line"><span class="css">			<span class="selector-tag">letter-spacing</span>: 0<span class="selector-class">.5em</span>;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;h1 class="red thin"&gt;这是一个很大很大的h1,大到你无法想象&lt;/h1&gt; --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 第一种使用方式，直接传递一个数组，注意：这里的class需要使用v-bind做数据绑定 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;h1 :class="['thin', 'italic', flag?'active':'']"&gt;&lt;/h1&gt;这是一个很大很大的H1，大到你无法想象!!! --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 在数组中使用对象来代替三元表达式，提交代码的可读性 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;h1 :class="['thin', 'italic', &#123;'active':flag&#125; ]"&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 在为 class 使用 v-bind 绑定 对象的时候，对象的属性是类名，由于 对象的属性可带引号，也可不带引号，所以 这里我没写引号；  属性的值 是一个标识符 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"classObj"</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，的代viewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="javascript">				flag: <span class="literal">true</span>,</span></div><div class="line"><span class="undefined">				classObj: &#123;</span></div><div class="line"><span class="javascript">					red: <span class="literal">true</span>,</span></div><div class="line"><span class="javascript">					thin: <span class="literal">true</span>,</span></div><div class="line"><span class="javascript">					italic: <span class="literal">false</span>,</span></div><div class="line"><span class="javascript">					active: <span class="literal">false</span></span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="使用class样式"><a href="#使用class样式" class="headerlink" title="使用class样式"></a>使用class样式</h3><ol>
<li><p>数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1 :class=&quot;[&apos;red&apos;, &apos;thin&apos;]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>数组中使用三元表达式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1 :class=&quot;[&apos;red&apos;, &apos;thin&apos;, isactive?&apos;active&apos;:&apos;&apos;]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>数组中嵌套对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1 :class=&quot;[&apos;red&apos;, &apos;thin&apos;, &#123;&apos;active&apos;: isactive&#125;]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>直接使用对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1 :class=&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="使用内联样式"><a href="#使用内联样式" class="headerlink" title="使用内联样式"></a>使用内联样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 对象就是无序键值对的集合 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;h1 :style="styleObj1"&gt;这是一个h1&lt;/h1&gt; --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"[styleObj1,styleObj2]"</span>&gt;</span>这是一个h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="undefined">				styleObj1: &#123;</span></div><div class="line"><span class="javascript">					color: <span class="string">"red"</span>,</span></div><div class="line"><span class="javascript">					<span class="string">"font-weight"</span>: <span class="number">200</span></span></div><div class="line"><span class="undefined">				&#125;,</span></div><div class="line"><span class="undefined">				styleObj2: &#123;</span></div><div class="line"><span class="javascript">					<span class="string">"font-style"</span>: <span class="string">"italic"</span></span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1 :style=&quot;&#123;color: &apos;red&apos;, &apos;font-size&apos;: &apos;40px&apos;&#125;&quot;&gt;这是一个善良的H1&lt;/h1&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p>
<ul>
<li><p>在data上定义样式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data: &#123;</div><div class="line">        h1StyleObj: &#123; color: &apos;red&apos;, &apos;font-size&apos;: &apos;40px&apos;, &apos;font-weight&apos;: &apos;200&apos; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在元素中，通过属性绑定的形式，将样式对象应用到元素中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1 :style=&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;/h1&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</p>
<ul>
<li><p>在data上定义样式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">data: &#123;</div><div class="line">        h1StyleObj: &#123; color: &apos;red&apos;, &apos;font-size&apos;: &apos;40px&apos;, &apos;font-weight&apos;: &apos;200&apos; &#125;,</div><div class="line">        h1StyleObj2: &#123; fontStyle: &apos;italic&apos; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在元素中，通过属性绑定的形式，将样式对象应用到元素中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1 :style=&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;/h1&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="Vue指令之v-for和key属性"><a href="#Vue指令之v-for和key属性" class="headerlink" title="Vue指令之v-for和key属性"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;p&gt;&#123;&#123;list[0]&#125;&#125;&lt;/p&gt;</span></div><div class="line"><span class="comment">		&lt;p&gt;&#123;&#123;list[1]&#125;&#125;&lt;/p&gt;</span></div><div class="line"><span class="comment">		&lt;p&gt;&#123;&#123;list[2]&#125;&#125;&lt;/p&gt;</span></div><div class="line"><span class="comment">		&lt;p&gt;&#123;&#123;list[3]&#125;&#125;&lt;/p&gt;</span></div><div class="line"><span class="comment">		&lt;p&gt;&#123;&#123;list[4]&#125;&#125;&lt;/p&gt; --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item,i) in list"</span>&gt;</span>索引值:&#123;&#123;i&#125;&#125;---第一项：&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="comment">// 创建vue实例，的代ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="undefined">				list: [1, 2, 3, 4, 5, 6]</span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>迭代数组</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li v-for=&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<ol>
<li>迭代对象中的属性</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!-- 循环遍历对象身上的属性 --&gt;</div><div class="line"></div><div class="line">   &lt;div v-for=&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;/div&gt;</div></pre></td></tr></table></figure>
<ol>
<li>迭代数字</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;p v-for=&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;/p&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p>
</blockquote>
<p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p>
<p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p>
<h2 id="Vue指令之v-if和v-show"><a href="#Vue指令之v-if和v-show" class="headerlink" title="Vue指令之v-if和v-show"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 引包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"toggle"</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- v-if的特点：每次都会重新删除或创建元素 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- v-show的特点：每次都会重新进行DOM的删除和创建操作，只是切换了元素的display:none样式 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- v-if 有较高的切换性能消耗 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- v-show 有较高的初始渲染消耗 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 如果元素涉及到频繁的切换，最好不要使用v-if，而是推荐使用v-show --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 如果元素可能永远也不会以被显示出来被用户看到，则推荐使用v-if --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>这是用v-if控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span>这是用v-show控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="comment">// 创建Vue实例，得到ViewModel</span></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">			el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">			data: &#123;</span></div><div class="line"><span class="javascript">				flag: <span class="literal">false</span></span></div><div class="line"><span class="undefined">			&#125;,</span></div><div class="line"><span class="undefined">			methods: &#123;</span></div><div class="line"><span class="javascript">				<span class="comment">// toggle() &#123;</span></span></div><div class="line"><span class="javascript">				<span class="comment">// 	this.flag = !this.flag;</span></span></div><div class="line"><span class="javascript">				<span class="comment">// &#125;</span></span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p>
</blockquote>
<h2 id="品牌管理案例"><a href="#品牌管理案例" class="headerlink" title="品牌管理案例"></a>品牌管理案例</h2><h3 id="添加新品牌"><a href="#添加新品牌" class="headerlink" title="添加新品牌"></a>添加新品牌</h3><h3 id="删除品牌"><a href="#删除品牌" class="headerlink" title="删除品牌"></a>删除品牌</h3><h3 id="根据条件筛选品牌"><a href="#根据条件筛选品牌" class="headerlink" title="根据条件筛选品牌"></a>根据条件筛选品牌</h3><ol>
<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>
</ol>
<p><a href="https://v1-cn.vuejs.org/api/#filterBy" target="_blank" rel="external">filterBy - 指令</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;tr v-for=&quot;item in list | filterBy searchName in &apos;name&apos;&quot;&gt;</div><div class="line"></div><div class="line">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</div><div class="line"></div><div class="line">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</div><div class="line"></div><div class="line">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt;</div><div class="line"></div><div class="line">  &lt;td&gt;</div><div class="line"></div><div class="line">    &lt;a href=&quot;#&quot; @click.prevent=&quot;del(item.id)&quot;&gt;删除&lt;/a&gt;</div><div class="line"></div><div class="line">  &lt;/td&gt;</div><div class="line"></div><div class="line">&lt;/tr&gt;</div></pre></td></tr></table></figure>
<ol>
<li>在2.x版本中<a href="https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果" target="_blank" rel="external">手动实现筛选的方式</a>：</li>
</ol>
<ul>
<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;hr&gt; 输入筛选名称：</div><div class="line"></div><div class="line">&lt;input type=&quot;text&quot; v-model=&quot;searchName&quot;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;tbody&gt;</div><div class="line"></div><div class="line">      &lt;tr v-for=&quot;item in search(searchName)&quot;&gt;</div><div class="line"></div><div class="line">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</div><div class="line"></div><div class="line">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</div><div class="line"></div><div class="line">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt;</div><div class="line"></div><div class="line">        &lt;td&gt;</div><div class="line"></div><div class="line">          &lt;a href=&quot;#&quot; @click.prevent=&quot;del(item.id)&quot;&gt;删除&lt;/a&gt;</div><div class="line"></div><div class="line">        &lt;/td&gt;</div><div class="line"></div><div class="line">      &lt;/tr&gt;</div><div class="line"></div><div class="line">    &lt;/tbody&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">search(name) &#123;</div><div class="line"></div><div class="line">  return this.list.filter(x =&gt; &#123;</div><div class="line"></div><div class="line">    return x.name.indexOf(name) != -1;</div><div class="line"></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Vue调试工具vue-devtools的安装步骤和使用"><a href="#Vue调试工具vue-devtools的安装步骤和使用" class="headerlink" title="Vue调试工具vue-devtools的安装步骤和使用"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN" target="_blank" rel="external">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>
<h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><ol>
<li>HTML元素：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&apos;yyyy-mm-dd&apos;)&#125;&#125;&lt;/td&gt;</div></pre></td></tr></table></figure>
<ol>
<li>私有 <code>filters</code> 定义方式：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">filters: &#123; // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</div><div class="line"></div><div class="line">    dataFormat(input, pattern = &quot;&quot;) &#123; // 在参数列表中 通过 pattern=&quot;&quot; 来指定形参默认值，防止报错</div><div class="line"></div><div class="line">      var dt = new Date(input);</div><div class="line"></div><div class="line">      // 获取年月日</div><div class="line"></div><div class="line">      var y = dt.getFullYear();</div><div class="line"></div><div class="line">      var m = (dt.getMonth() + 1).toString().padStart(2, &apos;0&apos;);</div><div class="line"></div><div class="line">      var d = dt.getDate().toString().padStart(2, &apos;0&apos;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</div><div class="line"></div><div class="line">      // 否则，就返回  年-月-日 时：分：秒</div><div class="line"></div><div class="line">      if (pattern.toLowerCase() === &apos;yyyy-mm-dd&apos;) &#123;</div><div class="line"></div><div class="line">        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`;</div><div class="line"></div><div class="line">      &#125; else &#123;</div><div class="line"></div><div class="line">        // 获取时分秒</div><div class="line"></div><div class="line">        var hh = dt.getHours().toString().padStart(2, &apos;0&apos;);</div><div class="line"></div><div class="line">        var mm = dt.getMinutes().toString().padStart(2, &apos;0&apos;);</div><div class="line"></div><div class="line">        var ss = dt.getSeconds().toString().padStart(2, &apos;0&apos;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`;</div><div class="line"></div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>
</blockquote>
<h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// 定义一个全局过滤器</div><div class="line"></div><div class="line">Vue.filter(&apos;dataFormat&apos;, function (input, pattern = &apos;&apos;) &#123;</div><div class="line"></div><div class="line">  var dt = new Date(input);</div><div class="line"></div><div class="line">  // 获取年月日</div><div class="line"></div><div class="line">  var y = dt.getFullYear();</div><div class="line"></div><div class="line">  var m = (dt.getMonth() + 1).toString().padStart(2, &apos;0&apos;);</div><div class="line"></div><div class="line">  var d = dt.getDate().toString().padStart(2, &apos;0&apos;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</div><div class="line"></div><div class="line">  // 否则，就返回  年-月-日 时：分：秒</div><div class="line"></div><div class="line">  if (pattern.toLowerCase() === &apos;yyyy-mm-dd&apos;) &#123;</div><div class="line"></div><div class="line">    return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`;</div><div class="line"></div><div class="line">  &#125; else &#123;</div><div class="line"></div><div class="line">    // 获取时分秒</div><div class="line"></div><div class="line">    var hh = dt.getHours().toString().padStart(2, &apos;0&apos;);</div><div class="line"></div><div class="line">    var mm = dt.getMinutes().toString().padStart(2, &apos;0&apos;);</div><div class="line"></div><div class="line">    var ss = dt.getSeconds().toString().padStart(2, &apos;0&apos;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>
</blockquote>
<h2 id="键盘修饰符以及自定义键盘修饰符"><a href="#键盘修饰符以及自定义键盘修饰符" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id="1-x中自定义键盘修饰符【了解即可】"><a href="#1-x中自定义键盘修饰符【了解即可】" class="headerlink" title="1.x中自定义键盘修饰符【了解即可】"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Vue.directive(&apos;on&apos;).keyCodes.f2 = 113;</div></pre></td></tr></table></figure>
<h3 id="2-x中自定义键盘修饰符"><a href="#2-x中自定义键盘修饰符" class="headerlink" title="2.x中自定义键盘修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#键值修饰符" target="_blank" rel="external">2.x中自定义键盘修饰符</a></h3><ol>
<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Vue.config.keyCodes.f2 = 113;</div></pre></td></tr></table></figure>
<ol>
<li>使用自定义的按键修饰符：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;input type=&quot;text&quot; v-model=&quot;name&quot; @keyup.f2=&quot;add&quot;&gt;</div></pre></td></tr></table></figure>
<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="external">自定义指令</a></h2><ol>
<li>自定义全局和局部的 自定义指令：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</div><div class="line"></div><div class="line">Vue.directive(&apos;focus&apos;, &#123;</div><div class="line"></div><div class="line">  inserted: function (el) &#123; // inserted 表示被绑定元素插入父节点时调用</div><div class="line"></div><div class="line">    el.focus();</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</div><div class="line"></div><div class="line">  directives: &#123;</div><div class="line"></div><div class="line">    color: &#123; // 为元素设置指定的字体颜色</div><div class="line"></div><div class="line">      bind(el, binding) &#123;</div><div class="line"></div><div class="line">        el.style.color = binding.value;</div><div class="line"></div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    &apos;font-weight&apos;: function (el, binding2) &#123; // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</div><div class="line"></div><div class="line">      el.style.fontWeight = binding2.value;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ol>
<li>自定义指令的使用方式：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;input type=&quot;text&quot; v-model=&quot;searchName&quot; v-focus v-color=&quot;&apos;red&apos;&quot; v-font-weight=&quot;900&quot;&gt;</div></pre></td></tr></table></figure>
<h2 id="Vue-1-x-中-自定义元素指令【已废弃-了解即可】"><a href="#Vue-1-x-中-自定义元素指令【已废弃-了解即可】" class="headerlink" title="Vue 1.x 中 自定义元素指令【已废弃,了解即可】"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Vue.elementDirective(&apos;red-color&apos;, &#123;</div><div class="line">  bind: function () &#123;</div><div class="line">    this.el.style.color = &apos;red&apos;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;red-color&gt;1232&lt;/red-color&gt;</div></pre></td></tr></table></figure></p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ol>
<li><a href="https://v1-cn.vuejs.org/" target="_blank" rel="external">vue.js 1.x 文档</a></li>
<li><a href="https://cn.vuejs.org/" target="_blank" rel="external">vue.js 2.x 文档</a></li>
<li><a href="http://www.css88.com/archives/7715" target="_blank" rel="external">String.prototype.padStart(maxLength, fillString)</a></li>
<li><a href="http://www.cnblogs.com/wuhua1/p/6686237.html" target="_blank" rel="external">js 里面的键盘事件对应的键码</a></li>
<li><a href="http://www.cnblogs.com/kidney/p/6052935.html" target="_blank" rel="external">Vue.js双向绑定的实现原理</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue-js-初见&quot;&gt;&lt;a href=&quot;#Vue-js-初见&quot; class=&quot;headerlink&quot; title=&quot;Vue.js - 初见&quot;&gt;&lt;/a&gt;Vue.js - 初见&lt;/h1&gt;&lt;h3 id=&quot;什么是Vue-js&quot;&gt;&lt;a href=&quot;#什么是Vue-js&quot; c
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Node-express</title>
    <link href="http://yoursite.com/2017/05/15/19.express/"/>
    <id>http://yoursite.com/2017/05/15/19.express/</id>
    <published>2017-05-15T15:21:31.000Z</published>
    <updated>2017-11-03T09:13:04.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js-express"><a href="#Node-js-express" class="headerlink" title="Node.js - express"></a>Node.js - express</h1><h2 id="什么是Express-js"><a href="#什么是Express-js" class="headerlink" title="什么是Express.js"></a>什么是Express.js</h2><ol>
<li>Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架；</li>
<li>Express 不对 Node.js 已有的特性进行二次抽象，只是在Node.js之上扩展了构建 Web 应用所需的基本功能。</li>
</ol>
<blockquote>
<p>总结什么是Express.js：是一个基于Node.js的Web开发框架。Express框架并没有覆盖或删除原生的API，而是基于原生的API，做了进一步的封装，提供了更好用的一些API，方便快速进行Web开发！<br>res.render、res.json、res.redirect、req.query<br>Node.js是Javascript的服务器端运行环境！express只是基于Node，提供了开发Web应用的框架和API。</p>
</blockquote>
<h2 id="如何创建基本的HTTP服务（新旧方式对比）"><a href="#如何创建基本的HTTP服务（新旧方式对比）" class="headerlink" title="如何创建基本的HTTP服务（新旧方式对比）"></a>如何创建基本的HTTP服务（新旧方式对比）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;);</div><div class="line"></div><div class="line">// 创建一个 app 出来</div><div class="line">var app = express();</div><div class="line"></div><div class="line">// 捕获 get 类型的 / 请求</div><div class="line">app.get(&apos;/&apos;, function (req, res) &#123;</div><div class="line">  // 支持原生的 end 方法</div><div class="line">  res.end(&apos;OK&apos;);</div><div class="line">&#125;);</div><div class="line">// 捕获 get 类型的 /a 请求</div><div class="line">app.get(&apos;/a&apos;, function (req, res) &#123;</div><div class="line">  // 通过 express 封装的 send 方法，返回内容，会自动添加响应头，更加方便便捷</div><div class="line">  res.send(&apos;&lt;h1&gt;你好啊&lt;/h1&gt;&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 启动 app 监听程序</div><div class="line">app.listen(3000, function () &#123;</div><div class="line">  console.log(&apos;App running at http://127.0.0.1:3000&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="http模块原生end方法和-express中send方法的对比"><a href="#http模块原生end方法和-express中send方法的对比" class="headerlink" title="http模块原生end方法和 express中send方法的对比"></a>http模块原生<code>end</code>方法和 express中<code>send</code>方法的对比</h2><ol>
<li>send方法中默认处理了中文乱码问题</li>
<li>send方法默认返回的格式就是HTML类型的文本内容</li>
</ol>
<h2 id="根据不同的路由method和url响应不同的文本消息"><a href="#根据不同的路由method和url响应不同的文本消息" class="headerlink" title="根据不同的路由method和url响应不同的文本消息"></a>根据不同的路由<code>method</code>和<code>url</code>响应不同的文本消息</h2><h2 id="根据不同的路由method和url响应不同的html页面"><a href="#根据不同的路由method和url响应不同的html页面" class="headerlink" title="根据不同的路由method和url响应不同的html页面"></a>根据不同的路由<code>method</code>和<code>url</code>响应不同的html页面</h2><ol>
<li>res.sendFile</li>
</ol>
<h2 id="分别从原生和express的app-js中抽离router路由模块"><a href="#分别从原生和express的app-js中抽离router路由模块" class="headerlink" title="分别从原生和express的app.js中抽离router路由模块"></a>分别从原生和express的<code>app.js</code>中抽离<code>router</code>路由模块</h2><h2 id="Express中的路由"><a href="#Express中的路由" class="headerlink" title="Express中的路由"></a>Express中的路由</h2><h2 id="杂乱的问题"><a href="#杂乱的问题" class="headerlink" title="杂乱的问题"></a>杂乱的问题</h2><p><strong>ES6中属性和属性值一样的话可以直接省略</strong><br>forEach只要开始的话就没法停止了，所以使用数组的some方法，返回return true;即可停止循环。  </p>
<h2 id="创建最基本的web前端服务器"><a href="#创建最基本的web前端服务器" class="headerlink" title="创建最基本的web前端服务器"></a>创建最基本的web前端服务器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 导入express模块</span></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"require"</span>);</div><div class="line"><span class="comment">// 创建一个服务器</span></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="comment">// 使用app.use方法，接收客户端的任何method类型的任何URL地址请求</span></div><div class="line">app.use(<span class="string">"/index"</span>, (req, res) =&gt; &#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * res.end("express ok");</span></div><div class="line"><span class="comment">	 * res.end("你好啊，皮还是你皮");</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	res.send(<span class="string">"&lt;h2&gt;皮还是你皮&lt;/h2&gt;"</span>);</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 启动express服务器</span></div><div class="line">app.listen(<span class="number">3001</span>, () =&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"express server running at http://127.0.0.1:3001"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="根据不同的URL和method返回不同的内容"><a href="#根据不同的URL和method返回不同的内容" class="headerlink" title="根据不同的URL和method返回不同的内容"></a>根据不同的URL和method返回不同的内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 导入express模块</span></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="comment">// 创建express的服务器实例</span></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="comment">// 使用app.use可以接受所有请求</span></div><div class="line"><span class="comment">// app.use(function(req,res)&#123;&#125;);</span></div><div class="line">app.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</div><div class="line">	res.send(<span class="string">"&lt;h1&gt;express-首页&lt;/h2&gt;"</span>);</div><div class="line">&#125;)</div><div class="line">app.get(<span class="string">"/movie"</span>, (req, res) =&gt; &#123;</div><div class="line">	res.send(<span class="string">"&lt;h1&gt;express-电影&lt;/h2&gt;"</span>);</div><div class="line">&#125;)</div><div class="line">app.post(<span class="string">"/about"</span>, (req, res) =&gt; &#123;</div><div class="line">	res.send(<span class="string">"&lt;h1&gt;express-电影&lt;/h1&gt;"</span>);</div><div class="line">&#125;)</div><div class="line">app.use(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">	res.send(<span class="string">"404"</span>);</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 调用app.listen方法，指定端口号并启动web服务器</span></div><div class="line">app.listen(<span class="number">3001</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Express server running at http://127.0.0.1:3001"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="返回不同的页面"><a href="#返回不同的页面" class="headerlink" title="返回不同的页面"></a>返回不同的页面</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line">app.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</div><div class="line">	<span class="comment">// res.render("index",&#123;&#125;);</span></div><div class="line">	res.sendFile(__dirname + <span class="string">"/views/index.html"</span>);</div><div class="line">&#125;)</div><div class="line">app.get(<span class="string">"/movie"</span>, (req, res) =&gt; &#123;</div><div class="line">	<span class="comment">// res.render("movie",&#123;&#125;);</span></div><div class="line">	res.sendFile(__dirname + <span class="string">"/views/movie.html"</span>);</div><div class="line">&#125;)</div><div class="line">app.post(<span class="string">"/about"</span>, (req, res) =&gt; &#123;</div><div class="line">	<span class="comment">// res.render("about",&#123;&#125;);</span></div><div class="line">	res.sendFile(__dirname + <span class="string">"/views/about.html"</span>);</div><div class="line">&#125;)</div><div class="line">app.listen(<span class="number">3001</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"App listening on port 3001!"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="express处理静态资源"><a href="#express处理静态资源" class="headerlink" title="express处理静态资源"></a>express处理静态资源</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 导入express模块</span></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="comment">// 创建express的服务器实例</span></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="comment">// 问题：如果我访问图片的时候，很任性，就想在路径前面带上images</span></div><div class="line">app.use(<span class="string">"/myVirtualPath"</span>, express.static(<span class="string">"images"</span>));</div><div class="line"><span class="comment">// 1.jpg</span></div><div class="line"><span class="comment">// 注意：在使用app.use(express.static("托管的资源目录"))的时候，可以在前面挂载虚拟路径</span></div><div class="line">app.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</div><div class="line">	res.sendFile(__dirname + <span class="string">"/index.html"</span>);</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 调用app.listen方法，指定端口号并启动web服务器</span></div><div class="line">app.listen(<span class="number">3001</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="number">3001</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"Express server running at http://127.0.0.1:3001"</span>);</div><div class="line">	&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="中间件的处理过程"><a href="#中间件的处理过程" class="headerlink" title="中间件的处理过程"></a>中间件的处理过程</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入模块</span></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"要开始处理了"</span>);</div><div class="line">	req.name1 = <span class="string">"zd"</span>;</div><div class="line">	next();</div><div class="line">&#125;)</div><div class="line">app.use(<span class="string">"/"</span>, (req, res, next) =&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"1"</span>);</div><div class="line">	<span class="built_in">console</span>.log(req.name1);</div><div class="line">	res.end(<span class="string">"ok"</span>);</div><div class="line">	next();</div><div class="line">&#125;)</div><div class="line">app.use(<span class="string">"/"</span>, (req, res) =&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"2"</span>);</div><div class="line">	res.end(<span class="string">"No"</span>);</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 注意，当前面中间件表示调用了res.end相关的方法，那么后续的中间件的res.end就没有效果了</span></div><div class="line"><span class="comment">// 在中间件中，任何对req和res的修改，都要放在next()调用之前</span></div><div class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"App listening on http://127.0.0.1:3000"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h2><p>在自来水的处理过程中，中间的每一个处理环节，可以叫做中间件！<br>中间件就是用来处理原材料的，那么，在自来水处理过程中，处理的原料是水；在express中，中间件处理的原料是 request 对象 和 response 对象；<br><img src="images/自来水处理过程.jpg" alt="自来水处理过程"></p>
<p><strong>概念：</strong>中间件（Middleware） <strong>是一个函数</strong>，它可以访问<strong>请求对象</strong>（request object (req)）, <strong>响应对象</strong>（response object (res)）, 和 web 应用中处于请求-响应循环流程中的中间件，一般被命名为 next 的变量。</p>
<p>经过中间件的处理之后，express就向 req 和 res ,对象身上，挂在了一些好用的方法和属性<br>req.query<br>res.send()<br>res.json()</p>
<ul>
<li>中间件的功能包括：<ul>
<li>执行任何代码。</li>
<li>修改请求和响应对象。</li>
<li>终结请求-响应循环。</li>
<li>调用堆栈中的下一个中间件。</li>
</ul>
</li>
</ul>
<h2 id="body-parser-中间件的使用步骤"><a href="#body-parser-中间件的使用步骤" class="headerlink" title="body-parser 中间件的使用步骤"></a>body-parser 中间件的使用步骤</h2><p>在 express 中，可以使用 body-parser 第三方中间件，去帮我们出去 post 提交过来的数据</p>
<ol>
<li>使用 npm 安装</li>
<li>导入 这个第三方中间件 模块</li>
<li>使用 app.use()注册刚才导入的中间件，到 app身上</li>
</ol>
<h2 id="Express-里中间件的分类（形式上的分类）"><a href="#Express-里中间件的分类（形式上的分类）" class="headerlink" title="Express 里中间件的分类（形式上的分类）"></a>Express 里中间件的分类（形式上的分类）</h2><ol>
<li>应用级别的中间件： 所有挂载到 app 身上的方法，都叫做 “应用级别的中间件”  app.get  app.post  app.use</li>
<li>路由级别的中间件： 挂载到了 router 对象上，这个 router 对象 是经过调用 <code>express.Router()</code> 得到了；    router.get    router.post   router.use</li>
<li>错误处理中间件: 有四个参数   err, req, res, next</li>
<li>express唯一的一个内置中间件： express.static(root, [options]) 用于托管静态资源</li>
<li>第三方中间件： 非Express官方提供的中间件，叫做第三方中间件</li>
</ol>
<h2 id="在Express中使用路由"><a href="#在Express中使用路由" class="headerlink" title="在Express中使用路由"></a>在Express中使用路由</h2><ol>
<li><p>定义路由的 <code>router</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;);</div><div class="line">// 使用 express 的 Router() 方法，得到一个路由实例</div><div class="line">var router = express.Router();</div><div class="line"></div><div class="line">// 通过 Method 和 请求路径，分发不同的请求到不同的处理函数中</div><div class="line">router.get(&apos;/&apos;, function (req, res) &#123;</div><div class="line">  res.send(&apos;&lt;h1&gt;首页&lt;/h1&gt;&apos;);</div><div class="line">&#125;).get(&apos;/movie&apos;, function (req, res) &#123;</div><div class="line">  res.send(&apos;&lt;h1&gt;电影&lt;/h1&gt;&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = router;</div></pre></td></tr></table></figure>
</li>
<li><p>导入路由并注册使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;);</div><div class="line">// 导入路由</div><div class="line">var router = require(&apos;./router&apos;);</div><div class="line"></div><div class="line">// 创建一个 app 出来</div><div class="line">var app = express();</div><div class="line">// 注册路由</div><div class="line">app.use(router);</div><div class="line"></div><div class="line">// 启动 app 监听程序</div><div class="line">app.listen(3000, function () &#123;</div><div class="line">  console.log(&apos;App running at http://127.0.0.1:3000&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>express在挂载路由的时候，撤了能够分开写，也为我们提供了链式编程 </p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">"/"</span>,(req,res)=&gt;&#123;</div><div class="line">    &lt;!--渲染一个静态(只有单纯的html结构，样式，基本的js，没有动态的数据交互)的首页页面--&gt;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ol>
<li>方案总结<ul>
<li>方案1：使用fs模块读取首页文件中的字符串，然后调用res.end返回</li>
<li>方案2：使用art-template之类的模版引擎，然后使用res.end返回</li>
<li>方案3：使用res.sendFile渲染页面</li>
</ul>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">res.sendFile(path.join(__dirname,<span class="string">"/views/index.html"</span>));</div><div class="line">&lt;!--全局暴露--&gt;</div><div class="line"><span class="built_in">module</span>.exports=router;</div></pre></td></tr></table></figure>
<ol>
<li>总结：针对于纯静态页面的渲染，我们不必每次监听路由请求，可以使用唯一的内置中间件express.static()来快速托管静态页面。</li>
<li>使用express.static()防范，除了可以托管css，js，images，还可以托管不需要使用【服务器端渲染】的静态页面。而<strong>客户端倪渲染的页面也可以使用它托管</strong></li>
<li>能使用的原因是：客户端的渲染分为两步，第一步是请求页面拿到页面的html结构，第二部在页面中会有一个模版字符串的区域，接下来引用art-template.js的脚本，然后自己再写一段js代码来实现页面的渲染。所以完全可以使用express.static来渲染。</li>
</ol>
<h2 id="在express中使用模板引擎"><a href="#在express中使用模板引擎" class="headerlink" title="在express中使用模板引擎"></a>在express中使用模板引擎</h2><p><code>ejs</code>默认的模板文件后缀名是<code>.ejs</code>，如果你想让<code>ejs</code>模板引擎的默认后缀名是<code>.html</code>，需要进行相关的设置</p>
<h3 id="使用ejs"><a href="#使用ejs" class="headerlink" title="使用ejs"></a>使用ejs</h3><ol>
<li><p>运行npm安装<code>ejs</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i ejs -S</div></pre></td></tr></table></figure>
</li>
<li><p>注册模板引擎：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>同时，也可以修改默认的模板文件存放路径：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.set(&apos;views&apos;, __dirname + &apos;/views&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>使用ejs将模板渲染出来，同时将渲染的结果发送给客户端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">res.render(&apos;模板名称&apos;, &#123;&#125;); // 第一个参数是模板的名称，第二个参数是模板要渲染的数据</div></pre></td></tr></table></figure>
</li>
</ol>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// node.js调用render函数</div><div class="line">res.render(&apos;hero_index&apos;, &#123;</div><div class="line">        username: &apos;尼古拉斯·赵四&apos;,</div><div class="line">        hobby: [&apos;吃饭&apos;, &apos;唱歌&apos;, &apos;打电话&apos;],</div><div class="line">        isShow: false</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>html模板字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;h1 style=&quot;color:&lt;%= !isShow?&apos;red&apos;:&apos;&apos; %&gt;;&quot;&gt;这是EJS的模板页面 - &lt;%= username %&gt;&lt;/h1&gt;</div><div class="line">    &lt;% if(!isShow)&#123; %&gt;</div><div class="line">    &lt;h3&gt;这是一个漂亮的h3标题&lt;/h3&gt;</div><div class="line">    &lt;% &#125; %&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;% hobby.forEach(function(item, i)&#123; %&gt;</div><div class="line">        &lt;li&gt;&lt;%= item %&gt;&lt;/li&gt;</div><div class="line">        &lt;% &#125;) %&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<ol>
<li><p>如何修改ejs的定界符:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 导入 EJS 并修改定界符</div><div class="line">var ejs = require(&apos;ejs&apos;);</div><div class="line">ejs.delimiter = &apos;?&apos;;</div><div class="line"></div><div class="line">app.engine(&apos;ejs&apos;, ejs.renderFile);</div><div class="line">// 设置完毕之后，在调用res.render()函数的时候，模板文件必须带后缀名</div></pre></td></tr></table></figure>
</li>
<li><p>如何使用公共模板：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!--导入公共的头部--&gt;</div><div class="line">&lt;?- include(&apos;header&apos;) ?&gt;</div><div class="line"></div><div class="line">&lt;h1&gt;ejs&lt;/h1&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">  &lt;? names.forEach(function(item)&#123; ?&gt;</div><div class="line">    &lt;li&gt;&lt;?= item ?&gt;&lt;/li&gt;</div><div class="line">  &lt;? &#125;) ?&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">&lt;!--导入公共的底部--&gt;</div><div class="line">&lt;?- include(&apos;footer&apos;) ?&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>如何自定义ejs的模版文件后缀名</p>
<ul>
<li>导入ejs模块</li>
<li>使用app.engine方法，自定义一个模版引擎，其中，参数1是一个字符串类型的，表示自定义的模版引擎的名称，同时这个名称，也是模版页面的后缀名</li>
<li>参数2是一个方法的使用，表示调用该方法区域渲染模版页面</li>
<li><strong>IDE(集成开发环境)</strong></li>
<li>注意：==设置默认模版引擎，如果不设置调用res.render会报错==</li>
</ul>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置默认模版页面的存放路径</span></div><div class="line">app.set(<span class="string">"views"</span>, <span class="string">"./views"</span>);</div><div class="line">app.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</div><div class="line">	res.render(<span class="string">"index.html"</span>, &#123;</div><div class="line">		title: <span class="string">"QQQ"</span></div><div class="line">	&#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="external">MDN - JSON.stringify()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="external">MDN - FileReader</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="external">MDN - FormData</a></li>
<li><a href="http://www.expressjs.com.cn/" target="_blank" rel="external">Express - 中文网</a></li>
<li><a href="http://expressjs.com/" target="_blank" rel="external">Express - 英文官网</a></li>
<li><a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="external">Node.js 教程</a></li>
<li><a href="https://www.runoob.com/w3cnote/express-4-x-api.html" target="_blank" rel="external">菜鸟教程 - Express 4.x API 中文文档</a></li>
<li><a href="https://blog.gtwang.org/programming/learn-to-use-the-new-router-in-expressjs-4/" target="_blank" rel="external">Express.js 4.0 的路由（Router）功能用法教學</a></li>
<li><a href="https://github.com/aui/art-template" target="_blank" rel="external">github - art-template</a></li>
<li><a href="https://github.com/aui/express-art-template" target="_blank" rel="external">github - express-art-template</a></li>
<li><a href="https://github.com/mde/ejs" target="_blank" rel="external">github - ejs</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Node-js-express&quot;&gt;&lt;a href=&quot;#Node-js-express&quot; class=&quot;headerlink&quot; title=&quot;Node.js - express&quot;&gt;&lt;/a&gt;Node.js - express&lt;/h1&gt;&lt;h2 id=&quot;什么是Expres
    
    </summary>
    
      <category term="Node" scheme="http://yoursite.com/categories/Node/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node-挥别</title>
    <link href="http://yoursite.com/2017/04/11/18.Node.js-%E6%8C%A5%E5%88%AB/"/>
    <id>http://yoursite.com/2017/04/11/18.Node.js-挥别/</id>
    <published>2017-04-11T07:33:21.000Z</published>
    <updated>2017-11-03T09:12:36.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js-挥别"><a href="#Node-js-挥别" class="headerlink" title="Node.js - 挥别"></a>Node.js - 挥别</h1><h2 id="express中使用art-template"><a href="#express中使用art-template" class="headerlink" title="express中使用art-template"></a>express中使用art-template</h2><ol>
<li><p>先安装相关的包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save art-template</div><div class="line">npm install --save express-art-template</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>app.engine</code> 自定义一个模板引擎</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.engine(&apos;art&apos;, require(&apos;express-art-template&apos;));</div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>app.set</code>把自定义的模板引擎，设置为express 默认的模板引擎：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.set(&apos;view engine&apos;, &apos;art&apos;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="数据库介绍"><a href="#数据库介绍" class="headerlink" title="数据库介绍"></a>数据库介绍</h2><ol>
<li>之前的数据是怎么存储的：存储在文本文件中<code>data.json</code><ul>
<li>缺点1：数据存取不方便，不利于维护和扩展，当数据量大了之后，无法直接通过打开文件的形式对数据进行操作；</li>
<li>缺点2：数据存储比较分散，无法进行集中式管理；</li>
<li>缺点3：安全性较低，由于数据是直接存储在文本文件中的，所有无法进行数据的加密，存在安全隐患；</li>
</ul>
</li>
<li>Sql（Structured Query Language）数据库：提供了安全机制、便于通过<strong>Sql语句</strong>对数据直接进行操作。<ul>
<li>支持 结构化查询语言（Sql）的数据库，叫做 <code>Sql数据库</code></li>
<li><code>Sql</code>是一种查询语言，能够很方便的对数据进行CRUD；</li>
</ul>
</li>
<li>常见的数据库的分类<ul>
<li>传统的关系型数据库（Sql数据库）：Oracle（甲骨文 Java）、DB2、MySql、MS SQL Server、Sqlite【关系型数据库，对于大量数据的存取效率很高】</li>
<li>现在比较流行的非关系型数据库（No-Sql数据库）：Redis(内部以键值对形式存储数据，是内存数据库)、Memcached、MongoDb（可以把数据对应到实际的物理磁盘，MongoDB使用JS来操作数据）</li>
</ul>
</li>
</ol>
<h2 id="关系型数据库的整体介绍"><a href="#关系型数据库的整体介绍" class="headerlink" title="关系型数据库的整体介绍"></a>关系型数据库的整体介绍</h2><ul>
<li>MySql中的数据库服务是什么</li>
<li>MySql中的数据库是什么：一个数据服务中通常包含一个或多个数据库。每个数据库由名字来进行区分；</li>
<li>MySql中的数据库表是什么：一个数据库通常包含一个或多个表。每个表由一个名字标识（例如“客户”或者“订单”）。表包含带有数据的记录（行）。</li>
<li>数据库服务就相当于是一台电脑；</li>
<li>数据库相当于是这台电脑中的每个Excel；</li>
<li>数据库表相当于是Excel中每个Sheet页签；</li>
<li>数据库字段相当于Sheet中的每一列；</li>
<li>数据库字段有自己的字段类型；</li>
</ul>
<h2 id="安装配置PHPStudy、navicat"><a href="#安装配置PHPStudy、navicat" class="headerlink" title="安装配置PHPStudy、navicat"></a>安装配置<code>PHPStudy</code>、<code>navicat</code></h2><ol>
<li>PHPStudy傻瓜式安装：默认的用户名是<code>root</code>，默认的密码也是<code>root</code></li>
<li>大家也可以使用WAMP中集成的MySql，WAMP中mySql的用户名是<code>root</code>，默认没有密码</li>
<li>navicat傻瓜式安装、一键激活（建议安装navicat时候选择默认安装路径，方便一键激活）</li>
</ol>
<h2 id="数据库可视化工具navicat的基本使用"><a href="#数据库可视化工具navicat的基本使用" class="headerlink" title="数据库可视化工具navicat的基本使用"></a>数据库可视化工具<code>navicat</code>的基本使用</h2><ol>
<li>打开和关闭数据库连接</li>
<li>创建用户、设置用户权限</li>
<li>新建数据库、新建表、设计表（设置字段类型）、设置Id自增<ul>
<li>新建<code>users</code>用户表，表字段为：id、name、age、gender、address、isdel</li>
<li>Id自增：设置为主键，勾选<code>自动递增</code></li>
<li>主键：是用来标识数据表中每一行数据的唯一性的，确保独一无二性。</li>
</ul>
</li>
</ol>
<h2 id="数据库中常见的字段类型"><a href="#数据库中常见的字段类型" class="headerlink" title="数据库中常见的字段类型"></a>数据库中常见的字段类型</h2><table>
<thead>
<tr>
<th>Sql类型</th>
<th>JS类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>Int</td>
<td>整数Number</td>
</tr>
<tr>
<td>char</td>
<td>非可变长度的String</td>
</tr>
<tr>
<td>varchar</td>
<td>可变长度的String</td>
</tr>
<tr>
<td>tinyint</td>
<td>Boolean</td>
</tr>
<tr>
<td>NULL</td>
<td>空字符串</td>
</tr>
<tr>
<td>dateTime</td>
<td>时间字符串</td>
</tr>
<tr>
<td>Text</td>
<td>大量文本</td>
</tr>
</tbody>
</table>
<ol>
<li>创建表并添加字段：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">新建一张 Users 表</div><div class="line">表中有 6 个 字段【注意：在JS中每个对象身上有很多属性，当这个对象的数据，存储到数据中之后，这些属性，就被叫做 字段】</div><div class="line"></div><div class="line">id  用户 id</div><div class="line">number   -&gt;  Int(整数类型)</div><div class="line">Id必须要有，同时不能重复</div><div class="line">主键：是用来唯一标识一条数据的，标识数据具有唯一性，不能重复</div><div class="line">注意：在一个表中，一般只有一个主键来标识唯一性</div><div class="line">如果勾选了Int 类型的 Id为 自动增长，则每次写入数据的时候，可以不提供id，数据库会自动写入一个Id</div><div class="line"></div><div class="line">name  用户名</div><div class="line">string   -&gt;    varchar(可变长度的字符)</div><div class="line">不能为空</div><div class="line"></div><div class="line">age  年龄</div><div class="line">number  -&gt;  Int</div><div class="line"></div><div class="line">gender  性别</div><div class="line">string    -&gt;    varchar</div><div class="line"></div><div class="line">address 地址</div><div class="line">string    -&gt;    varchar</div><div class="line"></div><div class="line">isdel   是否被删除</div><div class="line">bool   -&gt;   boolean    tinyint</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Sql语句的基本学习"><a href="#Sql语句的基本学习" class="headerlink" title="Sql语句的基本学习"></a>Sql语句的基本学习</h2><table>
<thead>
<tr>
<th>关键字</th>
<th>语义</th>
</tr>
</thead>
<tbody>
<tr>
<td>insert</td>
<td>插入</td>
</tr>
<tr>
<td>update</td>
<td>更新</td>
</tr>
<tr>
<td>delete</td>
<td>删除</td>
</tr>
<tr>
<td>where</td>
<td>条件</td>
</tr>
<tr>
<td>select</td>
<td>查询</td>
</tr>
<tr>
<td>select *</td>
<td>查询所有字段</td>
</tr>
<tr>
<td>select 字段</td>
<td>查询指定字段</td>
</tr>
<tr>
<td>as</td>
<td>为字段起别名</td>
</tr>
<tr>
<td>or</td>
<td>并集（或）</td>
</tr>
<tr>
<td>and</td>
<td>交集（且）</td>
</tr>
<tr>
<td>in</td>
<td>并集（或）</td>
</tr>
<tr>
<td>like</td>
<td>模糊查询</td>
</tr>
<tr>
<td>=</td>
<td>精确查询</td>
</tr>
<tr>
<td>order by</td>
<td>排序</td>
</tr>
<tr>
<td>asc</td>
<td>升序</td>
</tr>
<tr>
<td>desc</td>
<td>降序</td>
</tr>
<tr>
<td>between and</td>
<td>区间</td>
</tr>
<tr>
<td>大于号和小于号</td>
<td>区间</td>
</tr>
<tr>
<td>is NULL</td>
<td>字段值是否为NULL</td>
</tr>
<tr>
<td>is not NULL</td>
<td>字段值是否不为NULL</td>
</tr>
<tr>
<td>count (*)</td>
<td>获取符合查询结果的总记录条数</td>
</tr>
<tr>
<td>left join</td>
<td>以左边的表中的字段进行合并查询</td>
</tr>
<tr>
<td>limit x, y</td>
<td>根据下标过滤（下标从0开始），从下标x开始（包含x），查询y条记录</td>
</tr>
</tbody>
</table>
<h2 id="使用Sql语句对数据库执行基本操作"><a href="#使用Sql语句对数据库执行基本操作" class="headerlink" title="使用Sql语句对数据库执行基本操作"></a>使用Sql语句对数据库执行基本操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">-- 这是注释</div><div class="line"></div><div class="line">-- 插入一条数据</div><div class="line">-- 写入一条数据，用户名是 小红 年龄是 13 性别是 女 地址是 深圳</div><div class="line">-- 插入数据的语法 INSERT INTO 表名 (字段1, 字段2,...) VALUES (字段1的值, 字段2的值,....)</div><div class="line">-- INSERT INTO users (name, age, gender, address) VALUES (&apos;小红&apos;, 13, &apos;女&apos;, &apos;深圳&apos;)</div><div class="line"></div><div class="line">-- 插入数据  用户名 大红 年龄26 性别 女 地址 上海</div><div class="line">-- INSERT INTO users (name, age, gender, address) VALUES (&apos;大红&apos;, 26, &apos;女&apos;, &apos;上海&apos;)</div><div class="line"></div><div class="line">-- 插入数据 用户名 escook  年龄 30</div><div class="line">-- INSERT into users (name, age)  VALUES (&apos;escook&apos;, 30)</div><div class="line"></div><div class="line">-- 修改数据</div><div class="line">-- UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</div><div class="line">-- UPDATE users set gender=&apos;男&apos; WHERE id=5</div><div class="line"></div><div class="line">-- 修改 id 为 5 的那一条数据，将 性别改为女 ， 地址改为 铁岭， isdel改为 1</div><div class="line">-- update users set gender=&apos;女&apos;, address=&apos;铁岭&apos;, isdel=1 where id=5</div><div class="line"></div><div class="line">-- 删除数据  语法：DELETE FROM 表名称 WHERE 列名称 = 值</div><div class="line">-- 删除id 为5 的这一条数据</div><div class="line">-- delete from users where id=5</div><div class="line"></div><div class="line">-- 查询 指定的列（字段）</div><div class="line">-- select name, age, gender from users</div><div class="line"></div><div class="line">-- 查询表中的所有数据  * 代表所有字段</div><div class="line">-- select * from users</div><div class="line"></div><div class="line">-- 查询表中 名字为 zs 的用户</div><div class="line">-- select id, name, age from users where name=&apos;zs&apos;</div><div class="line"></div><div class="line">-- 查询表中 name 为 zs 和 name 为 ls 的数据</div><div class="line">-- SELECT * from users where name=&apos;zs&apos; or name=&apos;ls&apos;</div><div class="line"></div><div class="line">-- 查询 表中，name 为 zs 并且 age 为 12 的数据</div><div class="line">-- select * from users where name=&apos;zs&apos; and age=12</div><div class="line"></div><div class="line">-- 查询表中，name 为zs 或者 address 为 广州 的用户</div><div class="line">-- select * from users where name=&apos;zs&apos; or address=&apos;广州&apos;</div><div class="line"></div><div class="line">-- 查询 表中 年龄 以 2开头 的用户</div><div class="line">-- select * from users where age like &apos;2%&apos;</div><div class="line"></div><div class="line">-- 查询表中，name 以 红 结尾的数据 【模糊查询用 like， 精确查询用 =】</div><div class="line">-- select * from users where name like &apos;%红&apos;</div><div class="line"></div><div class="line">-- 查询表中，名字中有 s 的用户</div><div class="line">-- select * from users WHERE name like &apos;%s%&apos;</div><div class="line"></div><div class="line">-- 查询表中所有用户，并按照 年龄 从小到大排序</div><div class="line">-- 注意：使用 order by 进行排序，默认是升序排序，升序排序用 asc  降序排序用 desc</div><div class="line">-- select * from users ORDER BY age asc</div><div class="line"></div><div class="line">-- 查询表中所有数据，按照age 降序排序</div><div class="line">-- select * from users ORDER BY age desc</div><div class="line"></div><div class="line">-- 查询表中 性别为女的用户，并按照 age 降序排序</div><div class="line">-- 注意：如果一条语句中同时涉及到了 where 和 order by ，则先写 where 后写 order by</div><div class="line">-- select * from users where gender=&apos;女&apos; ORDER BY age desc</div><div class="line"></div><div class="line">-- 查询表中，gender 不为 女 的用户</div><div class="line">-- select * from users where gender!=&apos;女&apos;</div><div class="line"></div><div class="line">-- 查询表中，所有 address 不为 null 的用户</div><div class="line">-- select * from users where address is not NULL</div><div class="line"></div><div class="line">-- 查询表中 gender 为 null 的数据</div><div class="line">-- select * from users where gender is NULL</div><div class="line"></div><div class="line">-- 查询 id 在 3 ~ 6 区间内的所有数据</div><div class="line">-- select * from users where id &gt;=3 and id &lt;=6</div><div class="line">-- 注意：BETWEEN AND 必须把小值写的前面，大值写到后面，而且查询时候，是包含这两个区间的</div><div class="line">-- select * from users where id BETWEEN 3 and 6</div><div class="line"></div><div class="line">-- 根据订单表中的用户Id，查询出来每个订单所属的用户名</div><div class="line">-- select orders.orderid, orders.ordertitle, users.name from orders LEFT JOIN users ON orders.userId=users.id</div></pre></td></tr></table></figure>
<h2 id="使用node-js代码的方式进行增删改查"><a href="#使用node-js代码的方式进行增删改查" class="headerlink" title="使用node.js代码的方式进行增删改查"></a>使用<code>node.js</code>代码的方式进行增删改查</h2><p>使用命令行执行<code>npm install mysql --save</code>安装操作MySQL数据库的模块；</p>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 导入MySQL模块</div><div class="line">var mysql = require(&apos;mysql&apos;);</div><div class="line"></div><div class="line">// 创建一个数据库连接</div><div class="line">var connection = mysql.createConnection(&#123;</div><div class="line">    user: &apos;root&apos;,</div><div class="line">    password: &apos;123456&apos;,</div><div class="line">    database: &apos;mydb&apos;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 连接数据库</div><div class="line">connection.connect();</div></pre></td></tr></table></figure>
<h3 id="基本查询操作"><a href="#基本查询操作" class="headerlink" title="基本查询操作"></a>基本查询操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var sqlStr = &apos;select * from heros&apos;;</div><div class="line">connection.query(sqlStr, function (err, results, fields) &#123;</div><div class="line">    if (err) throw err;</div><div class="line">    console.log(results.length);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="在查询语句中使用参数"><a href="#在查询语句中使用参数" class="headerlink" title="在查询语句中使用参数"></a>在查询语句中使用参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 获取客户端传递过来的查询参数</div><div class="line">var id = 8;</div><div class="line">var name = &apos;小红&apos;;</div><div class="line"></div><div class="line">// 拼接查询参数</div><div class="line">connection.query(&apos;select * from heros where id=&quot;&apos; + id + &apos;&quot; and name=&quot;&apos; + name + &apos;&quot;&apos;, function (err, results, fields) &#123;</div><div class="line">    if (err) throw err;</div><div class="line">    console.log(results.length);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="使用参数化查询语句"><a href="#使用参数化查询语句" class="headerlink" title="使用参数化查询语句"></a>使用参数化查询语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 通过问号的形式拼接查询参数，问号相当于占位符，将来，传递的真实的数据会替换掉问号所在的区域</div><div class="line">// 真实参数列表可以通过数组的形式进行传递，问号占位符所代表的参数顺序，就是实际数组中每一项的作用</div><div class="line">const sqlStr = &apos;select count(*) from heros where id=? and name=?&apos;;</div><div class="line">connection.query(sqlStr, [id, name], function (err, results, fields) &#123;</div><div class="line">    if (err) throw err;</div><div class="line">    console.log(results[0][&apos;count(*)&apos;]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 插入数据</div><div class="line">var sqlStr = &apos;insert into heros (name, gender, avatar) values (?, ?, ?)&apos;;</div><div class="line">connection.query(sqlStr, [&apos;小小&apos;, &apos;女&apos;, &apos;img/119.jpg&apos;], function(err, results, fields)&#123;</div><div class="line">    if(err) throw err;</div><div class="line">    console.log(results);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>便捷的插入数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var user = &#123; name: &apos;尼古拉斯凯奇&apos;, age: 54, gender: &apos;男&apos;, address: &apos;美国&apos; &#125;;</div><div class="line">connection.query(&apos;insert into users set ?&apos;,user , function (err, result, fields) &#123;</div><div class="line">  if (err) throw err;</div><div class="line">  console.log(result);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var sqlStr = &apos;update heros set name=?, gender=? where id=?&apos;;</div><div class="line">connection.query(sqlStr, [&apos;大大&apos;, &apos;男&apos;, 12], function(err, results, fields)&#123;</div><div class="line">    if(err) throw err;</div><div class="line">    console.log(results);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>便捷的更新数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var user = &#123;</div><div class="line">  id:6,</div><div class="line">  age:9,</div><div class="line">  name:&apos;OK&apos;</div><div class="line">&#125;</div><div class="line">connection.query(&apos;update users_copy set ? where id=?&apos;, [user, 6], function(err, results)&#123;</div><div class="line">  if(err) throw err;</div><div class="line">  console.log(results);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><h4 id="硬删除"><a href="#硬删除" class="headerlink" title="硬删除"></a>硬删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 数据硬删除，执行成功之后，匹配到的数据记录，将会从表中删除</div><div class="line">connection.query(&apos;delete from heros where id=12&apos;, function(err, results, fields)&#123;</div><div class="line">    if(err) throw err;</div><div class="line">    console.log(results);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 数据软删除，通过给表添加isdel字段，来标识数据记录是否被删除，true表示被删除，false表示未删除</div><div class="line">// 数据软删除的好处：能最大限度地保留数据的原始性</div><div class="line">connection.query(&apos;update heros set isdel=? where id=?&apos;, [true, 10], function(err, results, fields)&#123;</div><div class="line">    if(err) throw err;</div><div class="line">    console.log(results);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="用户列表案例"><a href="#用户列表案例" class="headerlink" title="用户列表案例"></a>用户列表案例</h2><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="external">MDN - JSON.stringify()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="external">MDN - FileReader</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="external">MDN - FormData</a></li>
<li><a href="http://www.expressjs.com.cn/" target="_blank" rel="external">Express - 中文网</a></li>
<li><a href="http://expressjs.com/" target="_blank" rel="external">Express - 英文官网</a></li>
<li><a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="external">Node.js 教程</a></li>
<li><a href="https://www.runoob.com/w3cnote/express-4-x-api.html" target="_blank" rel="external">菜鸟教程 - Express 4.x API 中文文档</a></li>
<li><a href="https://blog.gtwang.org/programming/learn-to-use-the-new-router-in-expressjs-4/" target="_blank" rel="external">Express.js 4.0 的路由（Router）功能用法教學</a></li>
<li><a href="https://github.com/aui/art-template" target="_blank" rel="external">github - art-template</a></li>
<li><a href="https://github.com/aui/express-art-template" target="_blank" rel="external">github - express-art-template</a></li>
<li><a href="https://github.com/mde/ejs" target="_blank" rel="external">github - ejs</a></li>
<li><a href="http://www.w3school.com.cn/sql/sql_insert.asp" target="_blank" rel="external">W3School - Sql教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Node-js-挥别&quot;&gt;&lt;a href=&quot;#Node-js-挥别&quot; class=&quot;headerlink&quot; title=&quot;Node.js - 挥别&quot;&gt;&lt;/a&gt;Node.js - 挥别&lt;/h1&gt;&lt;h2 id=&quot;express中使用art-template&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Node" scheme="http://yoursite.com/categories/Node/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node-投缘</title>
    <link href="http://yoursite.com/2017/02/20/17.Node.js%E6%8A%95%E7%BC%98/"/>
    <id>http://yoursite.com/2017/02/20/17.Node.js投缘/</id>
    <published>2017-02-20T14:33:11.000Z</published>
    <updated>2017-11-03T09:12:03.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js-投缘"><a href="#Node-js-投缘" class="headerlink" title="Node.js 投缘"></a>Node.js 投缘</h1><h2 id="并不是所有的回调函数都是异步调用的，在Node中，一般所有的回调函数，都是异步执行的；但是在浏览器中，有的回调函数，也是同步执行的。"><a href="#并不是所有的回调函数都是异步调用的，在Node中，一般所有的回调函数，都是异步执行的；但是在浏览器中，有的回调函数，也是同步执行的。" class="headerlink" title="并不是所有的回调函数都是异步调用的，在Node中，一般所有的回调函数，都是异步执行的；但是在浏览器中，有的回调函数，也是同步执行的。"></a>并不是所有的回调函数都是异步调用的，在Node中，一般所有的回调函数，都是异步执行的；但是在浏览器中，有的回调函数，也是同步执行的。</h2><ul>
<li>在vscode中每次修改js代码都要ctrl+c先关掉服务器，然后再启动</li>
</ul>
<h2 id="同步和异步的对比【非阻塞I-O和阻塞I-O】"><a href="#同步和异步的对比【非阻塞I-O和阻塞I-O】" class="headerlink" title="同步和异步的对比【非阻塞I/O和阻塞I/O】"></a>同步和异步的对比【非阻塞I/O和阻塞I/O】</h2><h3 id="异步读取文件"><a href="#异步读取文件" class="headerlink" title="异步读取文件"></a>异步读取文件</h3><h3 id="网络传输中的所碰到的问题"><a href="#网络传输中的所碰到的问题" class="headerlink" title="网络传输中的所碰到的问题"></a>网络传输中的所碰到的问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fs.readFile(__dirname+<span class="string">"/views/index.html"</span>,(err,buf)=&gt;&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> res.end(<span class="string">"404 Not found"</span>);</div><div class="line">    res.end(buf);</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 这里没有加utf-8的话拿到的就是一个二进制的buff字符串，就是一个二进制的buf字符串，但是这种事合法的。因为，无论什么内容，HTML，CSS，JS，图片，音乐，视频。。。在进行网络传输的时候，都是以二进制形式传输的。</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/aaa"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--这个路径一看就是不存在的路径，但是这个路径对于后端来说这里只是一个标识符，并不一定是真正的文件地址。但是在实际开发中，为了方便开发和智能提示的原因，所以一般都会使用真实对应的路径--&gt;</span></div></pre></td></tr></table></figure>
<p><strong>这个路径一看就是不存在的路径，但是这个路径对于后端来说这里只是一个标识符，并不一定是真正的文件地址。但是在实际开发中，为了方便开发和智能提示的原因，所以一般都会使用真实对应的路</strong><br><strong>在网页中图片地址必须和网页地址拼接才能进行二次请求，为了避免这个问题，建议之家使用/开头，而不用../的形式开头</strong></p>
<h3 id="异步嵌套读取文件"><a href="#异步嵌套读取文件" class="headerlink" title="异步嵌套读取文件"></a>异步嵌套读取文件</h3><ul>
<li>在异步读取的时候，根据谁读取的块谁就先输出，但是我们并不知道它啥时候就读取完了。异步读取文件的方法无法保证读取顺序。</li>
<li>但是为了保证程序的执行顺序，可以选择<strong>异步嵌套</strong>的方式保证，这种方式的好处是不阻塞CPU，保证运行顺序，保持代码执行的流畅性。</li>
<li>在调用Node中的异步方法的时候，无法使用try…catch捕获异步错误，只能使用异步代码回调函数中提供的err对象来判断程序执行是否出错。</li>
</ul>
<h3 id="同步读取文件"><a href="#同步读取文件" class="headerlink" title="同步读取文件"></a>同步读取文件</h3><ul>
<li>同步的代码，严格按照编写顺序执行，但是同步代码效率最低</li>
<li>同步中可以应用try–&gt;catch–&gt;finally 的方法来保证代码的顺利运行。只要有try的话执行就一定会执行finally。而错误的时候会执行catch内的代码，而finally始终都是最后执行。</li>
</ul>
<h3 id="异步和同步操作中，捕获错误的方式"><a href="#异步和同步操作中，捕获错误的方式" class="headerlink" title="异步和同步操作中，捕获错误的方式"></a>异步和同步操作中，捕获错误的方式</h3><h2 id="Node-中的模块化"><a href="#Node-中的模块化" class="headerlink" title="Node 中的模块化"></a>Node 中的模块化</h2><ul>
<li>生活中的模块化例如活动板房，笔记本电脑的设备结构等都可以理解为模块化。</li>
</ul>
<h3 id="什么是程序开发中的模块及好处"><a href="#什么是程序开发中的模块及好处" class="headerlink" title="什么是程序开发中的模块及好处"></a>什么是程序开发中的模块及好处</h3><ul>
<li>什么是程序开发中的模块化：把一些功能类似的代码，封装到一个单独的文件中去，这些单独抽离出来的代码文件，就能够提供各种各样好用的功能；这种通过代码功能分割文件的方式，叫做程序中的模块化；</li>
<li>好处：保证了每个文件的功能（职能）单一；需要什么特定的功能，直接调用某一个特定的模块；对将来程序开发和维护都有好处！同时也解决了全局变量污染的问题，因为每个模块都有独立的作用域；</li>
<li>require 的模块化开发是基于是AMD，异步地去加载JS文件</li>
<li>Node 的模块化开发是基于CMD，CommomJS同步的去加载JS文件</li>
</ul>
<h3 id="模块包装器"><a href="#模块包装器" class="headerlink" title="模块包装器"></a>模块包装器</h3><ul>
<li>在执行模块代码之前，Node.js会使用一个如下的函数包装器将其包装:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports,require,module,__filename,__dirname</span>)</span>&#123;</div><div class="line">    <span class="comment">// 模块的代码实际上在这里</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>通过这样做，Node.js实现了一下几点:  </p>
<ul>
<li>它保持了顶层的变量(用var、const或let定义)作用在模块范围内，而不是全局对象。</li>
<li>它有助于提供一些看似全局的但实际上是模块特定的变量，例如：<ul>
<li>实现者可以用于从模块中到处置的module和exports对象。</li>
<li>包含模块绝对文件名和目录路径的快捷变量 <strong>filename 和 </strong>dirname。</li>
</ul>
</li>
</ul>
<h3 id="【★★】Node-中如何实现模块化"><a href="#【★★】Node-中如何实现模块化" class="headerlink" title="【★★】Node 中如何实现模块化"></a>【★★】Node 中如何实现模块化</h3><p>在Node中基于CommonJS规范，通过三个东西实现模块化：</p>
<ul>
<li>module：表示一个模块，在Node中，最常见的模块，就是一个个的JS文件！</li>
<li>require：作用是加载其他模块用的；在一个JS文件中，如何引用其他JS文件中的成员呢？就是用require</li>
<li>exports：在Node的模块中，如果这个模块需要向外暴露一些成员，供其他JS模块使用，那么，需要使用exports向外暴露这些成员！</li>
</ul>
<blockquote>
<p>注意：Node 中的模块化，主要解决的JS文件之间的相互依赖关系！</p>
</blockquote>
<h3 id="【理解】Node-中的模块的分类"><a href="#【理解】Node-中的模块的分类" class="headerlink" title="【理解】Node 中的模块的分类"></a>【理解】Node 中的模块的分类</h3><p>node由三部分组成：ECMAScript + 核心API + 第三方等API</p>
<h4 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h4><ul>
<li>什么是核心模块：官方，发现一些功能模块使用非常频繁，然后，官方把这些模块，编译成了二进制可执行文件，然后打包到了Node的安装包中；所以，这些核心模块就已经随着安装Node时候，被安装到了本地；</li>
<li>如何使用核心模块<br>　使用require（‘核心模块的名称’）；  require(‘fs/os/http’)</li>
</ul>
<h4 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h4><ul>
<li>什么是第三方模块：出了官方提供的好用的核心模块之外，我们程序员发现，还有一些使用也很频繁的代码和方法，一些牛逼的团体、个人、公司，开发出了好用的模块，通过NPM官网，托管出去，供其他人下载使用的这些模块；统称为第三方模块；</li>
<li>如何使用第三方模块<br>　－　通过moment这个第三方模块，来介绍如何使用一个第三方模块；</li>
<li>第三方模块的使用方式：<ol>
<li>先使用npm下载这个模块！【注意：在安装第三方模块的时候，安装的名字，就是你在require时候导入的名字】</li>
<li>使用require导入这个第三方模块！</li>
<li>通过官方文档，试着去使用这个第三方模块！</li>
<li>注意：无论是核心模块、还是第三方模块，都是通过 <code>标识符名称</code>来引用这个模块的！</li>
</ol>
</li>
</ul>
<h4 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h4><ul>
<li>什么是用户模块：程序员自己定义的JS文件，统统数据用户模块！</li>
<li>用户模块向外导出成员的两种方式：<ul>
<li>第一种方式：使用global对象，相当于浏览器中的window对象<ul>
<li><ol>
<li>全局变量污染，</li>
</ol>
</li>
<li><ol>
<li>不知道成员是从哪个模块中暴露 出去的</li>
</ol>
</li>
</ul>
</li>
<li>推荐使用Node提供的exports方式向外暴露成员</li>
<li>模块外暴露成员的第一种方式为global<ul>
<li>缺点： <ul>
<li>全局变量的污染问题</li>
<li>无法知道成员是从哪个模块暴露出来的,解决的方法是global.m1.a</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="exports-和-module-exports-的区别"><a href="#exports-和-module-exports-的区别" class="headerlink" title="exports 和 module.exports 的区别"></a>exports 和 module.exports 的区别</h3><ol>
<li><p>通过 module.exports 可以使用 . 的形式追加属性，也可以使用 等号 直接赋值的形式导出成员；</p>
</li>
<li><p>exports 只能通过 . 的形式追加属性；不能使用 等号 直接赋值的形式！</p>
</li>
<li><p>注意： 在一个 module 中，最终向外暴露的成员，以 module.exports 指向的对象为准！</p>
</li>
<li><p>在一个模块中，尽量不要混合使用 <code>module.exports</code> 和 <code>exports</code></p>
</li>
</ol>
<h3 id="【了解】模块加载规则"><a href="#【了解】模块加载规则" class="headerlink" title="【了解】模块加载规则"></a>【了解】模块加载规则</h3><ol>
<li>优先从缓存中加载<ul>
<li>使用 <code>delete require.cache[__filename]</code> 来防止模块被缓存，但是一般不建议这么用，因为模块的缓存能够提高运行效率；</li>
</ul>
</li>
<li>加载核心模块:优先从缓存中加载；如果缓存中没有的话，再去执行加载核心模块！</li>
<li><p>自己的模块:优先从缓存中加载；如果缓存中没有的话，再去执行加载用户模块！</p>
<ul>
<li>用户模块的查找规则：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">用户模块的查找规则：</div><div class="line">如果不写后缀名，则先严格按照给定的文件名去查找模块并加载执行；</div><div class="line">index   -&gt;  index.js  -&gt;   index.json    -&gt;  index.node</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>第三方模块查找规则：</p>
<ol>
<li>node首先，查看项目根目录中有没有 <code>node_modules</code> 文件夹</li>
<li>查找 <code>node_modules</code> 文件夹中，有没有和第三方模块名称一致的文件夹</li>
<li>在模块对应的文件夹中，查找有没有 <code>package.json</code> 这个文件</li>
<li>在 <code>package.json</code> 文件中，查找有没有 <code>main</code> 属性</li>
<li>如果有 <code>main</code> 属性，并且 <code>main</code> 属性指向的路径存在，那么就尝试加载这个路径指定的文件！</li>
<li>如果 <code>package.json</code> 文件中，没有 <code>main</code> 属性，或者 <code>main</code> 属性指向的路径不存在，或者没有<code>package.json</code> 文件， 那么，Node尝试加载 模块根目录中 <code>index</code> 相关文件：<code>index.js</code> -&gt; <code>index.json</code> -&gt; <code>index.node</code></li>
<li>如果在<code>node_modules</code>文件夹中，找不到对应的模块文件夹，或者在项目根目录中根本没有<code>node_modules</code>文件夹，则向上一层文件夹中去查找，查找规则同上！</li>
<li>如果上一层目录中也没有查找到，则再向上翻一层去查找，直到找到当前项目所在的盘符根目录为止！</li>
<li>如果找到了盘符根目录还找不到，则报错：<code>cannot find module ***</code></li>
</ol>
</li>
</ol>
<h2 id="结合art-template模板引擎在服务器端渲染页面"><a href="#结合art-template模板引擎在服务器端渲染页面" class="headerlink" title="结合art-template模板引擎在服务器端渲染页面"></a>结合art-template模板引擎在服务器端渲染页面</h2><p><a href="https://aui.github.io/art-template/docs/" target="_blank" rel="external">art-template官方文档</a></p>
<h2 id="【了解】服务端渲染和客户端渲染的对比"><a href="#【了解】服务端渲染和客户端渲染的对比" class="headerlink" title="【了解】服务端渲染和客户端渲染的对比"></a>【了解】服务端渲染和客户端渲染的对比</h2><p><a href="https://www.cnblogs.com/" target="_blank" rel="external">博客园官网</a></p>
<ol>
<li>服务器端渲染<ul>
<li>特点：Node服务器先读取模板页面，再获取要渲染的数据，然后直接在服务器端把完整的页面渲染拼接好，然后通过网络一次性的把结果发送给浏览器去显示！【注意：通过服务器端渲染，在网络中传输的是一个真正页面】</li>
<li>优点：请求次数少，速度快，对SEO友好</li>
<li>缺点：服务器渲染压力大【在后端可以通过缓存机制去解决】</li>
</ul>
</li>
<li>客户端渲染<ul>
<li>特点：先访问服务器获取到模板页面，然后再通过Ajax获取要渲染的数据，拿到这两者之后，再客户端调用模板引擎，渲染得到模板字符串，然后通过JS的方式，把结果展示到页面上！【真正的页面是在客户端浏览器中怼出来的，在进行网络传输的时候，第一次传输的是模板页面，第二次传输的是数据】</li>
<li>优点：减轻了服务器端的渲染压力</li>
<li>缺点：请求次数多，用户体验可能没有服务器端渲染好（白屏效果）；对SEO不友好</li>
</ul>
</li>
</ol>
<h2 id="使用nodemon来自动重启Node服务"><a href="#使用nodemon来自动重启Node服务" class="headerlink" title="使用nodemon来自动重启Node服务"></a>使用<code>nodemon</code>来自动重启Node服务</h2><ol>
<li>运行<code>npm i nodemon -g</code>全局安装模块</li>
<li>使用方式 和 <code>node</code> 完全一样：<ul>
<li><code>node 要执行文件的路径</code></li>
<li><code>nodemon 要执行文件的路径</code></li>
</ul>
</li>
</ol>
<h2 id="文件列表小案例"><a href="#文件列表小案例" class="headerlink" title="文件列表小案例"></a>文件列表小案例</h2><h2 id="获取文件的属性"><a href="#获取文件的属性" class="headerlink" title="获取文件的属性"></a>获取文件的属性</h2><h2 id="【重点】在优化前-先封装一个根据指定路径读取文件内容的方法"><a href="#【重点】在优化前-先封装一个根据指定路径读取文件内容的方法" class="headerlink" title="【重点】在优化前, 先封装一个根据指定路径读取文件内容的方法"></a>【重点】在优化前, 先封装一个<code>根据指定路径读取文件内容</code>的方法</h2><h2 id="【重点】将读取文件夹的方法抽离出来，同时对error进行处理"><a href="#【重点】将读取文件夹的方法抽离出来，同时对error进行处理" class="headerlink" title="【重点】将读取文件夹的方法抽离出来，同时对error进行处理"></a>【重点】将读取文件夹的方法抽离出来，同时对error进行处理</h2><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ol>
<li><a href="https://aui.github.io/art-template/" target="_blank" rel="external">art-template 官方文档</a></li>
<li><a href="http://www.infoq.com/cn/articles/es6-in-depth-template-string" target="_blank" rel="external">ES6 - 模板字符串</a></li>
<li><a href="http://www.cnblogs.com/xljzlw/p/3694861.html" target="_blank" rel="external">js中的数组对象排序</a></li>
<li><a href="https://github.com/i5ting/tocmd.npm" target="_blank" rel="external">i5ting/tocmd.npm 将MD转换为HTML</a></li>
<li><a href="https://www.zhihu.com/question/20298345" target="_blank" rel="external">JavaScript 语句后应该加分号么？</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Node-js-投缘&quot;&gt;&lt;a href=&quot;#Node-js-投缘&quot; class=&quot;headerlink&quot; title=&quot;Node.js 投缘&quot;&gt;&lt;/a&gt;Node.js 投缘&lt;/h1&gt;&lt;h2 id=&quot;并不是所有的回调函数都是异步调用的，在Node中，一般所有的回调函
    
    </summary>
    
      <category term="Node" scheme="http://yoursite.com/categories/Node/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node-初识</title>
    <link href="http://yoursite.com/2017/02/11/16.Node.js%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2017/02/11/16.Node.js初识/</id>
    <published>2017-02-11T07:33:21.000Z</published>
    <updated>2017-11-03T09:12:09.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js初识"><a href="#Node-js初识" class="headerlink" title="Node.js初识"></a>Node.js初识</h1><h2 id="学习Node-js时候的建议"><a href="#学习Node-js时候的建议" class="headerlink" title="学习Node.js时候的建议"></a>学习Node.js时候的建议</h2><ol>
<li>前端和后端的知识体系不同！不要使用前端的思维方式去学习后端开发！</li>
<li><strong>学习Node.js阶段，把自己当作后端开发人员！</strong></li>
<li>课堂上对重点的知识做笔记，利用一切时间练习课堂代码；晚上抽半个小时梳理总结今天所学知识点；整理今天的笔记！</li>
<li>每天吃饭睡觉走大街上，都要在脑海中闪现今天学习的知识点</li>
<li>学习方式：×××知识点是什么，怎么用，为什么要用它，它解决了什么问题，这个问题如果在公司项目开发中遇到了，我能不能根据自己的理解使用出来</li>
</ol>
<h2 id="什么是前端和后端"><a href="#什么是前端和后端" class="headerlink" title="什么是前端和后端"></a>什么是前端和后端</h2><ol>
<li>前端主要工作：写页面、样式、JS特效、和后端的数据交互、借助于一些前端的框架实现SPA应用；<ul>
<li>前端主要负责页面展示性的东西，用户所能看到的任何东西，都是前端的工作；</li>
</ul>
</li>
<li>后端主要工作：操作数据库、给前端暴露数据接口、</li>
<li>前后端协作流程：后端为我们暴露接口、前端根据后端提供的数据接口API和【文档】、进行页面数据的渲染；</li>
</ol>
<p>在公司中配环境：自己用的顺手的编辑器、安装下Node和NPM、安装Git或SVN、浏览器<br>下载代码到本地；<br>3天左右的时间熟悉项目（后端架构（Java、.NET、PHP）、前端的架构（NG、Vue、React、Jquery+AJax+模板引擎）、业务（熟悉业务、如果不熟悉，就要问相关负责人）、技术）</p>
<h2 id="Javascript-的起源"><a href="#Javascript-的起源" class="headerlink" title="Javascript 的起源"></a>Javascript 的起源</h2><p>语言能直接运行吗？？<br>语言只是一个写代码的规范，其实我们写的任何代码，只是一坨字符串而已；<br>语言如果想要发挥作用，必须有有个对应的解析器</p>
<p>Java  C#  PHP</p>
<ol>
<li>诞生：JS的诞生和一个公司有关，有一个网景公司；当时网速只有20~30KB（电话线），当时，就是为了进行客户端验证，为了减少不必要的网络请求，提高网络效率，网景公司决定研究一门语言，来解决这个问题；JS作者在10天之内，就把这门语言写出来了，叫做LiveScript，为了搭上Java这般顺风车，就把LiveScript改名为Javascript；</li>
<li>浏览器中的一战：微软发现浏览器市场很火，然后就自己开发了一款浏览器【IE】；为了推广自己的IE浏览器，把IE捆绑到了Windows操作系统中；JScript<ul>
<li>一战胜利的果实：ECMAScript标准的确立；就是一个语言规范；只规定了如何进行分支判断、如何定义变量、如何定义方法…..</li>
</ul>
</li>
<li>短暂的和平期：IE6【微软发现自己已经天下无敌了，然后就把IE6的开发团队给解散了！】在和平期间，JS这门语言主要做什么：表单验证、简单的特效、狗皮膏药（当时被称为脚本语言）</li>
<li>二战：【主角：谷歌、IE、火（浴火重生）狐】谷歌在2008年，借助于AJax，开始火起来了！一方面提升渲染引擎的效率、另一方面，提升JS解析引擎的效率，最终，二战以谷歌的胜利结束；谷歌有了一款世界上效率最快的JS解析引擎，叫做chrome V8引擎；</li>
<li>注意：谷歌的 v8 引擎是用来解析执行JS代码的；</li>
</ol>
<h2 id="Node-js-的起源"><a href="#Node-js-的起源" class="headerlink" title="Node.js 的起源"></a>Node.js 的起源</h2><p><a href="http://blog.csdn.net/u012028371/article/details/54884056" target="_blank" rel="external">nodejs的历史由来</a></p>
<ul>
<li>作者，之前主要是做高性能服务器维护的；高性能的服务器有哪些<strong>必要的条件</strong>；必须要是<strong>异步非阻塞的</strong>、<strong>基于事件驱动的</strong>；</li>
<li>作者在分析了上面两条基本条件之后，就开始研发高性能服务器！</li>
<li><code>C,C++</code>,<code>Java,C#</code>,<code>Javascript</code>，前三种是同步的，而javascript天生就是异步的</li>
<li>对于程序员来说，如果同时提供了同步和异步两种编程方式，程序员肯定会选择同步；</li>
<li>作者选择<code>Javascript</code>最主要的原因，就是这门语言是<code>单线程的</code></li>
<li>多线程：程序员能主动开启子线程的语言，就叫做多线程的语言；<code>Thread td = new Thread();</code></li>
<li>作者最终，选择的语言是Javascript、解析引擎是V8；免费、开源、由谷歌团队进行维护更新</li>
<li>刚开始，作者写出来的这个东西叫做<code>web.js</code>;后来，随着项目扩大和功能的完善，作者发现这款产品，不仅能做高性能的服务器，还能做许多事情，比如可以用这个东西去做前端包管理；于是就改名叫做<code>Node.js</code>;</li>
<li>像前端需要好用的工具，都是使用<code>node.js</code>开发出来的！</li>
</ul>
<h2 id="ECMAScript、浏览器中的Javascript、Node中的Javascript"><a href="#ECMAScript、浏览器中的Javascript、Node中的Javascript" class="headerlink" title="ECMAScript、浏览器中的Javascript、Node中的Javascript"></a>ECMAScript、浏览器中的Javascript、Node中的Javascript</h2><ul>
<li>ECMAScript：语言规范；定义了如何定义变量、分支语句、函数、对象、内置对象；（ECMAScript语言规范就是一本书，这本书中，通过详细的规范，定义了这门语言中一些必要的特性；）</li>
<li>浏览器中的Javascript：<ul>
<li>浏览器中的Javascript组成部分：DOM +  BOM + ECMAScript核心</li>
</ul>
</li>
<li>Node中的Javascript：Node中的JS，剔除了浏览器中扩展的DOM和BOM这两套API；在Node中，没有浏览器的概念，所以Node不需要DOM 和 BOM， Node中只有一个V8JS解析引擎；<ul>
<li>Node中的Javascript组成部分：ECMAScript核心 + 核心API模块 + 一些第三方API模块</li>
</ul>
</li>
</ul>
<blockquote>
<p>思考：为什么经常听说JS有兼容性，而很少听说Java或C#有兼容性？<br>答：总的来说就是解析引擎的问题，java或者c#只有一种解析引擎，所以不存在兼容性问题，而JS的兼容性出现在各个解析引擎上了，不同厂商的解析引擎不一样。</p>
</blockquote>
<h2 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js"></a>什么是Node.js</h2><ul>
<li><strong>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</strong><ul>
<li>我们使用JS写的Node代码，说白了，只是单纯的字符串而已；</li>
<li>如果想要执行这些写好的代码，必须要有一个解析执行环境，这个环境就是chrome 的 V8 引擎；</li>
</ul>
</li>
</ul>
<ul>
<li><strong>Node.js 使用了一个事件驱动、非阻塞式 I/O （input and output 输入和输出）的模型，使其轻量又高效。</strong><ul>
<li>事件驱动：当触发某个事件的时候，执行事件中指定的代码！</li>
<li>非阻塞式 I/O 的模型：采用非阻塞的操作，能够提高CPU处理的效率！代码表现形式是：会经常写回调函数。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</strong><ul>
<li>npm由两层含义：首先它表示NPM的官网；其次，表示NPM这个包管理工具，能够方便我们从官网下载包；</li>
<li>先使用<code>npm init -y</code>初始化一下包管理文件<code>package.json</code>，将来所有安装的包，都会记录到这个文件中</li>
<li>使用<code>npm install 包名 --save/--save-dev</code>去安装包；其中，<code>install</code>可以简写成<code>i</code>;</li>
<li><code>--save</code>表示把包安装到部署依赖中（在开发和部署上线都需要使用的包）； <code>--save-dev</code>表示安装到开发依赖（只在项目开发阶段需要用到的包）；</li>
<li><code>--save</code>可以简写成<code>-S</code>；<code>--save-dev</code>可以简写成<code>-D</code>;</li>
<li><code>npm uninstall 包名 --save/--save-dev</code>或者<code>npm remove 包名 --save/--save-dev</code></li>
<li><code>npm i webpack -g</code>,其中，<code>-g</code>表示全局安装某些包，通过<code>-g</code>安装的包都在<code>C:\Users\用户名\AppData\Roaming\npm</code>下面</li>
<li>使用 -g 安装的包都存放到了<code>C:\Users\自己的用户名\AppData\Roaming\npm</code>目录中；全局安装的包可以通过 cmd 命令行在任何地方使用；</li>
<li>如果只需要安装项目运行的依赖，可以运行<code>npm i --production</code></li>
</ul>
</li>
</ul>
<ul>
<li>NPM 和 （Github、码云） 和 Git之间的关系<ul>
<li>NPM是包管理平台（里面托管了各种各样的第三方包）</li>
<li>Github、码云 代码托管平台（托管了各种各样的代码仓库）</li>
<li>Git是用来对代码进行分支版本管理</li>
</ul>
</li>
</ul>
<blockquote>
<p>总结：Node.js 就是一个Javascript的服务端运行环境（依赖于Chrome 的V8引擎解析执行JS代码），为Javascript提供了服务器端编程的能力！</p>
</blockquote>
<h2 id="Node-js-可以做哪些事情"><a href="#Node-js-可以做哪些事情" class="headerlink" title="Node.js 可以做哪些事情"></a>Node.js 可以做哪些事情</h2><ul>
<li>【★】Node可以作为前端的一个工具去使用，通过NPM安装好用的工具；Node可以开发一些前端的工具【i5ting_toc】</li>
<li>【★】Node能做服务器</li>
<li>【★】Node还可以操作数据库并对外提供数据接口</li>
</ul>
<h2 id="【★★】为什么要学习Node-js"><a href="#【★★】为什么要学习Node-js" class="headerlink" title="【★★】为什么要学习Node.js"></a>【★★】为什么要学习Node.js</h2><ul>
<li>从企业角度分析：<ul>
<li>企业对<code>一专多能</code>人才的需求：怎么才能最大限度的压榨员工；省钱</li>
<li>多高性能服务器的需求：怎么才能最大限度的压榨服务器；</li>
<li>Node适合做快速的网络请求，但是不适合做大数据业务逻辑的处理；（因为node是多线程的，太多的逻辑处理会导致线程阻塞）</li>
</ul>
</li>
<li>从自身角度分析：<ul>
<li>挣钱；</li>
<li>对将来职业生涯有好处：学了Node之后，为我们构建了后端的知识体系，无论将来你会不会做后端的Node开发，但是，起码你已经构建了完整的前后端知识体系！</li>
<li>后面学到的任何新技术：Vue.js，React,React-Native都是基于Node的！包括后面要学的一个构建工具<code>webpack</code>！</li>
</ul>
</li>
</ul>
<h2 id="在Node中执行相关的JS代码的两种方式"><a href="#在Node中执行相关的JS代码的两种方式" class="headerlink" title="在Node中执行相关的JS代码的两种方式"></a>在Node中执行相关的JS代码的两种方式</h2><ol>
<li><p>直接在命令行中输入<code>node</code>，进入Node的<code>REPL</code>运行环境：</p>
<ul>
<li>R：Read：读取用户输入的字符串内容</li>
<li>E：Evaluate：把用户输入的字符串，当作JS代码去解析执行</li>
<li>P：Print：打印输出Evaluate解析的结果</li>
<li>L：Loop：进入下一次循环</li>
</ul>
</li>
<li><p>将Node代码写入到一个js文件中，然后通过<code>node 要执行的JS文件路径</code>去运行Node代码</p>
</li>
</ol>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>为什么可以通过命令行形式，直接启动<code>node</code>或者<code>notepad</code>呢？？？<br>注意：每当修改了环境变量之后，需要重新启动命令窗口！</p>
<h3 id="什么是环境变量"><a href="#什么是环境变量" class="headerlink" title="什么是环境变量"></a>什么是环境变量</h3><p>Path环境变量的作用：能够让我们通过  命令行的形式  快速启动一个应用程序；</p>
<h3 id="用户变量和系统变量的区别"><a href="#用户变量和系统变量的区别" class="headerlink" title="用户变量和系统变量的区别"></a>用户变量和系统变量的区别</h3><p>用户变量：用户变量是属于每一个用户的，用户之间的用户变量是私有的，不共享的；<br>系统变量：系统变量是共享的，只能用户能够登录这台电脑，那么就能访问系统变量中的任何东西！【将来在配置环境变量的时候，推荐大家配置到系统变量中！】</p>
<h3 id="配置环境变量的两种方式"><a href="#配置环境变量的两种方式" class="headerlink" title="配置环境变量的两种方式"></a>配置环境变量的两种方式</h3><ol>
<li>第一种方式：直接把路径添加到path环境变量中；</li>
<li>第二种方式：先在环境变量中创建一个新变量，名字类似于：<code>ZOOM_HOME</code>这样，值是我们程序的根目录；然后，再把这个变量名，引用到 <code>Path</code>环境变量中，类似于：<code>%ZOOM_HOME%</code></li>
</ol>
<h2 id="Path变量的查找规则"><a href="#Path变量的查找规则" class="headerlink" title="Path变量的查找规则"></a>Path变量的查找规则</h2><ol>
<li>先从当前的目录中查找有没有这个应用程序，如果有，则直接运行，如果没有，则去系统环境变量中，path环境变量下挨个查找对应的文件夹，如果在对应文件夹中能找到，则直接运行，如果找不到，最终报错！</li>
</ol>
<h2 id="【★★】使用fs模块来操作文件"><a href="#【★★】使用fs模块来操作文件" class="headerlink" title="【★★】使用fs模块来操作文件"></a>【★★】使用fs模块来操作文件</h2><ol>
<li><p>fs.readFile</p>
</li>
<li><p>fs.writeFile</p>
</li>
<li><p>fs.appendFile</p>
</li>
</ol>
<h2 id="【★★★】fs模块中路径问题"><a href="#【★★★】fs模块中路径问题" class="headerlink" title="【★★★】fs模块中路径问题"></a>【★★★】fs模块中路径问题</h2><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h2 id="Node中的使用http模块创建最基本的web服务器"><a href="#Node中的使用http模块创建最基本的web服务器" class="headerlink" title="Node中的使用http模块创建最基本的web服务器"></a>Node中的使用http模块创建最基本的web服务器</h2><p>之前有没有接触过Web服务器？？？<br>其实，PHPStudy中集成了一个叫做<code>Apache</code>的软件；这个软件就是一个服务器软件，能够托管一个网站；<br>其实在Node中，并没有类似于<code>Apache</code>这样软件；我们可以通过简单的几行代码，写出一个Web服务器！</p>
<h2 id="【★★★】HTTP协议中的-请求-处理-响应-模型"><a href="#【★★★】HTTP协议中的-请求-处理-响应-模型" class="headerlink" title="【★★★】HTTP协议中的 请求 - 处理 - 响应 模型"></a>【★★★】HTTP协议中的 <code>请求 - 处理 - 响应</code> 模型</h2><h2 id="【★★】step-by-step-构建HTTP服务器"><a href="#【★★】step-by-step-构建HTTP服务器" class="headerlink" title="【★★】step by step 构建HTTP服务器"></a>【★★】step by step 构建HTTP服务器</h2><h3 id="升级1：根据不同的URL地址响应不同HTML消息"><a href="#升级1：根据不同的URL地址响应不同HTML消息" class="headerlink" title="升级1：根据不同的URL地址响应不同HTML消息"></a>升级1：根据不同的URL地址响应不同HTML消息</h3><h3 id="升级2：根据不同URL地址-响应不同的页面"><a href="#升级2：根据不同URL地址-响应不同的页面" class="headerlink" title="升级2：根据不同URL地址 - 响应不同的页面"></a>升级2：根据不同URL地址 - 响应不同的页面</h3><h3 id="升级3：在响应不同页面的同时响应静态资源（css、图片、js）"><a href="#升级3：在响应不同页面的同时响应静态资源（css、图片、js）" class="headerlink" title="升级3：在响应不同页面的同时响应静态资源（css、图片、js）"></a>升级3：在响应不同页面的同时响应静态资源（css、图片、js）</h3><h3 id="【★★★】【难点】升级4：根据不同URL地址-响应不同文件的改造"><a href="#【★★★】【难点】升级4：根据不同URL地址-响应不同文件的改造" class="headerlink" title="【★★★】【难点】升级4：根据不同URL地址 - 响应不同文件的改造"></a>【★★★】【难点】升级4：根据不同URL地址 - 响应不同文件的改造</h3><h3 id="【★★】【难点】网页中资源请求路径问题"><a href="#【★★】【难点】网页中资源请求路径问题" class="headerlink" title="【★★】【难点】网页中资源请求路径问题"></a>【★★】【难点】网页中资源请求路径问题</h3><ol>
<li>资源请求路径（html,css,js,image），对于后端来说，<strong>只一个标识符而已</strong>，<strong>并不一定</strong>非要对应实际的文件物理路径</li>
<li>但是，为了开发方便（说白了就是为了写HTML的时候有路径只能提示），我们一般都期望把资源的请求路径和实际文件的物理路径对应上</li>
<li>一定要区分html中书写的路径标识符 <code>../</code>    <code>./</code>  和 <code>/</code> <strong>在浏览器中</strong>代表含义！</li>
</ol>
<h3 id="在Node中执行相关的js代码的两种方式"><a href="#在Node中执行相关的js代码的两种方式" class="headerlink" title="在Node中执行相关的js代码的两种方式"></a>在Node中执行相关的js代码的两种方式</h3><ol>
<li>直接在命令行中输入”node”,进入Node的”REPL”运行环境：<ul>
<li>R：Read：读取用户输入的字符串内容</li>
<li>E：Evaluate：把用户输入的字符串，当做JS代码去解析执行</li>
<li>P：Print：打印输出Evaluate解析的结果</li>
<li>L: Loop: 进入下一次循环</li>
</ul>
</li>
<li>将Node代码写入到一个js文件中，然后通过’node 要执行的JS文件路径’去运行Node代码 </li>
<li>安装node会在本地根目录下生成一个node_modules文件夹，这个文件夹里面有很多的包，占了项目的大部分空间。而解决的方法是在package.json(在项目目录中线生成这个文件再安装其他的包)文件中记录所安装过的包，这样发送项目的时候就直接发送其他文件就可以了(除了nodemodules）文件夹，这样在其他ten运行的代码的时候只需要根据package.json安装包就可以运行了。</li>
<li>package.json一定要先运行，然后在安装包。如果没运行的话，在安装包的时候会默认安装到管理员目录的nodemodules文件夹中。npm在使用的时候不要直接拷贝，要用npm先初始化<h3 id="代码总结"><a href="#代码总结" class="headerlink" title="代码总结"></a>代码总结</h3></li>
</ol>
<ul>
<li>node中的中括号代表参数可选</li>
<li>npm i gulp –save-dev 简写形式是npm i gulp -D,这个的意思是把它安装到项目的开发依赖，因为这个是工具，上线之后就不需要了，dev的意思是develop</li>
<li>npm i gulp –save 可以简写为-S</li>
<li>npm i 简写，这样没有指定，npm会先去package中去找，然后下载所有package记录的包</li>
<li>npm remove jquery -S 删除包</li>
<li>npm uninstall gulp -D 卸载</li>
<li>只想安装上线所需要的包的话可以使用命令npm i –production 安装到产品模式中去</li>
</ul>
<h4 id="使用fs系统模版读取文件"><a href="#使用fs系统模版读取文件" class="headerlink" title="使用fs系统模版读取文件"></a>使用fs系统模版读取文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.导入核的OS模块</span></div><div class="line"><span class="keyword">var</span> os=<span class="built_in">require</span>(<span class="string">"os"</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">require中给定核心模块哦的标识符，就能导入我们需要引用的核心模块了</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="comment">// 2. 调用os的cpus方法查看cpu信息</span></div><div class="line"><span class="keyword">var</span> result=os.cpus;</div><div class="line"><span class="built_in">console</span>.log(result);</div><div class="line"><span class="comment">// 在Node中，如果要使用核心模块，实现某些功能，总共分为</span></div><div class="line"><span class="comment">// 1.使用require("核心模块标识符")</span></div><div class="line"><span class="comment">// 2.荣国官方提供的API，调用模块中对应的方法，实现我们的功能</span></div></pre></td></tr></table></figure>
<h4 id="使用os模块查看cpu信息"><a href="#使用os模块查看cpu信息" class="headerlink" title="使用os模块查看cpu信息"></a>使用os模块查看cpu信息</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.使用require导入fs系统模块</span></div><div class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="comment">// 2.调用fs 模块中相关的方法读取(read)文件(file)</span></div><div class="line"><span class="comment">/* fs.readFile("./info.txt",function(err,buf)&#123;</span></div><div class="line"><span class="comment">	console.log(buf.toString());</span></div><div class="line"><span class="comment">&#125;)*/</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">使用fs.readFile可以读取指定的文件，它接受三个参数</span></div><div class="line"><span class="comment">参数1：要读取文件的路径[string]</span></div><div class="line"><span class="comment">参数2：可选，执行要以哪种编码格式读取指定的文件内容[string]</span></div><div class="line"><span class="comment">参数3：回调函数，表示当文件读取OK之后，执行什么进一步操作</span></div><div class="line"><span class="comment">*/</span> </div><div class="line">&lt;!--fs.readFile(<span class="string">"./info1.txt"</span>,<span class="string">"utf-8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,dataStr</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err.instanceOf <span class="built_in">Error</span>);</div><div class="line">    &lt;!--这里输出是<span class="literal">true</span>，err可以看成是<span class="built_in">Error</span>的实例属性--&gt;</div><div class="line">&#125;)--&gt;</div><div class="line">fs.readFile(__dirname+<span class="string">"/info.txt"</span>,<span class="string">"utf-8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,dataStr</span>)</span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * if(err)&#123;</span></div><div class="line"><span class="comment">	 *  报错了</span></div><div class="line"><span class="comment">	 * console.log("读取文件失败，错误信息为："+err.message);</span></div><div class="line"><span class="comment">	 * &#125;else&#123;</span></div><div class="line"><span class="comment">	 * 成功了</span></div><div class="line"><span class="comment">	 * console.log(dataStr);</span></div><div class="line"><span class="comment">	 * &#125;</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">"读物文件失败，错误信息为:"</span>+err.message);</div><div class="line">	<span class="built_in">console</span>.log(dataStr);</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(__filename);</div></pre></td></tr></table></figure>
<h4 id="使用fs系统模版写入文件"><a href="#使用fs系统模版写入文件" class="headerlink" title="使用fs系统模版写入文件"></a>使用fs系统模版写入文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fa=<span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 调用fs.writeFile写入文件</span></div><div class="line"><span class="comment"> * 参数1：要写入的文件路径</span></div><div class="line"><span class="comment"> * 参数2：要写入的内容</span></div><div class="line"><span class="comment"> * 参数3：可选的options，默认的写入，编码格式是utf-8</span></div><div class="line"><span class="comment"> * 参数4：写入完成后的回调，只有一个err对象作为参数</span></div><div class="line"><span class="comment"> * fs.write("./info2.text","卡牌大师",function(err)&#123;</span></div><div class="line"><span class="comment"> * 	if(err) return </span></div><div class="line"><span class="comment"> * 	console.log("报错了！");</span></div><div class="line"><span class="comment"> *  console.log("写入OK");</span></div><div class="line"><span class="comment"> * &#125;)</span></div><div class="line"><span class="comment"> */</span> </div><div class="line">fs.writeFile(<span class="string">"./info2.txt"</span>,<span class="string">"卡牌大师"</span>,(err)=&gt;&#123;</div><div class="line">	<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">"报错了！"</span>);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"写入OK"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fs.readFile(path[,options],callback);</div><div class="line"><span class="comment">// 这里中括号内的参数代表参数可有可无</span></div></pre></td></tr></table></figure>
<ul>
<li>在Node中，如果要使用核心模块，实现某些功能，总共分为<ul>
<li>1.使用require(“核心模块标识符”)</li>
<li>通过官方提供的API，调用模块中对应的方法，实现我们的功能</li>
</ul>
</li>
<li>注意：今后在使用fs模块中的<strong>任何</strong>方法的时候，<strong>只要涉及到路径操作了，一定要用__dirname做一层拼接</strong>，防止操作文件的时候，相对路径随着执行Node命令的目录而改变</li>
<li>writeFile 特点：如果文件不存在则先创建再写入；如果文件存在，则直接覆盖之前的内容；</li>
</ul>
<h4 id="箭头函数-1"><a href="#箭头函数-1" class="headerlink" title="箭头函数"></a>箭头函数</h4><ul>
<li>// 箭头函数的标准形式：   () =&gt; {}<br>  // 变形1：如果箭头函数，左侧参数列表中，只有一个参数，可以省略 () ,    x =&gt; {}<br>  // 变形2：如果箭头函数右侧函数体中，只有一句代码，那么， {} 可以省略   () =&gt; console.log(123)<br>  // 变形3：根据上面两条规范，可以得到变形3，左侧只有一个参数，右侧只有一行代码    x =&gt; console.log(x)<br>  // 注意：如果省略了函数体的 {} ， 则 函数体中代码执行的结果，会被默认的 当作返回值 return 出去，当作此箭头函数的调用返回值</li>
</ul>
<p><html></html></p>
<head><br>  <meta charset="UTF-8"><br>  <meta name="viewport" content="width=device-width, initial-scale=1.0"><br>  <meta http-equiv="X-UA-Compatible" content="ie=edge"><br>  <title>Document</title><br></head>

<p><body><br>  <input type="button" value="戳我" id="btn"></body></p>
<p>  <script><br>    onload = function () {<br>      var btn = document.getElementById(‘btn’);<br>      btn.onclick = function () {<br>        // var _this = this;<br>        // 箭头函数内部的this，永远和 箭头函数 外部的this保持一致<br>        // setTimeout(() =&gt; {<br>        //   this.style.backgroundColor = ‘red’;<br>        // }, 1000);</p>
<pre><code>    myclick = myclick.bind(this);

    window.setTimeout(myclick, 1000);
  }
}

function myclick() {
  console.log(this)
  this.style.backgroundColor = &apos;red&apos;;
}


// 箭头函数的标准形式：   () =&gt; {}
// 变形1：如果箭头函数，左侧参数列表中，只有一个参数，可以省略 () ,    x =&gt; {}
// 变形2：如果箭头函数右侧函数体中，只有一句代码，那么， {} 可以省略   () =&gt; console.log(123)
// 变形3：根据上面两条规范，可以得到变形3，左侧只有一个参数，右侧只有一行代码    x =&gt; console.log(x)
// 注意：如果省略了函数体的 {} ， 则 函数体中代码执行的结果，会被默认的 当作返回值 return 出去，当作此箭头函数的调用返回值

function a(x) {
  return x + 1;
}

x =&gt; x + 1

// 拉姆达表达式   Lambda
</code></pre><p>  </script><br><br></p>
<h4 id="使用fs的appendFile向已有文件追加内容"><a href="#使用fs的appendFile向已有文件追加内容" class="headerlink" title="使用fs的appendFile向已有文件追加内容"></a>使用fs的appendFile向已有文件追加内容</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line">fs.appendFile(<span class="string">"./info3.txt"</span>,<span class="string">"\n啥子呦"</span>,(err)=&gt;&#123;</div><div class="line">	<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err.message);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"追加OK"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="使用http模版创建基本的web服务器"><a href="#使用http模版创建基本的web服务器" class="headerlink" title="使用http模版创建基本的web服务器"></a>使用http模版创建基本的web服务器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.导入http核心模块</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="comment">// 2.调用http.createServer方法，创建服务器</span></div><div class="line"><span class="keyword">var</span> server = http.createServer();</div><div class="line"><span class="comment">// 3.通过on方法，给刚创建的server服务器，绑定request事件处理函数</span></div><div class="line"><span class="comment">// request事件处理函数，有两个参数</span></div><div class="line"><span class="comment">// 第一个参数是req请求对象，包含了和请求有关的数据，比如url地址，请求的query查询字符串，提交的form表单，cookie</span></div><div class="line"><span class="comment">// 第二个参数是res响应对象，可以将服务器处理好的数据，响应给客户端去渲染；</span></div><div class="line">server.on(<span class="string">"request"</span>, (req, res) =&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"OK"</span>);</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * res.write("hello");</span></div><div class="line"><span class="comment">	 * res.write("world");</span></div><div class="line"><span class="comment">	 * res.write("hello world");</span></div><div class="line"><span class="comment">	 * 调用res.end()结束当前响应</span></div><div class="line"><span class="comment">	 * 这种方式，表示向客户端发送内容，并立即结束响应</span></div><div class="line"><span class="comment">	 * res.end("hello world");</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="comment">// res.writeHeader 第一个参数是状态码，第二个参数是响应头对象；</span></div><div class="line">	res.writeHeader(<span class="number">200</span>, &#123;</div><div class="line">		<span class="comment">// text/plain 是普通文本</span></div><div class="line">		<span class="string">"Content-Type"</span>: <span class="string">"text/html;charset=utf-8"</span></div><div class="line">		<span class="comment">// text/css image/png</span></div><div class="line">	&#125;);</div><div class="line">	<span class="comment">// res.end("拳四郎");</span></div><div class="line">	res.end(<span class="string">"&lt;h1&gt;拳四郎&lt;/h1&gt;"</span>)</div><div class="line">	<span class="comment">// 注意，不能再end之后继续调用write</span></div><div class="line">	<span class="comment">// 这样会报错</span></div><div class="line">	<span class="comment">// res.write("123");</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="http://www.cnblogs.com/ghost-xyx/p/4035615.html" target="_blank" rel="external">JavaScript——历史与简介</a></li>
<li><a href="http://www.infoq.com/cn/articles/what-is-nodejs/" target="_blank" rel="external">深入浅出Node.js（一）：什么是Node.js</a></li>
<li><a href="http://www.cnblogs.com/eric-nirnava/p/IO.html" target="_blank" rel="external">I/O事件概述</a></li>
<li><a href="http://www.cnblogs.com/lua5/archive/2011/02/01/1948760.html" target="_blank" rel="external">理解Node.js事件驱动编程</a></li>
<li><a href="http://nodejs.cn/api/documentation.html" target="_blank" rel="external">Node.js 中文网</a></li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js 英文官网</a></li>
<li><a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="external">Node.js 菜鸟教程</a></li>
<li><a href="https://cnodejs.org/" target="_blank" rel="external">CNode：Node.js专业中文社区</a></li>
<li><a href="http://download.csdn.net/download/u010733705/9555797" target="_blank" rel="external">深入浅出Node.js(朴灵)完整扫描版.pdf</a></li>
<li><a href="http://www.nowamagic.net/academy/detail/23350305" target="_blank" rel="external">HTTP Keep-Alive是什么？如何工作？</a></li>
<li><a href="http://www.nowamagic.net/librarys/veda/detail/2576" target="_blank" rel="external">浏览器User-agent String里的历史故事</a></li>
<li><a href="https://aui.github.io/art-template/docs/api.html" target="_blank" rel="external">art-template API</a></li>
<li><a href="http://www.jb51.net/article/95199.htm" target="_blank" rel="external">yarn与npm的命令行小结</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Node-js初识&quot;&gt;&lt;a href=&quot;#Node-js初识&quot; class=&quot;headerlink&quot; title=&quot;Node.js初识&quot;&gt;&lt;/a&gt;Node.js初识&lt;/h1&gt;&lt;h2 id=&quot;学习Node-js时候的建议&quot;&gt;&lt;a href=&quot;#学习Node-js时候
    
    </summary>
    
      <category term="Node" scheme="http://yoursite.com/categories/Node/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>移动web开发</title>
    <link href="http://yoursite.com/2016/12/19/15.%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2016/12/19/15.移动web开发/</id>
    <published>2016-12-18T16:34:14.000Z</published>
    <updated>2017-09-08T03:07:28.964Z</updated>
    
    <content type="html"><![CDATA[<h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>其实，流式布局就是百分百布局，通过把盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。这样的布局方式，就是移动web开发使用的常用布局方式。  </p>
<h3 id="viewport-视口"><a href="#viewport-视口" class="headerlink" title="viewport(视口)"></a>viewport(视口)</h3><p>在移动端用来承载网页的这个区域，就是视觉窗口，这个区域可以设置高度宽度，可以按比例缩放，而且能设置是否允许用户自行缩放。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>width</td>
<td>设置的是viewport的宽度，可以设置device-width特殊值。</td>
</tr>
<tr>
<td>initial-scale</td>
<td>初始缩放比，大于0的数字</td>
</tr>
<tr>
<td>maximum-scale</td>
<td>最大缩放比，大于0的数字</td>
</tr>
<tr>
<td>minimum-scale</td>
<td>最小缩放比，大于0的数字</td>
</tr>
<tr>
<td>user-scalable</td>
<td>用户是否可以缩放，yes或no（1或者是0）</td>
</tr>
</tbody>
</table>
<p>用meta标签把viewport的宽度设置为device-width，同时initial-scale=1，user-scalable=0就构建了一个标准的移动web页面。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--快捷方式 meta:vp--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,               user-scalable=no,                  initial-scale=1.0,                 maximum-scale=1.0,                 minimum-scale=1.0"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="Retina屏"><a href="#Retina屏" class="headerlink" title="Retina屏"></a>Retina屏</h4><p>就是视网膜屏或者高清显示屏的意思，它可以把更多的像素点压缩在一块屏幕里，从而达到更高的分辨率，并且提高屏幕显示的细腻程度。<br>但是在移动web的网页中图片容易失真，因为目前的主流移动设备都配备了高清显示屏，它把图像更多的放到像素点里，但是每个像素点并未达到饱和，所以导致图片显示容易失真。<br>所以淘宝网的手机版没有采用主流的处理方法，而是采用了二倍图三倍图的方法来解决图片失真的问题，很值得借鉴。<br>==百分比的宽高都是基于父容器的大小的百分比。==<br>==fixed定位是基于浏览器的定位。==  </p>
<h3 id="私有前缀"><a href="#私有前缀" class="headerlink" title="私有前缀"></a>私有前缀</h3><p>为什么会有私有前缀：css3的新属性刚出来，浏览器的厂商为了去支持它，约定加个前缀，确保在自己开发的浏览器下能够正常运行。</p>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>前缀</th>
</tr>
</thead>
<tbody>
<tr>
<td>谷歌，safari</td>
<td>webkit（移动端主流）</td>
</tr>
<tr>
<td>火狐</td>
<td>moz</td>
</tr>
<tr>
<td>ie</td>
<td>ms</td>
</tr>
<tr>
<td>欧朋</td>
<td>o   </td>
</tr>
</tbody>
</table>
<p>兼容更多版本的浏览器加私有前缀。PC兼容的时候，最好所有都加上。<br>移动端浏览器大部分为webkit，所以只需要加上他就可以与市面上的主流浏览器兼容。  </p>
<h3 id="touch事件"><a href="#touch事件" class="headerlink" title="touch事件"></a>touch事件</h3><p>移动端的触摸事件。指的是触摸事件组。  </p>
<table>
<thead>
<tr>
<th>名称</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>touchstart</td>
<td>触摸开始的事件</td>
<td>当屏幕被触摸的时候触发</td>
</tr>
<tr>
<td> touchmove</td>
<td>触摸滑动事件</td>
<td>当在屏幕上来回的滑动的时候触发（一直触发）调用preventDefault()可以阻止滚动</td>
</tr>
<tr>
<td>touchend</td>
<td>触摸结束事件</td>
<td>当离开屏幕的时候触发</td>
<td></td>
</tr>
<tr>
<td>touchcancel</td>
<td>取消触摸事件</td>
<td>被迫终止触摸，才会触发（例如来电）</td>
</tr>
</tbody>
</table>
<p>绑定touch事件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">div.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'touchstart'</span>);</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="javascript">div.addEventListener(<span class="string">'touchmove'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'touchmove'</span>);</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="javascript">div.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'touchend'</span>);</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>触摸点：和屏幕接触的点的集合。通过事件对象去获取触摸点集合的TouchEvent回调函数当中的event。<br>touches相关的集合，触摸点集合。<br>==changedTouches==<br>页面上改变了的（无到有，有到无，位置变化） 触摸点集合，全程记录<br>==targetTouches==<br>目标元素上面的触摸点集合，在触摸离开的时候不会去记录。<br>==touches==<br>页面上所有的触摸点集合，在触摸离开的时候不会去记录<br>三对坐标</p>
<table>
<thead>
<tr>
<th>坐标</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>clientX</td>
<td>基于视口的X坐标</td>
</tr>
<tr>
<td>clientY</td>
<td>基于视口的Y坐标</td>
</tr>
<tr>
<td>screenX</td>
<td>基于屏幕的X坐标</td>
</tr>
<tr>
<td>screenY</td>
<td>基于屏幕的Y坐标</td>
</tr>
<tr>
<td>pageX</td>
<td>基于页面的X坐标</td>
</tr>
<tr>
<td>pageY</td>
<td>基于页面的Y坐标</td>
</tr>
</tbody>
</table>
<p>在滑动过程中，使用什么坐标没有关系，记录的是坐标值之间的差值，两个位置的距离。  </p>
<h4 id="tap事件"><a href="#tap事件" class="headerlink" title="tap事件"></a>tap事件</h4><p>tap轻击，是一个事件。源生js不支持，tap是通过touch衍生过来的（封装得来）。<br>tap的相应更快（150ms以内），click在移动端有300ms的延时（用户的体验不好，应该提高响应速度）。<br>==不能滑动，响应在150ms以内，才叫tap。==<br>可以使用移动端的库，提供tap相关事件。zepto.js。<br>tap还可以有singleTap，doubleTap，longTap等。<br>click在移动端有300ms的延迟，解决方法</p>
<ol>
<li>使用移动端的库当中的tap事件</li>
<li>使用移动端的插件fastclick.js，click的响应速度就提升。  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> startTime = <span class="number">0</span>;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> isMove = <span class="literal">false</span>;</span></div><div class="line"><span class="javascript">        <span class="comment">/*绑定touch事件*/</span></span></div><div class="line"><span class="javascript">        div.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'touchstart'</span>);</span></div><div class="line"><span class="javascript">            <span class="comment">/*记录开始触摸的时候*/</span></span></div><div class="line"><span class="javascript">            startTime = <span class="built_in">Date</span>.now();</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="javascript">        div.addEventListener(<span class="string">'touchmove'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'touchmove'</span>);</span></div><div class="line"><span class="javascript">            isMove = <span class="literal">true</span>;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="javascript">        div.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'touchend'</span>);</span></div><div class="line"><span class="javascript">            <span class="comment">/*获取当前的事件去比较之前的时间  150ms*/</span></span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now()-startTime);</span></div><div class="line"><span class="javascript">            <span class="keyword">if</span>(!isMove &amp;&amp; (<span class="built_in">Date</span>.now()-startTime) &lt; <span class="number">150</span>)&#123;</span></div><div class="line"><span class="javascript">                <span class="comment">/*tap*/</span></span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'tap事件'</span>)</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="javascript">        div.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="swipe事件"><a href="#swipe事件" class="headerlink" title="swipe事件"></a>swipe事件</h4><p>swipe滑动事件（手势事件），源生js不支持，是通过touch衍生过来的（封装得到）。<br>==swipe一定滑动过，滑动的距离50px==<br>在zepto这个库中可以直接使用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> isMove = <span class="literal">false</span>;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> startY = <span class="number">0</span>;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> distance = <span class="number">0</span>;</span></div><div class="line"><span class="javascript">        div.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="undefined">            startY = e.touches[0].clientY;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="javascript">        div.addEventListener(<span class="string">'touchmove'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            isMove = <span class="literal">true</span>;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> moveY = e.touches[<span class="number">0</span>].clientY;</span></div><div class="line"><span class="undefined">            distance = moveY - startY;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="javascript">        div.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">if</span>(isMove)&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(distance) &gt; <span class="number">50</span>)&#123;</span></div><div class="line"><span class="javascript">                    <span class="comment">/*滑动手势*/</span></span></div><div class="line"><span class="javascript">                    <span class="comment">/*上滑手势*/</span></span></div><div class="line"><span class="javascript">                    <span class="keyword">if</span>(distance &lt; <span class="number">0</span>)&#123;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">'swipeUp'</span>);</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="javascript">                    <span class="comment">/*下滑手势*/</span></span></div><div class="line"><span class="javascript">                    <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">'swipeDown'</span>);</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">            isMove = <span class="literal">false</span>;</span></div><div class="line"><span class="undefined">            startY = 0;</span></div><div class="line"><span class="undefined">            distance = 0;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="插件-iscroll-js-区域滚动"><a href="#插件-iscroll-js-区域滚动" class="headerlink" title="插件 iscroll.js 区域滚动"></a>插件 iscroll.js 区域滚动</h4><p>初始化  </p>
<ol>
<li>结构一定是父容器装一个子容器。</li>
<li>如果是横向滚动，宽度一定大于父容器。纵向类似于横向，高度一定大于父容器。</li>
<li>默认的是初始纵向滚动。</li>
<li>通过参数去初始化。</li>
<li>在部分谷歌浏览器模拟器上失效，真机不会有问题。<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> rightScroll=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">new</span> IScroll(<span class="string">".jd_cate_right"</span>,&#123;</span></div><div class="line"><span class="javascript">            scrollY:<span class="literal">true</span>;</span></div><div class="line"><span class="javascript">            <span class="comment">//注意一定到大于父容器的高度和宽度</span></span></div><div class="line"><span class="javascript">            scrollX:<span class="literal">true</span>;</span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>移动端网页的顶级对象仍然是window。viewport仅仅是模拟的东西，不是对象。</li>
<li>==给盒子设置overflow：hidden后，他会变为绝缘盒子，内容不会受浮动的影响。==<h4 id="全屏容器的设置方法"><a href="#全屏容器的设置方法" class="headerlink" title="全屏容器的设置方法"></a>全屏容器的设置方法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    //第一种方法</span></div><div class="line"><span class="undefined">    html,body&#123;</span></div><div class="line"><span class="undefined">        height:100%;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    .container&#123;</span></div><div class="line"><span class="undefined">        width:100%;</span></div><div class="line"><span class="undefined">        height:100%;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    //单纯给容器设置宽高百分百是无效的，因为html和body并没有撑开，所以需要给二者设置百分百高度。</span></div><div class="line"><span class="undefined">    //第二种方法</span></div><div class="line"><span class="undefined">    .container1&#123;</span></div><div class="line"><span class="undefined">        width:100%;</span></div><div class="line"><span class="undefined">        height:100%;</span></div><div class="line"><span class="xml">        <span class="comment">&lt;!--position:fixed;--&gt;</span></span></div><div class="line"><span class="undefined">        //absolute基于祖上有定位的容器，relative，absolute，fixed，只要不是static就行</span></div><div class="line"><span class="undefined">        //fixed直接基于window</span></div><div class="line"><span class="undefined">        position:absolute;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h1><p>原理：通过h5的属性媒体查询来确定当前设备的屏幕的大小来自动适配设备的布局方式。<br>==媒体查询的使用==  </p>
<ol>
<li>使用关键字@media</li>
<li>查询屏幕窗口的宽度</li>
<li>and接条件</li>
<li>写样式</li>
<li>满足条件，代码生效</li>
<li>默认查询的就是screen<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    @media screen and (max-width: 768px)&#123;</span></div><div class="line"><span class="undefined">            /*4.写样式*/</span></div><div class="line"><span class="undefined">            .container&#123;</span></div><div class="line"><span class="undefined">                width: 100%;</span></div><div class="line"><span class="undefined">                background: pink;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">            /*5.满足条件 代码生效*/</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>==基本模版==<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--h5文档申明--&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="comment">&lt;!--语言中文简体--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--设置字符编码--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--让IE浏览器用最新的渲染引擎去解析页面 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 视口   标准化设置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1,user-scalable=0"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></div><div class="line">    <span class="comment">&lt;!--优先解析 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Bootstrap css--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">        html5shiv  IE8 支持语义化标签</span></div><div class="line"><span class="comment">        respond    IE8 支持媒体查询</span></div><div class="line"><span class="comment">    --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 警告：你不能使用file://这个种形式打开网页   http:// --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class="line">    <span class="comment">&lt;!--条件注释  在IE9以下  加载--&gt;</span></div><div class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line"><span class="comment">    &lt;script src="../lib/html5shiv/html5shiv.min.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">    &lt;script src="../lib/respond/respond.min.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">    &lt;![endif]--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--TODO--&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 基于jquery --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/jquery/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/bootstrap/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>==常见的屏幕比例==  </p>
<ol>
<li>在超小屏设备      0 -768px     容器 宽度百分百   </li>
<li>在小屏设备    768px-992px     容器 750px      </li>
<li>在中屏设备    992px-1200px    容器 970px       </li>
<li>在大屏设备    1200px-         容器 1170px <h2 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h2>Bootstrap提供了一套响应式、移动设备有限的流式栅格系统，随着屏幕或视口尺寸的增加，系统会自动分为最多12列。它包含了易于使用的预定义类，还有强大的mixin用于生成更具语义的布局。<br>定义：栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局。  </li>
</ol>
<ul>
<li>“行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</li>
<li>通过“行（row）”在水平方向创建一组“列（column）”。</li>
<li>你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。</li>
<li>类似 .row 和 .col-xs-4 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。</li>
<li>通过为“列（column）”设置 padding 属性，从而创建列与列之间的间隔（gutter）。通过为 .row 元素设置负值 margin 从而抵消掉为 .container 元素设置的 padding，也就间接为“行（row）”所包含的“列（column）”抵消掉了padding。</li>
<li>负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。</li>
<li>栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 .col-xs-4 来创建。</li>
<li>如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。</li>
<li>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 .col-md-<em> 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 .col-lg-</em> 不存在， 也影响大屏幕设备。<h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3>==布局容器==<br>响应式布局容器 <div class="container"><div><br>流式布局容器 <div class="container-fluid"><div>  <h4 id="响应式布局容器"><a href="#响应式布局容器" class="headerlink" title="响应式布局容器"></a>响应式布局容器</h4>有一个高度100px的块级元素平均三等份<br>container:15px 两边的边距<br>row：可以清除父容器的15px的两边的边距，当然使用左右margin也可以，如（margin-left:-15px,margin-right:-15px;)<br>colmd-4:在中等屏幕以上（包含自己）当前元素占4份默认把一行分成12份。<br>==col-==  ==第一个参数：在什么屏幕下生效==  </div></div></div></div></li>
</ul>
<table>
<thead>
<tr>
<th>屏幕</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>lg:大屏设备</td>
<td>在大屏幕以上（包含自己）</td>
</tr>
<tr>
<td>ma:中等屏幕</td>
<td>在中等屏幕以上（包含自己）</td>
</tr>
<tr>
<td>sm:小屏设备</td>
<td>在小屏幕以上（包括自己）</td>
</tr>
<tr>
<td>xs:超小屏设备</td>
<td>r在超小屏幕以上（包括自己）</td>
</tr>
</tbody>
</table>
<p>第二个参数：默认把一行分成12份，取值范围1-12.这个数值可以改，把一行分成其他各种份数。<br>==列偏移== offset 往右偏移<br>==列排序== pull 往前拉几份，push往后推几份。<br>==hidden只对某个屏幕的隐藏，其他的就是显示（推荐）==<br>==visible只对某个屏幕的显示，其他的就是隐藏，（3.2.0 不推荐）==<br>浮动：pull-left，pull-right；<br>间对齐：text-left，text-right，text-center。</p>
<h3 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1,user-scalable=0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line"><span class="comment">    &lt;script src="../lib/html5shiv/html5shiv.min.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">    &lt;script src="../lib/respond/respond.min.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">    &lt;![endif]--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment">navbar 指定是一个导航栏</span></div><div class="line"><span class="comment">navbar-default 默认样式的导航栏</span></div><div class="line"><span class="comment">模块</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--响应式容器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 商标区域 和 切换按钮  这个组合  在移动端显示比较好（完全显示） --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--切换按钮--&gt;</span></div><div class="line">            <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">            自定义属性</span></div><div class="line"><span class="comment">            data-toggle="collapse" 在初始化的时候  初始化成折叠js插件</span></div><div class="line"><span class="comment">            data-target="#bs-example-navbar-collapse-1" 折叠的目标元素</span></div><div class="line"><span class="comment">            盲人阅读器属性  aria-*</span></div><div class="line"><span class="comment">            aria-expanded="false"</span></div><div class="line"><span class="comment">            sr-only  screen read only 仅提供屏幕阅读器使用</span></div><div class="line"><span class="comment">            --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> &gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--商标区域--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 导航链接 表单 都是被控制切换的内容 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/jquery/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/bootstrap/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>data-toggle=”collapse”  指定js插件</li>
<li>data-target=”div” 控制目标元素</li>
<li>选择器如果是a 控制目标元素  href<h4 id="轮播图容器"><a href="#轮播图容器" class="headerlink" title="轮播图容器"></a>轮播图容器</h4>模块 carousel<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    class="carousel slide"</span></div><div class="line"><span class="undefined">    slide:加动画效果</span></div><div class="line"><span class="undefined">    data-ride="carousel":初始轮播图组件</span></div><div class="line"><span class="undefined">    date-slide="prev"</span></div><div class="line"><span class="undefined">    data-slide="next"</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>适配小中大屏幕的轮播图<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1,user-scalable=0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line"><span class="comment">    &lt;script src="../lib/html5shiv/html5shiv.min.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">    &lt;script src="../lib/respond/respond.min.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">    &lt;![endif]--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel-example-generic"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--准备一个高度固定的容器宽度百分百  背景居中平铺 完全铺满--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        .pc_imgBox&#123;</span></div><div class="line"><span class="undefined">            display: block;</span></div><div class="line"><span class="undefined">            width: 100%;</span></div><div class="line"><span class="undefined">            height: 410px;</span></div><div class="line"><span class="undefined">            background: url("../images/slide_01_2000x410.jpg") no-repeat center/cover;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"pc_imgBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"pc_imgBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"pc_imgBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"pc_imgBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/jquery/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/bootstrap/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>适配超小屏幕<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1,user-scalable=0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line"><span class="comment">    &lt;script src="../lib/html5shiv/html5shiv.min.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">    &lt;script src="../lib/respond/respond.min.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">    &lt;![endif]--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel-example-generic"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 设置图片宽度百分百  自适应的了 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        .m_imgBox&#123;</span></div><div class="line"><span class="undefined">            display: block;</span></div><div class="line"><span class="undefined">            width: 100%;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        .m_imgBox img&#123;</span></div><div class="line"><span class="undefined">            display: block;</span></div><div class="line"><span class="undefined">            width: 100%;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"m_imgBox"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../images/slide_01_640x340.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"m_imgBox"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../images/slide_02_640x340.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"m_imgBox"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../images/slide_03_640x340.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"m_imgBox"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../images/slide_04_640x340.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/jquery/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/bootstrap/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>静态的响应式轮播图<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1,user-scalable=0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line"><span class="comment">    &lt;script src="../lib/html5shiv/html5shiv.min.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">    &lt;script src="../lib/respond/respond.min.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">    &lt;![endif]--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel-example-generic"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--准备一个高度固定的容器宽度百分百  背景居中平铺 完全铺满--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        .pc_imgBox&#123;</span></div><div class="line"><span class="undefined">            display: block;</span></div><div class="line"><span class="undefined">            width: 100%;</span></div><div class="line"><span class="undefined">            height: 410px;</span></div><div class="line"><span class="undefined">            background: url("../images/slide_01_2000x410.jpg") no-repeat center/cover;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        .m_imgBox&#123;</span></div><div class="line"><span class="undefined">            display: block;</span></div><div class="line"><span class="undefined">            width: 100%;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        .m_imgBox img&#123;</span></div><div class="line"><span class="undefined">            display: block;</span></div><div class="line"><span class="undefined">            width: 100%;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        /*使用nth-child  不利于维护*/</span></div><div class="line"><span class="undefined">        /*.item:nth-child(1) .pc_imgBox&#123;</span></div><div class="line"><span class="undefined">            background-image: url("../images/slide_01_2000x410.jpg");</span></div><div class="line"><span class="undefined">        &#125;*/</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"pc_imgBox hidden-xs"</span> <span class="attr">style</span>=<span class="string">"background-image: url(../images/slide_01_2000x410.jpg)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"m_imgBox hidden-sm hidden-md hidden-lg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../images/slide_01_640x340.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"pc_imgBox hidden-xs"</span> <span class="attr">style</span>=<span class="string">"background-image: url(../images/slide_02_2000x410.jpg)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"m_imgBox hidden-sm hidden-md hidden-lg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../images/slide_02_640x340.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"pc_imgBox hidden-xs"</span> <span class="attr">style</span>=<span class="string">"background-image: url(../images/slide_03_2000x410.jpg)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"m_imgBox hidden-sm hidden-md hidden-lg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../images/slide_03_640x340.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"pc_imgBox hidden-xs"</span> <span class="attr">style</span>=<span class="string">"background-image: url(../images/slide_04_2000x410.jpg)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"m_imgBox hidden-sm hidden-md hidden-lg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../images/slide_04_640x340.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/jquery/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/bootstrap/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="轮播图设置思路"><a href="#轮播图设置思路" class="headerlink" title="轮播图设置思路"></a>轮播图设置思路</h4><ol>
<li>准备数据，图片地址数据（用于动态加载图片或者是背景图）。大小中屏幕用背景图，超小屏使用图片。  </li>
<li>通过jQuery或者DOM方法获取当前设备的屏幕窗口的宽度，小于768px则是移动端。  </li>
<li>根据设备和数据，生成html格式的代码。  </li>
<li>通过拼接字符串的方式把html格式的代码，追加到对应的容器，进行渲染。 </li>
<li>为了去测试，当页面尺寸发生改变的时候，重新渲染页面。</li>
<li>移动端，手势切换，调用IScroll插件来实现上一张和下一张滑动切换的效果。<br>==jQuery中用originalEvent记录原生的js事件对象==<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">     $(<span class="string">'.wjs_banner'</span>).on(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="comment">/*注意：jquery  originalEvent 记录 原生js事件对象 */</span></span></div><div class="line"><span class="undefined">        startX = e.originalEvent.touches[0].clientX;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>==jQuery获取宽度的方法==</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>意义</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>width()</td>
<td>获取宽度</td>
<td>内容</td>
</tr>
<tr>
<td>innerWidth()</td>
<td>获取宽度</td>
<td>内容+内边距</td>
</tr>
<tr>
<td>outerWidth()</td>
<td>获取宽度</td>
<td>内容+内边距+边框</td>
</tr>
<tr>
<td>outerWidth(true)</td>
<td>获取宽度</td>
<td>内容+内边距+边框+外边距</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">//第一种方法</span></span></div><div class="line"><span class="javascript">    $.each(data,<span class="function"><span class="keyword">function</span> (<span class="params">i,item</span>)</span>&#123;&#125;);</span></div><div class="line"><span class="javascript">    <span class="comment">//第二种方法</span></span></div><div class="line"><span class="javascript">    $(<span class="string">"a"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>==第二种方法是jQuery对象的方法，上面的是工具箱。第二种方法只能是jQuery元素集才能使用，第一种方法的方法数组对象都可以使用。==</p>
<h4 id="补充的选择器方法"><a href="#补充的选择器方法" class="headerlink" title="补充的选择器方法"></a>补充的选择器方法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    p:first-of-type</span></div><div class="line"><span class="undefined">    p:last-of-type</span></div><div class="line"><span class="undefined">    p:nth-of-type()</span></div><div class="line"><span class="undefined">    p:nth-last-of-type()</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>type是选择性的控制类型。</p>
<h2 id="less的应用"><a href="#less的应用" class="headerlink" title="less的应用"></a>less的应用</h2><p>由于css需要书写大量看似没有逻辑的代码，不方便维护以及扩展，不利于复用，难以维护。所以，less在css的语法基础之上，引入了变量，Mixin(混入)，运算以及函数等功能，大大简化了css的编写，并且降低了css的维护成本。做到了write less，do more。  </p>
<ol>
<li>原理：本质上，LESS包含一套自定义的语法以及一个解析器(webstorm可以自动解析),用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的css文件。</li>
<li>说明：LESS并没有裁剪CSS原有的特性，更不是用来取代CSS的，而是在现有的CSS语法的基础上，为CSS加入程序式语言的特性。</li>
<li>语法：</li>
</ol>
<ul>
<li>Mixin  混入</li>
<li>嵌套</li>
<li>Import 引入</li>
<li>函数（内置函数，运算）</li>
</ul>
<ol>
<li>变量：LESS允许开发者自定义变量，变量可以在全局样式中使用，变量使得样式修改起来更加简单。</li>
<li>Mixin(混入)功能是多重继承的一种实现，在LESS中，混入是指在一个CLASS中引入另外一个已经定义的CLASS，就像在当前CLASS中增加一个属性一样。</li>
<li>嵌套：在书写标准CSS的时候，遇到多层的元素嵌套这种情况时，我们要么采用从外到内的选择器嵌套定义，要么采用给特定元素加CLASS或ID的方式。</li>
<li><p>Import(引入)</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@import</span> <span class="string">"base"</span>;</div><div class="line"><span class="selector-class">.f_left</span>&#123;</div><div class="line">    <span class="attribute">float</span>:<span class="variable">@right</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运算以及函数：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>escape(@string);</td>
<td>通过 URL-encoding 编码字符串</td>
</tr>
<tr>
<td>e(@string);</td>
<td>对字符串转义</td>
</tr>
<tr>
<td>%(@string, values…);</td>
<td>格式化字符串</td>
</tr>
<tr>
<td>unit(@dimension, [@unit: “”]);</td>
<td>移除或替换属性值的单位</td>
</tr>
<tr>
<td>color(@string);</td>
<td>将字符串解析为颜色值</td>
</tr>
<tr>
<td>data-uri([mimetype,] url);</td>
<td>* 将资源内嵌到css中，可能回退到url()</td>
</tr>
<tr>
<td>ceil(@number);</td>
<td>向上取整</td>
</tr>
<tr>
<td>floor(@number);</td>
<td>向下取整</td>
</tr>
<tr>
<td>percentage(@number);</td>
<td>将数字转换为百分比，例如 0.5 -&gt; 50%</td>
</tr>
<tr>
<td>round(number, [places: 0]);</td>
<td>四舍五入取整</td>
</tr>
<tr>
<td>sqrt(number);</td>
<td>* 计算数字的平方根</td>
</tr>
<tr>
<td>abs(number);</td>
<td>* 数字的绝对值</td>
</tr>
<tr>
<td>sin(number);</td>
<td>* sin函数</td>
</tr>
<tr>
<td>asin(number);</td>
<td>* arcsin函数</td>
</tr>
<tr>
<td>cos(number);</td>
<td>* cos函数</td>
</tr>
<tr>
<td>acos(number);</td>
<td>* arccos函数</td>
</tr>
<tr>
<td>tan(number);</td>
<td>* tan函数</td>
</tr>
<tr>
<td>atan(number);</td>
<td>* arctan函数</td>
</tr>
<tr>
<td>pi();</td>
<td>* 返回PI</td>
</tr>
<tr>
<td>pow(@base, @exponent);</td>
<td>* 返回@base的@exponent次方</td>
</tr>
<tr>
<td>mod(number, number);</td>
<td>* 第一个参数对第二个参数取余</td>
</tr>
<tr>
<td>convert(number, units);</td>
<td>* 在数字之间转换</td>
</tr>
<tr>
<td>unit(number, units);</td>
<td>* 不转换的情况下替换数字的单位</td>
</tr>
<tr>
<td>color(string);</td>
<td>将字符串或者转义后的值转换成颜色</td>
</tr>
<tr>
<td>rgb(@r, @g, @b);</td>
<td>转换为颜色值</td>
</tr>
<tr>
<td>rgba(@r, @g, @b, @a);</td>
<td>转换为颜色值</td>
</tr>
<tr>
<td>argb(@color);</td>
<td>创建 #AARRGGBB 格式的颜色值</td>
</tr>
<tr>
<td>hsl(@hue, @saturation, @lightness);</td>
<td>创建颜色值</td>
</tr>
<tr>
<td>hsla(@hue, @saturation, @lightness, @alpha);</td>
<td>创建颜色值</td>
</tr>
<tr>
<td>hsv(@hue, @saturation, @value);</td>
<td>创建颜色值</td>
</tr>
<tr>
<td>hsva(@hue, @saturation, @value, @alpha);</td>
<td>创建颜色值</td>
</tr>
<tr>
<td>hue(@color);</td>
<td>从颜色值中提取 hue 值（色相）</td>
</tr>
<tr>
<td>saturation(@color);</td>
<td>从颜色值中提取 saturation 值（饱和度）</td>
</tr>
<tr>
<td>lightness(@color);</td>
<td>从颜色值中提取 ‘lightness’ 值（亮度）</td>
</tr>
<tr>
<td>hsvhue(@color);</td>
<td>* 从颜色中提取 hue 值，以HSV色彩空间表示（色相）</td>
</tr>
<tr>
<td>hsvsaturation(@color);</td>
<td>* 从颜色中提取 saturation 值，以HSV色彩空间表示（饱和度）</td>
</tr>
<tr>
<td>hsvvalue(@color);</td>
<td>* 从颜色中提取 value 值，以HSV色彩空间表示（色调）</td>
</tr>
<tr>
<td>red(@color);</td>
<td>从颜色值中提取 ‘red’ 值（红色）</td>
</tr>
<tr>
<td>green(@color);</td>
<td>从颜色值中提取 ‘green’ 值（绿色）</td>
</tr>
<tr>
<td>blue(@color);</td>
<td>从颜色值中提取 ‘blue’ 值（蓝色）</td>
</tr>
<tr>
<td>alpha(@color);</td>
<td>从颜色值中提取 ‘alpha’ 值（透明度）</td>
</tr>
<tr>
<td>luma(@color);</td>
<td>从颜色值中提取 ‘luma’ 值（亮度的百分比表示法）</td>
</tr>
<tr>
<td>saturate(@color, 10%);</td>
<td>饱和度增加 10%</td>
</tr>
<tr>
<td>desaturate(@color, 10%);</td>
<td>饱和度降低 10%</td>
</tr>
<tr>
<td>lighten(@color, 10%);</td>
<td>亮度增加 10%</td>
</tr>
<tr>
<td>darken(@color, 10%);</td>
<td>亮度降低 10%</td>
</tr>
<tr>
<td>fadein(@color, 10%);</td>
<td>透明度增加 10%</td>
</tr>
<tr>
<td>fadeout(@color, 10%);</td>
<td>透明度降低 10%</td>
</tr>
<tr>
<td>fade(@color, 50%);</td>
<td>设定透明度为 50%</td>
</tr>
<tr>
<td>spin(@color, 10);</td>
<td>色相值增加 10</td>
</tr>
<tr>
<td>mix(@color1, @color2, [@weight: 50%]);</td>
<td>混合两种颜色</td>
</tr>
<tr>
<td>greyscale(@color);</td>
<td>完全移除饱和度，输出灰色</td>
</tr>
<tr>
<td>contrast(@color1, [@darkcolor: black], [@lightcolor: white], [@threshold: 43%]);</td>
<td>如果 @color1 的 luma 值 &gt; 43% 输出 @darkcolor，否则输出 @lightcolor</td>
</tr>
</tbody>
</table>
<ul>
<li>multiply(@color1, @color2);</li>
<li>screen(@color1, @color2);</li>
<li>overlay(@color1, @color2);</li>
<li>softlight(@color1, @color2);</li>
<li>hardlight(@color1, @color2);</li>
<li>difference(@color1, @color2);</li>
<li>exclusion(@color1, @color2);</li>
<li>average(@color1, @color2);</li>
<li>negation(@color1, @color2);</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>iscolor(@colorOrAnything);</td>
<td>判断一个值是否是颜色</td>
</tr>
<tr>
<td>isnumber(@numberOrAnything);</td>
<td>判断一个值是否是数字（可含单位）</td>
</tr>
<tr>
<td>isstring(@stringOrAnything);</td>
<td>判断一个值是否是字符串</td>
</tr>
<tr>
<td>iskeyword(@keywordOrAnything);</td>
<td>判断一个值是否是关键字</td>
</tr>
<tr>
<td>isurl(@urlOrAnything);</td>
<td>判断一个值是否是url</td>
</tr>
<tr>
<td>ispixel(@pixelOrAnything);</td>
<td>判断一个值是否是以px为单位的数值</td>
</tr>
<tr>
<td>ispercentage(@percentageOrAnything);</td>
<td>判断一个值是否是百分数</td>
</tr>
<tr>
<td>isem(@emOrAnything);</td>
<td>判断一个值是否是以em为单位的数值</td>
</tr>
<tr>
<td>isunit(@numberOrAnything, “rem”);</td>
<td>* 判断一个值是否是指定单位的数值</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;流式布局&quot;&gt;&lt;a href=&quot;#流式布局&quot; class=&quot;headerlink&quot; title=&quot;流式布局&quot;&gt;&lt;/a&gt;流式布局&lt;/h3&gt;&lt;p&gt;其实，流式布局就是百分百布局，通过把盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。这
    
    </summary>
    
      <category term="移动端开发" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="移动web" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8web/"/>
    
  </entry>
  
  <entry>
    <title>canvas</title>
    <link href="http://yoursite.com/2016/10/11/14.canvas/"/>
    <id>http://yoursite.com/2016/10/11/14.canvas/</id>
    <published>2016-10-11T11:33:21.000Z</published>
    <updated>2017-11-03T09:10:35.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol>
<li>是一个HTML5元素</li>
<li>意思是画布，本身是没有绘画功能的，需要通过javascript来实现功能。</li>
<li>默认的大小是300*150。</li>
<li>height=”300” width=”600”。</li>
<li>在浏览器解析的时候就是图片。  </li>
<li><h3 id="绘制图形的基本步骤"><a href="#绘制图形的基本步骤" class="headerlink" title="绘制图形的基本步骤"></a>绘制图形的基本步骤</h3></li>
<li>获取canvas元素</li>
<li>获取绘制环境</li>
<li>设置起始绘图的位置</li>
<li>绘制路径</li>
<li>描边<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*1.获取canvas元素*/</span></div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line"><span class="comment">/*2.获取绘制环境  （获取绘制工具）*/</span></div><div class="line"><span class="comment">/*content内容  context 上下文 */</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line"><span class="comment">/*3.设置起始绘图的位置*/</span></div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"><span class="comment">/*4.绘制路径 */</span></div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line"><span class="comment">/*5.描边*/</span></div><div class="line">    ctx.stroke();</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="绘制图形的工具"><a href="#绘制图形的工具" class="headerlink" title="绘制图形的工具"></a>绘制图形的工具</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置宽度</span></div><div class="line">ctx.lineWidth=<span class="number">10</span>;</div><div class="line"><span class="comment">//设置描边的颜色</span></div><div class="line">ctx.strokeStyle=<span class="string">"red"</span>;</div><div class="line"><span class="comment">//线的两端的样式</span></div><div class="line">ctx.lineCap=<span class="string">"round"</span>;<span class="comment">//圆滑</span></div><div class="line">ctx.lineCap=<span class="string">"butt"</span>;<span class="comment">//屁股，粗大的一端</span></div><div class="line">ctx.lineCap=<span class="string">"square"</span>;<span class="comment">//方的</span></div><div class="line"><span class="comment">//线拐点的样式</span></div><div class="line">ctx.lineJoin = <span class="string">'miter'</span>;<span class="comment">//直直的斜过去</span></div><div class="line">ctx.lineJoin = <span class="string">'round'</span>;<span class="comment">//圆滑的</span></div><div class="line">ctx.lineJoin = <span class="string">'bevel'</span>;<span class="comment">//圆斜</span></div></pre></td></tr></table></figure>
<p>注意：在不给线设置宽度的前提下，浏览器在显示线的时候可能会自带加粗效果，这是因为canvas本身也是由像素点构成的，但是浏览器对于半个像素的解析可能会当做一个像素，这样会把线段加”粗”，但是颜色会变浅。解决上述问题的方法是认为添加半个像素，使浏览器在解析的时候是整像素。<br><strong>再次绘制的时候，会使用之前设置的样式</strong>，设置的样式最后的会生效，下面的会覆盖上面的。所以解决方法是开启新的路径。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div></pre></td></tr></table></figure></p>
<p>闭合是在描边的时候的使用，闭合和描边没有关系。<br>==非零绘制原则==  </p>
<ol>
<li>看某块区域是否被填充</li>
<li>从这个区域拉一条线</li>
<li>计算每条线的值，逆时针-1，顺时针+1。</li>
<li>加一块，如果是非零的那么溜填充，否则不填充。</li>
</ol>
<h4 id="绘制虚线的方法"><a href="#绘制虚线的方法" class="headerlink" title="绘制虚线的方法"></a>绘制虚线的方法</h4><p><strong>传数组：设置虚线的长度</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>]);</div></pre></td></tr></table></figure></p>
<p>==如果传入的是偶数，那么最小的循环单元就是传入的数组的元素个数；如果传入的是奇数那么最小的循环单元是奇数元素个数的两倍，才能表示不重复的。==    </p>
<ul>
<li>setLineDash() 设置虚线</li>
<li>getLineDash() 获取虚线宽度集合</li>
<li>lineDashOffset 设置虚线偏移量（负值向右偏移）<h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4></li>
<li>进行路径绘制ctx.rect(100,100,200,100);<ul>
<li>解释参数含义(x轴坐标，y轴坐标，宽度，高度)。</li>
<li>描边或者填充 ctx.stroke();/ctx.fill();</li>
</ul>
</li>
<li>有自己独立路径并且绘制了的矩形 <ul>
<li>ctx.strokeRect(100,100,200,100) 绘制的是一个空心的矩形</li>
<li>ctx.fillRect(100,100,200,100)  绘制的是一个实心的矩形</li>
</ul>
</li>
<li>清除矩形绘制内容<ul>
<li>ctx.clearRect(100,100,200,100);  </li>
</ul>
</li>
</ul>
<h4 id="绘制渐变"><a href="#绘制渐变" class="headerlink" title="绘制渐变"></a>绘制渐变</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>canvas<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        canvas&#123;</span></div><div class="line"><span class="undefined">            border: 1px solid #ccc;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span></div><div class="line"><span class="javascript">    <span class="comment">/*渐变的方案*/</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> linearGradient = ctx.createLinearGradient(<span class="number">100</span>,<span class="number">150</span>,<span class="number">300</span>,<span class="number">150</span>);</span></div><div class="line"><span class="javascript">    <span class="comment">/* 0-1  0-100%  */</span></span></div><div class="line"><span class="javascript">    linearGradient.addColorStop(<span class="number">0</span>,<span class="string">'red'</span>);</span></div><div class="line"><span class="javascript">    linearGradient.addColorStop(<span class="number">0.5</span>,<span class="string">'blue'</span>);</span></div><div class="line"><span class="javascript">    linearGradient.addColorStop(<span class="number">1</span>,<span class="string">'yellow'</span>);</span></div><div class="line"><span class="undefined">    ctx.fillStyle = linearGradient;</span></div><div class="line"><span class="undefined">    ctx.fillRect(100,100,200,100);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种类似于css3中的径向渐变。  </p>
<h4 id="绘制曲线"><a href="#绘制曲线" class="headerlink" title="绘制曲线"></a>绘制曲线</h4><p>总的来说，绘制曲线就是利用数学的方法来模拟抛物线，从而得到曲线或者其他形状的图像。<br>原理就是线都是由点构成的，所以可以通过描点的方法来实现画线的方法。<br><strong>绘制圆弧</strong><br>ctx.arc(x0,y0,150,0,-Math.PI/2,true);<br>==参数解析：(圆中心X坐标，圆中心y坐标，圆中半径，起始弧度，结束弧度，是顺时针还是逆时针，默认值是false顺时针)。==  </p>
<h4 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h4><ul>
<li>ctx.font=”40px 楷书”;<ul>
<li>这种写法类似于css中的font的写法</li>
</ul>
</li>
<li><strong>在canvas文本对齐方式，基于坐标点</strong><ul>
<li>ctx.textAlign=”left”;<ul>
<li>默认是向左对齐，</li>
<li>控制左右对齐</li>
</ul>
</li>
<li>ctx.textBaseline=”bottom”;<ul>
<li>上下对齐方式</li>
</ul>
</li>
</ul>
</li>
<li>ctx.strokeText(str,100,100,100);</li>
<li>文本的定位在文字的左下角(默认)，但是设置文本宽度在小于画布的宽度的时候会压缩文字；但是设置文本宽度大于或者等于画布宽度的时候，字体的文本宽度不会改变了。</li>
<li>在绘制的时候stroke的效果看似是填充效果，而fill效果的填充效果倒像是stroke的效果。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*通过绘图*/</span></div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> str = <span class="string">'我是程序猿，非常荣幸'</span>;</div><div class="line"></div><div class="line">    ctx.font = <span class="string">'40px 隶书'</span>;</div><div class="line"></div><div class="line">    ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">    <span class="comment">/*在canvas文本对齐方式 基于坐标点*/</span></div><div class="line">    <span class="comment">/*控制左右的对齐*/</span></div><div class="line">    ctx.textAlign = <span class="string">'left'</span>;<span class="comment">//left</span></div><div class="line">    <span class="comment">/*上下对象方式*/</span></div><div class="line">    ctx.textBaseline = <span class="string">'bottom'</span>;</div><div class="line"></div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">500</span>,<span class="number">100</span>);</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    <span class="comment">/*文本的定位在左下角*/</span></div><div class="line">    <span class="comment">/*当最大宽度小于 文本的宽度  压缩*/</span></div><div class="line">    ctx.strokeText(str,<span class="number">100</span>,<span class="number">100</span>,<span class="number">600</span>);</div><div class="line"></div><div class="line">    <span class="comment">/*需要文字的长度*/</span></div><div class="line">    <span class="keyword">var</span> textWidth = ctx.measureText(str).width;</div><div class="line">    <span class="comment">/*进行渐变  需要文字的长度来确定结束位置*/</span></div><div class="line">    <span class="keyword">var</span> linearGradient = ctx.createLinearGradient(<span class="number">100</span>,<span class="number">200</span>,<span class="number">100</span>+textWidth,<span class="number">200</span>);</div><div class="line">    linearGradient.addColorStop(<span class="number">0</span>,<span class="string">'red'</span>);</div><div class="line">    linearGradient.addColorStop(<span class="number">0.5</span>,<span class="string">'blue'</span>);</div><div class="line">    linearGradient.addColorStop(<span class="number">1</span>,<span class="string">'yellow'</span>);</div><div class="line"></div><div class="line">    ctx.fillStyle =linearGradient;</div><div class="line">    ctx.fillText(str,<span class="number">100</span>,<span class="number">200</span>);</div></pre></td></tr></table></figure>
<h4 id="canvas中绘制图片"><a href="#canvas中绘制图片" class="headerlink" title="canvas中绘制图片"></a>canvas中绘制图片</h4><ul>
<li>在canvas中使用图片<ul>
<li>动态创建一个图片元素，使这个元素保存在内存里面</li>
<li>有两种方法<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种方法</span></div><div class="line"><span class="keyword">var</span> img=<span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">img.src=<span class="string">"imgages/01.jpg"</span>;</div><div class="line">img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(img);</div><div class="line">&#125;</div><div class="line"><span class="comment">//第二种方法</span></div><div class="line"><span class="keyword">var</span> img1=<span class="keyword">new</span> Image();</div><div class="line">img1.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(img1);</div><div class="line">&#125;</div><div class="line">img1.src=<span class="string">"images/01.jpg"</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>上面的例子告诉我们图片也有onload事件，但是在canvas不合理。<br>在实例应用中第二种方法性能会好一点，所以canvas习惯使用这种方法。<br>但是上面代码有个兼容性问题，<strong>在IE中src的加载可能在onload之前，所以后面的onload事件可能绑定不到，所以要把src放到绑定事件的后面。</strong>  </p>
<ul>
<li>canvas中绘制图片的写法有三种<ul>
<li>第一种：(图片对象，绘制的坐标X轴，绘制的坐标Y轴)ctx.drawImage(img,100,100);</li>
<li>第二种：(图片对象，绘制的坐标X轴，绘制的坐标Y轴，绘制的图片宽度，绘制的图片高度)ctx.drawImage(img,100,100,50,50);</li>
<li>第三种：(图片对象，图片的定位X轴，图片的定位Y轴，截取图片宽度，截取图片高度，绘制的坐标X轴，绘制的坐标Y轴，绘制的图片宽度，绘制的图片高度)ctx.drawImage(img,500,500,500,500,100,100,200,200);  </li>
</ul>
</li>
</ul>
<h4 id="帧动画"><a href="#帧动画" class="headerlink" title="帧动画"></a>帧动画</h4><p>以前js所学的是animate是帧动画，而css3中的动画属于补间动画，只需要设置起始和终止位置就可以了，中间过程会自动补全。  </p>
<h4 id="转化保存和恢复"><a href="#转化保存和恢复" class="headerlink" title="转化保存和恢复"></a>转化保存和恢复</h4><ul>
<li>translate移动的是坐标轴，ctx.translate(100,100);</li>
<li><p>rotate旋转使用的是弧度，默认是绕着坐标原点，旋转过后，坐标轴方向发生改变</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       ctx.clearRect(<span class="number">-100</span>,<span class="number">-100</span>,ctx.canvas.width,ctx.canvas.height);</div><div class="line">       ctx.rotate(<span class="built_in">Math</span>.PI/<span class="number">60</span>);</div><div class="line">       ctx.strokeRect(<span class="number">-50</span>,<span class="number">-50</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">   &#125;,<span class="number">100</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>x轴方向缩放，y轴方向的缩放，是坐标轴的缩放。</p>
</li>
<li>ctx.scale(2,2);</li>
<li>ctx.fillText(“文字”,100,100);</li>
<li>ctx.strokeRect(-50,-50,100,100);</li>
<li><strong>ctx.save();</strong><ul>
<li>保存一些列样式，保存多个系列样式。存储结构是栈，后进先出。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">   <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line"></div><div class="line">   ctx.lineWidth = <span class="number">30</span>;</div><div class="line">   ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">   ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">   ctx.lineTo(<span class="number">300</span>,<span class="number">100</span>);</div><div class="line">   ctx.stroke();</div><div class="line">   <span class="comment">/*保存一系列样式*/</span></div><div class="line">   <span class="comment">/*保存多个系列样式*/</span></div><div class="line">   <span class="comment">/*存储结构是栈  后进先出*/</span></div><div class="line">   ctx.save();</div><div class="line"></div><div class="line">   ctx.beginPath();</div><div class="line">   ctx.lineWidth = <span class="number">20</span>;</div><div class="line">   ctx.strokeStyle = <span class="string">'green'</span>;</div><div class="line">   ctx.moveTo(<span class="number">100</span>,<span class="number">200</span>);</div><div class="line">   ctx.lineTo(<span class="number">300</span>,<span class="number">200</span>);</div><div class="line">   ctx.stroke();</div><div class="line">   ctx.save();</div><div class="line"></div><div class="line">   ctx.beginPath();</div><div class="line">   ctx.restore();</div><div class="line">   ctx.moveTo(<span class="number">100</span>,<span class="number">300</span>);</div><div class="line">   ctx.lineTo(<span class="number">300</span>,<span class="number">300</span>);</div><div class="line">   ctx.stroke();</div><div class="line"></div><div class="line">   ctx.beginPath();</div><div class="line">   ctx.restore();</div><div class="line">   ctx.moveTo(<span class="number">100</span>,<span class="number">400</span>);</div><div class="line">   ctx.lineTo(<span class="number">300</span>,<span class="number">400</span>);</div><div class="line">   ctx.stroke();</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="canvas径向渐变"><a href="#canvas径向渐变" class="headerlink" title="canvas径向渐变"></a>canvas径向渐变</h4><p>createLInearGradient()方法创建放射状/原型渐变对象。  这种方式接受四个参数，分别是开始的位置的x坐标和y坐标，以及结束后的x坐标和y坐标。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</div><div class="line"><span class="keyword">var</span> ctx=c.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> grd=ctx.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">170</span>,<span class="number">0</span>);</div><div class="line">grd.addColorStop(<span class="number">0</span>,<span class="string">"black"</span>);</div><div class="line">grd.addColorStop(<span class="number">1</span>,<span class="string">"white"</span>);</div><div class="line"></div><div class="line">ctx.fillStyle=grd;</div><div class="line">ctx.fillRect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">150</span>,<span class="number">100</span>);</div></pre></td></tr></table></figure></p>
<p>渐变可以用于填充矩形，原型，线条，文本等等。  </p>
<ul>
<li>请使用该对象作为strokeStyle或fillStyle属性的值。</li>
<li>请使用addColorStop()方法规定不同的颜色，以及在gradient对象中的何处定位颜色。  </li>
<li>JavaScript语法<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">context.createRadialGradient(x0,y0,r0,x1,y1,r1);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>x0，渐变的开始圆的x坐标。</li>
<li>y0, 渐变的开始圆的y坐标</li>
<li>r0，开始圆的半径</li>
<li>x1, 渐变的结束圆的x坐标</li>
<li>x2，渐变的结束圆的y坐标</li>
<li>r1，结束圆的半径<h4 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h4></li>
</ul>
<ul>
<li>FPS的概念：简单来说就是每秒钟绘制多少帧的图层。</li>
<li>setTimeout定时器默认在程序的最后执行，就相当于一个异步程序。<br><strong>注意canvas中的图片时属于canvas的image，所以不支持css3的属性。canvas只支持旋转坐标轴。</strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;canvas&quot;&gt;&lt;a href=&quot;#canvas&quot; class=&quot;headerlink&quot; title=&quot;canvas&quot;&gt;&lt;/a&gt;canvas&lt;/h1&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;
    
    </summary>
    
      <category term="canvas" scheme="http://yoursite.com/categories/canvas/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>CSS3简单介绍</title>
    <link href="http://yoursite.com/2016/09/10/13.CSS3%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2016/09/10/13.CSS3简单介绍/</id>
    <published>2016-09-10T03:21:35.000Z</published>
    <updated>2017-11-03T09:10:14.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><p>css3就是css版本的一个升级，里面增加了一些新的样式，增强了一些样式。<br>css3现状：  </p>
<ol>
<li>浏览器支持程度差 ，需要添加私有前缀。</li>
<li>移动端支持优于PC端。</li>
<li>不断改进中</li>
<li>应用相对广泛。<br>如何对待   </li>
<li>坚持渐进增强原则</li>
<li>考虑用户群体</li>
<li>遵照产品的方案</li>
<li>听boss的<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3></li>
</ol>
<table>
<thead>
<tr>
<th>选择器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>E[att] css2</td>
<td>选择具有att属性的E元素</td>
</tr>
<tr>
<td>E[att=”val”] css2</td>
<td>选择具有att属性且属性值等于val的E元素</td>
</tr>
<tr>
<td>E[att~=”val”] css2</td>
<td>选择具有att属性且属性值为用空格分隔的字母列表，其中一个等于val的E元素</td>
</tr>
<tr>
<td>E[att^=”val”] css3</td>
<td>选择具有att属性且属性值为以val开头的字符串的E元素</td>
</tr>
<tr>
<td>E[att$=”val”] css3</td>
<td>选择具有att属性且属性值为以val结尾的字符串的E元素</td>
</tr>
<tr>
<td>E[att*=”val”] css3</td>
<td>选择具有att属性且属性值为包含val的字符串的E元素</td>
</tr>
<tr>
<td>E[att竖线=”val”] css2</td>
<td>选择具有att属性且属性值为val开头并用连接符”-“分隔的字符串的E元素，如果属性值仅为val，也将被选择</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="comment">/*元素[属性名字]---&gt;找有href属性a标签*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*a[href=""] 这个双引号可以省略*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[href]</span>&#123;  <span class="attribute">background-color</span>: red;  &#125;</span></div><div class="line"><span class="css">    <span class="comment">/*获取的是带有href属性的a标签,同时这个属性值:海阔天空.mp3*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[href="海阔天空.mp3"]</span>&#123;</span></div><div class="line"><span class="undefined">      background-color: green;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="comment">/*获取的是属性值以:小 开头的元素*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[href^="小"]</span>&#123;</span></div><div class="line"><span class="undefined">      background-color: yellow;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="comment">/*获取的是属性以: .avi 结尾的*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[href$=".avi"]</span>&#123;</span></div><div class="line"><span class="undefined">      background-color: blue;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="comment">/*获取的是href属性值只要包含:美 的元素*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[href*=美]</span>&#123;</span></div><div class="line"><span class="undefined">      background-color: black;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>属性选择器：针对属性的<br>E[att=值] E就是元素，att—》属性的名字<br>值：可以用双引号<br>==伪类选择器：==<br>:first-child<br>:last-child<br>结构（位置）选择器<br>:nth-child(n)—&gt;第一个这个元素（不是索引，第几个就是第几个）<br>.nth-last-child(n)—从后面向前数<br>注意：n遵循线性变化，其取值0、1、2、3、4…，n可以是多种形式：nth-child(2n+1)、nth-child(2n+1)等。<br>：指的是E元素的父元素，并对应位置的子元素必须是E。</p>
<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="comment">/*!*第一个:从li的父级元素中第一个li*!*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;<span class="attribute">color</span>: red&#125;</span></div><div class="line"><span class="css">    <span class="comment">/*!*最后一个*!*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;<span class="attribute">color</span>: green&#125;</span></div><div class="line"><span class="css">    <span class="comment">/*!*第三个:n:第几个*!*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span>&#123;<span class="attribute">color</span>: red&#125;</span></div><div class="line"><span class="css">    <span class="comment">/*!*偶数:*!*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(even)</span>&#123;<span class="attribute">color</span>: orange&#125;</span></div><div class="line"><span class="css">    <span class="comment">/*!*奇数*!*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(odd)</span>&#123;<span class="attribute">color</span>: indigo&#125;</span></div><div class="line"><span class="css">    <span class="comment">/*!*最后一列*!*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(7n)</span>&#123;<span class="attribute">color</span>: green&#125;</span></div><div class="line"><span class="css">    <span class="comment">/*!*后面第二列*!*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(7n-1)</span>&#123;<span class="attribute">color</span>: green&#125;</span></div><div class="line"><span class="css">    <span class="comment">/*!*前三个*!*/</span></span></div><div class="line"><span class="css">    !*<span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(-n+3)</span>&#123;<span class="attribute">color</span>: green&#125;*!</span></div><div class="line"><span class="css">    <span class="comment">/*!*n从0开始到页面承受的范围内*!*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*!*后三个*!*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-last-child(-n+3)</span>&#123;<span class="attribute">color</span>: darkcyan;&#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>伪类选择器<br>先找li的父级元素ul，再从ul中找到第一个子元素，必须是li  </p>
<ol>
<li>第一个li  li:first-child{color:red;}</li>
<li>最后一个  li:las-child{color:red;}</li>
<li>:nth-child(n)  n的范围0到无穷，按照这个数字个数查找  li:nthc-child(n){color:red;}</li>
<li>偶数   li:nth-child(even){color:blue;}</li>
<li>奇数   li:nth-child(odd){color:green;}</li>
<li>最后一列  li:nth-child(7n){color:red;} 7为总列数</li>
<li>最后的第二列 li:nth-child(7n-1){color:red;}</li>
<li>前三个   li:nth-child(-n+3){color:red;}</li>
<li>后三个   li:nth-last-child(-n+3){color:red;}<br>伪结构（位置）选择器：<br>:first-child—第一个<br>:last-child—最后一个<br>:nth-child(n)—n就是一个数字，从0开始到无穷大<br>:nth-lastchild(n)—从后面向前数<br>注意：n遵循线性变化，其取值0、1、2、3、4…，n可以是多种形式：nth-child(2n+1)、nth-child(2n+1)等。<br>：前面指的是E元素的父元素，并对应位置的子元素必须是E。 <h4 id="空选择器E-empty"><a href="#空选择器E-empty" class="headerlink" title="空选择器E:empty{]"></a>空选择器E:empty{]</h4>空的意思就是没有的话执行什么，有的话干什么。例如，span中没有内容就隐藏，如果有就显示<br>选中没有任何子节点的E元素（使用不是很广泛）<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-tag">span</span><span class="selector-pseudo">:empty</span>&#123;</span></div><div class="line"><span class="undefined">     display: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>span:empty{display:none;}  </p>
<h4 id="目标选择器-E-target"><a href="#目标选择器-E-target" class="headerlink" title="目标选择器 E:target"></a>目标选择器 E:target</h4><p>结合锚点进行使用，处于当前锚点的元素会被选中<br>例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-tag">h3</span><span class="selector-pseudo">:target</span>&#123;</span></div><div class="line"><span class="undefined">      background-color: yellow;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="排除选择器-E-not-selector-除了selector（任意选择器）外的元素会被选中"><a href="#排除选择器-E-not-selector-除了selector（任意选择器）外的元素会被选中" class="headerlink" title="排除选择器   E:not(selector)除了selector（任意选择器）外的元素会被选中"></a>排除选择器   E:not(selector)除了selector（任意选择器）外的元素会被选中</h4><p>例如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="comment">/*排除某个应用two类样式的元素*/</span></span></div><div class="line"><span class="css">    <span class="selector-id">#dv3</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not(.two)</span>&#123;<span class="attribute">background-color</span>: blue;&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="伪对象（元素）选择器"><a href="#伪对象（元素）选择器" class="headerlink" title="伪对象（元素）选择器"></a>伪对象（元素）选择器</h4><p>E::first-letter—&gt;第一个字符<br>E::first-line—&gt;第一行<br>E::selection—&gt;选中的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="comment">/*改变的是每个li中第一个字符的颜色*/</span></span></div><div class="line"><span class="css">    <span class="selector-id">#dv1</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-letter</span>&#123;</span></div><div class="line"><span class="undefined">      color: yellow;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="comment">/*c3的写法*/</span></span></div><div class="line"><span class="css">    <span class="selector-id">#dv1</span> <span class="selector-tag">li</span><span class="selector-pseudo">::first-letter</span>&#123;</span></div><div class="line"><span class="undefined">      color: yellow;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="comment">/*字体下沉*/</span></span></div><div class="line"><span class="css">    <span class="selector-id">#dv2</span> <span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:first-letter</span>&#123;</span></div><div class="line"><span class="undefined">      font-size: 40px;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="comment">/*第一行的字体颜色改变*/</span></span></div><div class="line"><span class="css">    <span class="selector-id">#dv3</span> <span class="selector-tag">p</span><span class="selector-pseudo">:first-line</span>&#123;</span></div><div class="line"><span class="undefined">      color: green;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="comment">/*伪类选择器-----以前的写法*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:before</span>,<span class="selector-tag">li</span><span class="selector-pseudo">:after</span>&#123;</span></div><div class="line"><span class="undefined">      content: "";</span></div><div class="line"><span class="undefined">      display: block;</span></div><div class="line"><span class="undefined">      width: 100px;</span></div><div class="line"><span class="undefined">      height: 100px;</span></div><div class="line"><span class="undefined">      background-color: green;</span></div><div class="line"><span class="undefined">      margin-bottom: 10px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="comment">/*伪元素选择器:CSS3中的写法*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">::before</span>,<span class="selector-tag">li</span><span class="selector-pseudo">::after</span>&#123;</span></div><div class="line"><span class="undefined">      content: "";</span></div><div class="line"><span class="undefined">      display: block;</span></div><div class="line"><span class="undefined">      width: 100px;</span></div><div class="line"><span class="undefined">      height: 100px;</span></div><div class="line"><span class="undefined">      background-color: green;</span></div><div class="line"><span class="undefined">      margin-bottom: 10px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="comment">/*以上这种写法还是比较推荐单冒号的写法的*/</span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>before和after在E元素内部的开始位置和结束位置创建一个元素，该元素是行内元素，并且必须要结合content属性使用。<br>上述写法中的content:””;和display：block两行代码必须写，content中可以由内容，而diaplay：block改为定位也可。单冒号和双冒号的区别在于区分伪类和伪元素。  </p>
<h3 id="颜色的增强"><a href="#颜色的增强" class="headerlink" title="颜色的增强"></a>颜色的增强</h3><p>颜色的写法有单词的写法，十六进制的写法，rgb的写法和HSL的写法。</p>
<ul>
<li>RGB取值范围为0~255</li>
<li>hsl(色调，饱和度，亮度)；</li>
<li>H代表色调，取值范围0-360,0/360表示红色，120表示绿色，240表示蓝色。</li>
<li>S代表饱满度，取值范围0-100%;</li>
<li>L代表亮度，取值范围0-100%;</li>
<li>A代表透明度，取值范围为0-1；</li>
<li>hsla(色调，饱和度，亮度，透明度);  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    span&#123;</span></div><div class="line"><span class="undefined">        color:hsla&#123;360,50%,50%,0.3&#125;;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>关于css透明度  </p>
<ol>
<li>opacity只能针对整个盒子设置透明度，子盒子及内容会继承父盒子的透明度； </li>
<li>transparent不可调节透明度，始终完全透明。<h3 id="border"><a href="#border" class="headerlink" title="border"></a>border</h3>border:三个值：宽度，颜色，样式；<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    div&#123;</span></div><div class="line"><span class="css">        <span class="selector-tag">border-top-width</span><span class="selector-pseudo">:20px</span>;</span></div><div class="line"><span class="css">        <span class="selector-tag">border-top-style</span><span class="selector-pseudo">:dashed</span>;</span></div><div class="line"><span class="css">        <span class="selector-tag">border-bottom-color</span><span class="selector-pseudo">:transparent</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    li&#123;</span></div><div class="line"><span class="undefined">      font-size: 30px;</span></div><div class="line"><span class="undefined">      font-family: "全新硬笔行书简";</span></div><div class="line"><span class="css">      <span class="comment">/*水平位置,垂直位置,模糊度,颜色*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*text-shadow: 5px 5px 5px green ;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*文字的阴影可以有很多*/</span></span></div><div class="line"><span class="undefined">      text-shadow: 5px 5px 5px green ,5px 5px 5px yellow,5px 5px 5px red;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>文字阴影（text-shadow）：水平位置，垂直位置，模糊度，颜色。  文字的阴影可以有很多。水平偏移量，正值向右，负值向左；垂直偏移量，正值向下，负值向上；模糊度不能为负值。<br>==文本浮雕效果案例==<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 文本<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    body &#123;</span></div><div class="line"><span class="undefined">      background-color: gray;</span></div><div class="line"><span class="undefined">      font: bold 6em "全新硬笔行书简";</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    div &#123;</span></div><div class="line"><span class="undefined">      margin: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#808080</span>;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.to</span>&#123;</span></div><div class="line"><span class="undefined">      text-shadow: -1px -1px 0 white,1px 1px 0 black;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.ao</span>&#123;</span></div><div class="line"><span class="undefined">      text-shadow: -1px -1px 0 black,1px 1px 0 white;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"to"</span>&gt;</span>作为一个人你要有优点<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ao"</span>&gt;</span>作为一个人你要有缺点<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>css3中可以通过box-sizing来指定盒模型，这样我们计算盒子大小的方式就发生了改变。可以分成两种情况：</p>
<ul>
<li>1.box-sizing:border-box  盒子大小为width</li>
<li>2.box-sizing:content-box  盒子大小为width+padding+border。  </li>
<li>注意上面的width是css属性里设置的width。content值时会自动调整的。<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    div&#123;</span></div><div class="line"><span class="undefined">      width: 300px;</span></div><div class="line"><span class="undefined">      height: 300px;</span></div><div class="line"><span class="undefined">      border: 5px solid red;</span></div><div class="line"><span class="undefined">      margin: 0 auto;</span></div><div class="line"><span class="undefined">      margin-top: 50px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="comment">/*C3中的为元素选择器*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span>&#123;</span></div><div class="line"><span class="undefined">      padding-top: 50px;</span></div><div class="line"><span class="undefined">      content: "哎呦喂,常来啊";</span></div><div class="line"><span class="undefined">      display: block;</span></div><div class="line"><span class="undefined">      width: 100%;</span></div><div class="line"><span class="undefined">      height: 100%;</span></div><div class="line"><span class="undefined">      background-color: green;</span></div><div class="line"><span class="undefined">      box-sizing: border-box;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cls"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>box-sizing属性默认设置为content-box。当设置为border-box的时候，盒子整体大小不会改变了就。即使设置了padding也没有问题，只是会把内容区域变小。<br>关于网页常见的图片高亮效果可以给他设置与背景色一致的边框来模拟高亮效果。同时给其设置hover属性来模拟。 </p>
<hr>
<h2 id="边框（重点掌握）"><a href="#边框（重点掌握）" class="headerlink" title="边框（重点掌握）"></a>边框（重点掌握）</h2><h3 id="边框的圆角的设置"><a href="#边框的圆角的设置" class="headerlink" title="边框的圆角的设置"></a>边框的圆角的设置</h3><p>圆角处理时，脑中要形成圆，圆心，横轴，纵轴的概念，正圆是椭圆的一种特殊情况。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.cls</span>&#123;</span></div><div class="line"><span class="css">    <span class="comment">/*四个值分别为左上角，右上角，右下角，左下角*/</span></span></div><div class="line"><span class="css">        <span class="selector-tag">border-radius</span><span class="selector-pseudo">:20px</span> 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span></div><div class="line"><span class="css">    <span class="comment">/*一个角有两个半径，一个是水平的一个是垂直的。*/</span></span></div><div class="line"><span class="undefined">        border-radius:20px 20px 20px 20px/40px 40px 40px 40px;</span></div><div class="line"><span class="css">        <span class="comment">/*前面的四个表示的水平方向，后面的四个表示垂直方向*/</span></span></div><div class="line"><span class="css">        <span class="comment">/*有三个值的话第一个值代表左上，第二个值代表右上和左下，第三个值代表右下。*/</span></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="边框阴影"><a href="#边框阴影" class="headerlink" title="边框阴影"></a>边框阴影</h4><p>首先，阴影是不会影响元素布局的，水平偏移量正值向右，负值向左；垂直偏移量，正值向下，负值向上；模糊度不能为负值，inset可以设置内阴影。<br>注意：设置边框阴影不会改变盒子的大小，即不会影响兄弟元素的布局。可以设置多重边框阴影，实现更好的效果，增强立体感，符合渐进增强，实际开发中可以大胆使用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.cls</span>&#123;</span></div><div class="line"><span class="undefined">      width: 200px;</span></div><div class="line"><span class="undefined">      height: 100px;</span></div><div class="line"><span class="undefined">      background-color: green;</span></div><div class="line"><span class="undefined">      border: 5px solid red;</span></div><div class="line"><span class="css">      <span class="comment">/*box-shadow: 5px 5px 5px blue,5px 5px 5px yellow;*/</span></span></div><div class="line"><span class="undefined">      //这里的inset指的是内阴影，在div里面显示的阴影</span></div><div class="line"><span class="undefined">      box-shadow: inset 5px 5px 5px blue;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">      margin-right: 20px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h3><p>设置的图片灰被切割成九宫格，形式，然后进行设置。<br>1.round会自动调整尺寸，完整显示边框图片<br>2.repeat单纯平铺，多余部分，会被裁剪而不能完整显示。  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS3边框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    body &#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#F7F7F7</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ul &#123;</span></div><div class="line"><span class="undefined">      width: 960px;</span></div><div class="line"><span class="undefined">      margin: 40px auto;</span></div><div class="line"><span class="undefined">      list-style: none;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#FFF</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    li &#123;</span></div><div class="line"><span class="undefined">      padding: 15px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span></div><div class="line"><span class="undefined">      width: 300px;</span></div><div class="line"><span class="undefined">      height: 200px;</span></div><div class="line"><span class="undefined">      border-width: 27px;</span></div><div class="line"><span class="undefined">      border-color: red;</span></div><div class="line"><span class="xml">      <span class="comment">&lt;!--稍微低点版本的浏览器可以不用写--&gt;</span></span></div><div class="line"><span class="undefined">      border-style: solid;</span></div><div class="line"><span class="css">      <span class="comment">/*引入了图片的路径*/</span></span></div><div class="line"><span class="undefined">      border-image-source: url("images/border.png");</span></div><div class="line"><span class="css">      <span class="comment">/*切割的大小不需要px*/</span></span></div><div class="line"><span class="undefined">      border-image-slice: 27;</span></div><div class="line"><span class="css">      <span class="comment">/*是否平铺*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*默认的  repeat:平铺, round:按照比例显示，stretch表示拉伸，round环绕（时钟显示全的）*/</span></span></div><div class="line"><span class="undefined">      border-image-repeat: stretch;</span></div><div class="line"><span class="xml">      <span class="comment">&lt;!--这个属性只能改变边框的宽，不会影响整个元素的宽度--&gt;</span></span></div><div class="line"><span class="css">      <span class="selector-tag">border-image-width</span><span class="selector-pseudo">:2px</span>;</span></div><div class="line"><span class="xml">      <span class="comment">&lt;!--下面的这个会影响元素的大小--&gt;</span></span></div><div class="line"><span class="undefined">      border-width：30px；</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/border_image_2.png"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>==边框的应用的案例==<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS3 边框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">		body, ul, li, dl, dt, dd, h1, h2, h3, h4, h5 &#123;</span></div><div class="line"><span class="undefined">			margin: 0;</span></div><div class="line"><span class="undefined">			padding: 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">		body &#123;</span></div><div class="line"><span class="css">			<span class="selector-tag">background-color</span>: <span class="selector-id">#F7F7F7</span>;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.wrapper</span> &#123;</span></div><div class="line"><span class="undefined">			width: 1000px;</span></div><div class="line"><span class="undefined">			margin: 0 auto;</span></div><div class="line"><span class="undefined">			padding: 20px;</span></div><div class="line"><span class="undefined">			box-sizing: border-box;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">		header &#123;</span></div><div class="line"><span class="undefined">			padding: 20px 0;</span></div><div class="line"><span class="undefined">			margin-bottom: 20px;</span></div><div class="line"><span class="undefined">			text-align: center;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">		header h3 &#123;</span></div><div class="line"><span class="undefined">			line-height: 1;</span></div><div class="line"><span class="undefined">			font-weight: normal;</span></div><div class="line"><span class="undefined">			font-size: 28px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.main</span> &#123;</span></div><div class="line"><span class="css">			<span class="comment">/*overflow: hidden;*/</span></span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.main</span><span class="selector-pseudo">:after</span> &#123;</span></div><div class="line"><span class="undefined">			content: '';</span></div><div class="line"><span class="undefined">			clear: both;</span></div><div class="line"><span class="undefined">			display: block;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.main</span> <span class="selector-class">.item</span> &#123;</span></div><div class="line"><span class="undefined">			width: 210px;</span></div><div class="line"><span class="undefined">			height: 210px;</span></div><div class="line"><span class="undefined">			margin: 0 30px 30px 0;</span></div><div class="line"><span class="undefined">			display: flex;</span></div><div class="line"><span class="undefined">			position: relative;</span></div><div class="line"><span class="css">			<span class="selector-tag">background-color</span>: <span class="selector-id">#FFF</span>;</span></div><div class="line"><span class="undefined">			float: left;</span></div><div class="line"><span class="css">			<span class="selector-tag">box-shadow</span>: 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-id">#CCC</span>;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined">		</span></div><div class="line"><span class="css">		<span class="selector-class">.main</span> <span class="selector-class">.item</span><span class="selector-pseudo">:after</span> &#123;</span></div><div class="line"><span class="undefined">			content: attr(data-brief);</span></div><div class="line"><span class="undefined">			display: block;</span></div><div class="line"><span class="undefined">			width: 100%;</span></div><div class="line"><span class="undefined">			height: 100%;</span></div><div class="line"><span class="undefined">			text-align: center;</span></div><div class="line"><span class="undefined">			line-height: 210px;</span></div><div class="line"><span class="undefined">			position: absolute;</span></div><div class="line"><span class="undefined">			top: 0;</span></div><div class="line"><span class="undefined">			left: 0;</span></div><div class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#FFF</span>;</span></div><div class="line"><span class="undefined">			font-family: '微软雅黑';</span></div><div class="line"><span class="undefined">			font-size: 18px;</span></div><div class="line"><span class="undefined">			background-color: rgba(170, 170, 170, 0);</span></div><div class="line"><span class="undefined">			z-index: -1;</span></div><div class="line"><span class="css">			<span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.3s</span> <span class="selector-tag">ease-in</span>;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.main</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span> &#123;</span></div><div class="line"><span class="css">			<span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(170, 170, 170, 0<span class="selector-class">.6</span>);</span></div><div class="line"><span class="undefined">			z-index: 100;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.main</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(4n)</span> &#123;</span></div><div class="line"><span class="undefined">			margin-right: 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">		/*.main .item:nth-last-child(-n+5) &#123;</span></div><div class="line"><span class="undefined">			margin-bottom: 0;</span></div><div class="line"><span class="undefined">		&#125;*/</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/* 以上是骨架样式 */</span></span></div><div class="line"><span class="css">		<span class="comment">/* 1、2、3、4 顺时针 */</span></span></div><div class="line"><span class="css">		<span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 180px;</span></div><div class="line"><span class="undefined">			height: 180px;</span></div><div class="line"><span class="undefined">			margin: auto;</span></div><div class="line"><span class="undefined">			border: 1px solid red;</span></div><div class="line"><span class="css">			<span class="comment">/*border-radius: 50% 30% 20%;*/</span></span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined">		</span></div><div class="line"><span class="css">		<span class="selector-class">.square</span> &#123;</span></div><div class="line"><span class="undefined">			border-radius: 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined">		</span></div><div class="line"><span class="css">		<span class="comment">/*拱形*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			border-radius: 90px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*拱形*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			border-radius: 90px 90px 0 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*半圆*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(3)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			height: 90px;</span></div><div class="line"><span class="undefined">			border-radius: 90px 90px 0 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*左上角*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(4)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="css">			<span class="comment">/*height: 90px;*/</span></span></div><div class="line"><span class="undefined">			border-radius: 90px 0 0 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*四分之一圆*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(5)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 90px;</span></div><div class="line"><span class="undefined">			height: 90px;</span></div><div class="line"><span class="undefined">			border-radius: 90px 0 0 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*横着的椭圆*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(6)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			height: 90px;</span></div><div class="line"><span class="css">			<span class="comment">/*border-radius: 50%;*/</span></span></div><div class="line"><span class="undefined">			border-radius: 90px 90px 90px 90px / 45px 45px 45px 45px;</span></div><div class="line"><span class="css">			<span class="comment">/*border-radius: 45px / 90px;*/</span></span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*竖着的椭圆*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(7)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 90px;</span></div><div class="line"><span class="undefined">			border-radius: 45px 45px 45px 45px / 90px 90px 90px 90px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*半个横着的椭圆*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(8)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			height: 45px;</span></div><div class="line"><span class="undefined">			border-radius: 90px 90px 0 0 / 45px 45px 0 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*半个竖着的椭圆*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(9)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 45px;</span></div><div class="line"><span class="undefined">			border-radius: 45px  0 0 45px / 90px 0 0 90px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*四分之一竖着的椭圆*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(10)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 45px;</span></div><div class="line"><span class="undefined">			height: 90px;</span></div><div class="line"><span class="undefined">			border-radius: 45px 0 0 0 / 90px 0 0 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*饼环*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(11)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 40px;</span></div><div class="line"><span class="undefined">			height: 40px;</span></div><div class="line"><span class="undefined">			border: 70px solid red;</span></div><div class="line"><span class="undefined">			border-radius: 90px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*圆饼*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(12)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 40px;</span></div><div class="line"><span class="undefined">			height: 40px;</span></div><div class="line"><span class="undefined">			border: 70px solid red;</span></div><div class="line"><span class="undefined">			border-radius: 60px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*左上角圆饼*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(13)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 60px;</span></div><div class="line"><span class="undefined">			height: 60px;</span></div><div class="line"><span class="undefined">			border: 60px solid red;</span></div><div class="line"><span class="undefined">			border-radius: 90px 0 0 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*对角圆饼*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(14)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 60px;</span></div><div class="line"><span class="undefined">			height: 60px;</span></div><div class="line"><span class="undefined">			border: 60px solid red;</span></div><div class="line"><span class="undefined">			border-radius: 90px 0 90px 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*四边不同色*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(15)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 0px;</span></div><div class="line"><span class="undefined">			height: 0px;</span></div><div class="line"><span class="undefined">			border-width: 90px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-color: red green yellow blue;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*右透明色*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(16)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 0px;</span></div><div class="line"><span class="undefined">			height: 0px;</span></div><div class="line"><span class="undefined">			border-width: 90px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-color: red green yellow blue;</span></div><div class="line"><span class="undefined">			border-right-color: transparent;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*圆右透明色*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(17)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 0px;</span></div><div class="line"><span class="undefined">			height: 0px;</span></div><div class="line"><span class="undefined">			border-width: 90px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-color: red;</span></div><div class="line"><span class="undefined">			border-right-color: transparent;</span></div><div class="line"><span class="undefined">			border-radius: 90px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*圆右红透明色*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(18)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 0px;</span></div><div class="line"><span class="undefined">			height: 0px;</span></div><div class="line"><span class="undefined">			border-width: 90px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-color: transparent;</span></div><div class="line"><span class="undefined">			border-right-color: red;</span></div><div class="line"><span class="undefined">			border-radius: 90px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*阴阳图前世*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(19)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 180px;</span></div><div class="line"><span class="undefined">			height: 0px;</span></div><div class="line"><span class="undefined">			border-top-width: 90px;</span></div><div class="line"><span class="undefined">			border-bottom-width: 90px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-top-color: red;</span></div><div class="line"><span class="undefined">			border-bottom-color: green;</span></div><div class="line"><span class="css">			<span class="comment">/*border-right-color: red;*/</span></span></div><div class="line"><span class="undefined">			border-radius: 90px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*阴阳图前世2*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(20)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 180px;</span></div><div class="line"><span class="undefined">			height: 90px;</span></div><div class="line"><span class="undefined">			border-bottom-width: 90px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-bottom-color: green;</span></div><div class="line"><span class="undefined">			background-color: red;</span></div><div class="line"><span class="css">			<span class="comment">/*border-right-color: red;*/</span></span></div><div class="line"><span class="undefined">			border-radius: 90px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*阴阳图今生*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(21)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 180px;</span></div><div class="line"><span class="undefined">			height: 90px;</span></div><div class="line"><span class="undefined">			border-bottom-width: 90px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-bottom-color: green;</span></div><div class="line"><span class="undefined">			background-color: red;</span></div><div class="line"><span class="undefined">			border-radius: 90px;</span></div><div class="line"><span class="undefined">			position: relative;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(21)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::after</span>,</span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(21)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::before</span> &#123;</span></div><div class="line"><span class="undefined">			content: '';</span></div><div class="line"><span class="undefined">			position: absolute;</span></div><div class="line"><span class="undefined">			top: 50%;</span></div><div class="line"><span class="undefined">			width: 20px;</span></div><div class="line"><span class="undefined">			height: 20px;</span></div><div class="line"><span class="css">			<span class="comment">/*margin: -10px 0 0 0;*/</span></span></div><div class="line"><span class="undefined">			border-width: 35px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-radius: 45px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*左阴阳*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(21)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::after</span> &#123;</span></div><div class="line"><span class="undefined">			background-color: red;</span></div><div class="line"><span class="undefined">			border-color: green;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*右阴阳*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(21)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::before</span> &#123;</span></div><div class="line"><span class="undefined">			background-color: green;</span></div><div class="line"><span class="undefined">			border-color: red;</span></div><div class="line"><span class="undefined">			right: 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*右阴阳*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(22)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 180px;</span></div><div class="line"><span class="undefined">			height: 90px;</span></div><div class="line"><span class="undefined">			border-bottom-width: 90px;</span></div><div class="line"><span class="undefined">			border-bottom-color: green;</span></div><div class="line"><span class="undefined">			border-bottom-style: solid;</span></div><div class="line"><span class="undefined">			background-color: red;</span></div><div class="line"><span class="undefined">			border-radius: 90px;</span></div><div class="line"><span class="undefined">			position: relative;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(22)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::after</span>,</span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(22)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::before</span> &#123;</span></div><div class="line"><span class="undefined">			content: '';</span></div><div class="line"><span class="undefined">			position: absolute;</span></div><div class="line"><span class="undefined">			top: 50%;</span></div><div class="line"><span class="undefined">			width: 20px;</span></div><div class="line"><span class="undefined">			height: 20px;</span></div><div class="line"><span class="undefined">			border-width: 35px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-radius: 45px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(22)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::before</span> &#123;</span></div><div class="line"><span class="undefined">			border-color: green;</span></div><div class="line"><span class="undefined">			background-color: red;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(22)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::after</span> &#123;</span></div><div class="line"><span class="undefined">			right: 0;</span></div><div class="line"><span class="undefined">			border-color: red;</span></div><div class="line"><span class="undefined">			background-color: green;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*消息框*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(23)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 160px;</span></div><div class="line"><span class="undefined">			height: 80px;</span></div><div class="line"><span class="undefined">			background-color: red;</span></div><div class="line"><span class="undefined">			border-radius: 6px;</span></div><div class="line"><span class="undefined">			position: relative;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(23)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::after</span> &#123;</span></div><div class="line"><span class="undefined">			content: '';</span></div><div class="line"><span class="undefined">			width: 0;</span></div><div class="line"><span class="undefined">			height: 0;</span></div><div class="line"><span class="undefined">			border-width: 10px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-color: transparent;</span></div><div class="line"><span class="undefined">			border-right-color: red;</span></div><div class="line"><span class="undefined">			position: absolute;</span></div><div class="line"><span class="undefined">			top: 16px;</span></div><div class="line"><span class="undefined">			left: -20px;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*奇怪的图形*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(24)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 40px;</span></div><div class="line"><span class="undefined">			height: 40px;</span></div><div class="line"><span class="undefined">			border-width: 45px 0 45px 70px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-radius: 0 0 60px 0;</span></div><div class="line"><span class="undefined">			border-color: red;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*奇怪的图形2*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(25)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 100px;</span></div><div class="line"><span class="undefined">			height: 40px;</span></div><div class="line"><span class="undefined">			border-width: 45px 20px 45px 70px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-radius: 60px;</span></div><div class="line"><span class="undefined">			border-color: red;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*QQ对话*/</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(26)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 160px;</span></div><div class="line"><span class="undefined">			height: 80px;</span></div><div class="line"><span class="undefined">			background-color: red;</span></div><div class="line"><span class="undefined">			border-radius: 6px;</span></div><div class="line"><span class="undefined">			position: relative;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(26)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::after</span> &#123;</span></div><div class="line"><span class="undefined">			content: '';</span></div><div class="line"><span class="undefined">			position: absolute;</span></div><div class="line"><span class="undefined">			top: 0;</span></div><div class="line"><span class="undefined">			right: -20px;</span></div><div class="line"><span class="undefined">			width: 30px;</span></div><div class="line"><span class="undefined">			height: 30px;</span></div><div class="line"><span class="undefined">			border-width: 0 0 30px 30px;</span></div><div class="line"><span class="undefined">			border-style: solid;</span></div><div class="line"><span class="undefined">			border-bottom-color: red;</span></div><div class="line"><span class="undefined">			border-left-color: transparent;</span></div><div class="line"><span class="undefined">			border-radius: 0 0 60px 0;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">		<span class="comment">/*圆角的百分比设置 */</span></span></div><div class="line"><span class="css">		<span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(27)</span> <span class="selector-class">.border-radius</span> &#123;</span></div><div class="line"><span class="undefined">			width: 180px;</span></div><div class="line"><span class="css">			<span class="comment">/*height: 180px;*/</span></span></div><div class="line"><span class="undefined">			height: 90px;</span></div><div class="line"><span class="undefined">			border-radius: 50%;</span></div><div class="line"><span class="undefined">			border-radius: 90px/45px;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">			<span class="comment">/*百分比是按横竖两个对应的方向的长度进行计算*/</span></span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>CSS3 边框圆角<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"整圆"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"拱形"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"半圆"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"左上角"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"四分之一圆"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"横着的椭圆"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"竖着的椭圆"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"半个横着的椭圆"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"半个竖着的椭圆"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"四分之一竖着的椭圆"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"饼环"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"圆饼"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"左上角圆饼"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"对角圆饼"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"四边不同色"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"右透明色"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"圆右透明色"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"圆右红透明色"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"阴阳图前世"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"阴阳图前世2"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"阴阳图今生"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"阴阳图今生2"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"消息框"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"奇怪的图形"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"奇怪的图形2"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"QQ对话"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"圆角百分比"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>==膜拜级哆啦A梦==<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>机器猫<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"copyright"</span> <span class="attr">content</span>=<span class="string">" "</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">        	<span class="selector-class">.wrapper</span>&#123;</span></div><div class="line"><span class="undefined">            	    margin: 50px 0 0 500px;</span></div><div class="line"><span class="undefined">            	&#125;</span></div><div class="line"><span class="css">        	<span class="selector-class">.doraemon</span>&#123;</span></div><div class="line"><span class="undefined">             	    position: relative;</span></div><div class="line"><span class="undefined">             	&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">            <span class="selector-class">.doraemon</span> <span class="selector-class">.head</span> &#123;</span></div><div class="line"><span class="css">                            <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></div><div class="line"><span class="undefined">                            width: 320px;</span></div><div class="line"><span class="undefined">                            height: 300px;</span></div><div class="line"><span class="undefined">                            border-radius: 150px;</span></div><div class="line"><span class="css">                            <span class="selector-tag">background</span>: <span class="selector-id">#07bbee</span>;</span></div><div class="line"><span class="css">                            <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-radial-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>,<span class="selector-id">#fff</span> 10%,<span class="selector-id">#07bbee</span> 20%,<span class="selector-id">#10a6ce</span> 75%,<span class="selector-id">#000</span>);</span></div><div class="line"><span class="css">                            <span class="selector-tag">background</span>: <span class="selector-tag">-moz-radial-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>,<span class="selector-id">#fff</span> 10%,<span class="selector-id">#07bbee</span> 20%,<span class="selector-id">#10a6ce</span> 75%,<span class="selector-id">#000</span>);</span></div><div class="line"><span class="css">                            <span class="selector-tag">background</span>: <span class="selector-tag">-ms-radial-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>,<span class="selector-id">#fff</span> 10%,<span class="selector-id">#07bbee</span> 20%,<span class="selector-id">#10a6ce</span> 75%,<span class="selector-id">#000</span>);</span></div><div class="line"><span class="css">                 <span class="selector-tag">border</span><span class="selector-pseudo">:2px</span> <span class="selector-tag">solid</span> <span class="selector-id">#555</span>;</span></div><div class="line"><span class="css">                 <span class="selector-tag">box-shadow</span><span class="selector-pseudo">:-5px</span> 10<span class="selector-tag">px</span> 15<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.45</span>);</span></div><div class="line"><span class="undefined">             &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">            	<span class="comment">/*脸部*/</span></span></div><div class="line"><span class="css">            <span class="selector-class">.doraemon</span> <span class="selector-class">.face</span> &#123;</span></div><div class="line"><span class="css">                 <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>; <span class="comment">/*让所有脸部元素可自由定位*/</span></span></div><div class="line"><span class="css">                 <span class="selector-tag">z-index</span>: 2;    <span class="comment">/*脸在头部背景上面*/</span></span></div><div class="line"><span class="undefined">             &#125;</span></div><div class="line"><span class="css">            	        <span class="comment">/*白色脸底*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.face</span> <span class="selector-class">.white</span> &#123;</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">width</span>: 265<span class="selector-tag">px</span>;       <span class="comment">/*设置宽高*/</span></span></div><div class="line"><span class="undefined">                 	            height: 195px;</span></div><div class="line"><span class="undefined">                 	            border-radius: 150px;</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>; <span class="comment">/*进行绝对定位*/</span></span></div><div class="line"><span class="undefined">                 	            top: 75px;</span></div><div class="line"><span class="undefined">                 	            left: 25px;</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="css">                 	            <span class="comment">/*此放射渐变也是使脸的左下角暗一些，看上去更真实*/</span></span></div><div class="line"><span class="css">                 	            <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-radial-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>,<span class="selector-id">#fff</span> 75%,<span class="selector-id">#eee</span> 80%,<span class="selector-id">#999</span> 90%,<span class="selector-id">#444</span>);</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">background</span>: <span class="selector-tag">-moz-radial-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>,<span class="selector-id">#fff</span> 75%,<span class="selector-id">#eee</span> 80%,<span class="selector-id">#999</span> 90%,<span class="selector-id">#444</span>);</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">background</span>: –<span class="selector-tag">ms-radial-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>,<span class="selector-id">#fff</span> 75%,<span class="selector-id">#eee</span> 80%,<span class="selector-id">#999</span> 90%,<span class="selector-id">#444</span>);</span></div><div class="line"><span class="undefined">                 	         &#125;</span></div><div class="line"><span class="css">            	        <span class="comment">/*鼻子*/</span></span></div><div class="line"><span class="css">            	         <span class="selector-class">.doraemon</span> <span class="selector-class">.face</span> <span class="selector-class">.nose</span>&#123;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">width</span><span class="selector-pseudo">:30px</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">border-radius</span><span class="selector-pseudo">:15px</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">background</span>:<span class="selector-id">#c93300</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">border</span><span class="selector-pseudo">:2px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">top</span><span class="selector-pseudo">:110px</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">left</span><span class="selector-pseudo">:140px</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">z-index</span><span class="selector-pseudo">:3</span>;   <span class="comment">/*鼻子在白色脸底下面*/</span></span></div><div class="line"><span class="undefined">                  	         &#125;</span></div><div class="line"><span class="css">            	        <span class="comment">/*鼻子上的高光*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.face</span> <span class="selector-class">.nose</span> <span class="selector-class">.light</span> &#123;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">width</span><span class="selector-pseudo">:10px</span>;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">height</span><span class="selector-pseudo">:10px</span>;</span></div><div class="line"><span class="undefined">                  	            border-radius: 5px;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">box-shadow</span>: 19<span class="selector-tag">px</span> 8<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-id">#fff</span>;  <span class="comment">/*通过阴影实现高光*/</span></span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">            	         <span class="comment">/*鼻子下的线*/</span></span></div><div class="line"><span class="css">            	         <span class="selector-class">.doraemon</span> <span class="selector-class">.face</span> <span class="selector-class">.nose_line</span>&#123;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">width</span><span class="selector-pseudo">:3px</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">background</span>:<span class="selector-id">#333</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">top</span><span class="selector-pseudo">:143px</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">left</span><span class="selector-pseudo">:155px</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">z-index</span><span class="selector-pseudo">:3</span>;</span></div><div class="line"><span class="undefined">                  	         &#125;</span></div><div class="line"><span class="css">            	         <span class="comment">/*嘴巴*/</span></span></div><div class="line"><span class="css">            	         <span class="selector-class">.doraemon</span> <span class="selector-class">.face</span> <span class="selector-class">.mouth</span>&#123;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">width</span><span class="selector-pseudo">:220px</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">height</span><span class="selector-pseudo">:400px</span>;</span></div><div class="line"><span class="css">                  	             <span class="comment">/*通过底边框加上圆角模拟微笑嘴巴*/</span></span></div><div class="line"><span class="css">                  	             <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:3px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">border-radius</span><span class="selector-pseudo">:120px</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">top</span><span class="selector-pseudo">:-160px</span>;</span></div><div class="line"><span class="css">                  	             <span class="selector-tag">left</span><span class="selector-pseudo">:45px</span>;</span></div><div class="line"><span class="undefined">                  	         &#125;</span></div><div class="line"><span class="css">            	         <span class="comment">/*眼睛*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.eyes</span> &#123;</span></div><div class="line"><span class="undefined">                  	            position: relative;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">z-index</span>: 3; <span class="comment">/*眼睛在白色脸底下面*/</span></span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">            	        <span class="comment">/*眼睛共同的样式*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.eyes</span> <span class="selector-class">.eye</span>&#123;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">width</span><span class="selector-pseudo">:72px</span>;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">height</span><span class="selector-pseudo">:82px</span>;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">background</span>:<span class="selector-id">#fff</span>;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">border</span><span class="selector-pseudo">:2px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">border-radius</span><span class="selector-pseudo">:35px</span> 35<span class="selector-tag">px</span>;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">top</span><span class="selector-pseudo">:40px</span>;</span></div><div class="line"><span class="css">                  	        &#125;  <span class="comment">/*眼珠*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.eyes</span> <span class="selector-class">.eye</span> <span class="selector-class">.black</span>&#123;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">width</span><span class="selector-pseudo">:14px</span>;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">height</span><span class="selector-pseudo">:14px</span>;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">background</span>:<span class="selector-id">#000</span>;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">border-radius</span><span class="selector-pseudo">:7px</span>;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">top</span><span class="selector-pseudo">:40px</span>;</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">            	     <span class="selector-class">.doraemon</span> <span class="selector-class">.eyes</span> <span class="selector-class">.left</span>&#123;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">left</span><span class="selector-pseudo">:82px</span>;</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">            	     <span class="selector-class">.doraemon</span> <span class="selector-class">.eyes</span> <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">                  	            left: 156px;</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">            	     <span class="selector-class">.doraemon</span> <span class="selector-class">.eyes</span> <span class="selector-class">.eye</span> <span class="selector-class">.bleft</span> &#123;</span></div><div class="line"><span class="undefined">                  	            left: 50px;</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">                     <span class="selector-class">.doraemon</span> <span class="selector-class">.eyes</span> <span class="selector-class">.eye</span> <span class="selector-class">.bright</span> &#123;</span></div><div class="line"><span class="undefined">                         left: 7px;</span></div><div class="line"><span class="undefined">                     &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">            	<span class="comment">/*胡须背景，主要用于挡住嘴巴的一部分，不要显得太长*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.whiskers</span>&#123;</span></div><div class="line"><span class="css">                             <span class="selector-tag">width</span><span class="selector-pseudo">:220px</span>;</span></div><div class="line"><span class="css">                             <span class="selector-tag">height</span><span class="selector-pseudo">:80px</span>;</span></div><div class="line"><span class="css">                             <span class="selector-tag">background</span>:<span class="selector-id">#fff</span>;</span></div><div class="line"><span class="css">                             <span class="selector-tag">border-radius</span><span class="selector-pseudo">:15px</span>;</span></div><div class="line"><span class="css">                             <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></div><div class="line"><span class="css">                             <span class="selector-tag">top</span><span class="selector-pseudo">:120px</span>;</span></div><div class="line"><span class="css">                             <span class="selector-tag">left</span><span class="selector-pseudo">:45px</span>;</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">z-index</span><span class="selector-pseudo">:2</span>;   <span class="comment">/*在鼻子和眼睛下面*/</span></span></div><div class="line"><span class="undefined">                 	        &#125;</span></div><div class="line"><span class="css">            	        <span class="comment">/*所有胡子的公用样式*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.whiskers</span> <span class="selector-class">.whisker</span> &#123;</span></div><div class="line"><span class="undefined">                  	            width: 60px;</span></div><div class="line"><span class="undefined">                  	            height: 2px;</span></div><div class="line"><span class="css">                  	            <span class="selector-tag">background</span>: <span class="selector-id">#333</span>;</span></div><div class="line"><span class="undefined">                  	            position: absolute;</span></div><div class="line"><span class="undefined">                  	            z-index: 2;</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">            	        <span class="comment">/*右上胡子*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.whiskers</span> <span class="selector-class">.rTop</span> &#123;</span></div><div class="line"><span class="undefined">                  	            left: 165px;</span></div><div class="line"><span class="undefined">                  	            top: 25px;</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">            	        <span class="comment">/*右中胡子*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.whiskers</span> <span class="selector-class">.rMiddle</span> &#123;</span></div><div class="line"><span class="undefined">                  	            left: 167px;</span></div><div class="line"><span class="undefined">                  	            top: 45px;</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">            	        <span class="comment">/*右下胡子*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.whiskers</span> <span class="selector-class">.rBottom</span> &#123;</span></div><div class="line"><span class="undefined">                  	            left: 165px;</span></div><div class="line"><span class="undefined">                  	            top: 65px;</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">                    <span class="comment">/*左上胡子*/</span></span></div><div class="line"><span class="css">                    <span class="selector-class">.doraemon</span> <span class="selector-class">.whiskers</span> <span class="selector-class">.lTop</span> &#123;</span></div><div class="line"><span class="undefined">                  	            left: 0;</span></div><div class="line"><span class="undefined">                  	            top: 25px;</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">            	        <span class="comment">/*左中胡子*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.whiskers</span> <span class="selector-class">.lMiddle</span> &#123;</span></div><div class="line"><span class="undefined">                  	            left: -2px;</span></div><div class="line"><span class="undefined">                  	            top: 45px;</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">            	        <span class="comment">/*左下胡子*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.whiskers</span> <span class="selector-class">.lBottom</span> &#123;</span></div><div class="line"><span class="undefined">                  	            left: 0;</span></div><div class="line"><span class="undefined">                  	            top: 65px;</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">            	        <span class="comment">/*胡子旋转角度*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.whiskers</span> <span class="selector-class">.r160</span> &#123;</span></div><div class="line"><span class="undefined">                  	            -webkit-transform: rotate(160deg);</span></div><div class="line"><span class="undefined">                  	            -moz-transform: rotate(160deg);</span></div><div class="line"><span class="undefined">                  	            -ms-transform: rotate(160deg);</span></div><div class="line"><span class="undefined">                  	            -o-transform: rotate(160deg);</span></div><div class="line"><span class="undefined">                  	            transform: rotate(160deg);</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.whiskers</span> <span class="selector-class">.r20</span> &#123;</span></div><div class="line"><span class="undefined">                  	            -webkit-transform: rotate(200deg);</span></div><div class="line"><span class="undefined">                  	            -moz-transform: rotate(200deg);</span></div><div class="line"><span class="undefined">                  	            -ms-transform: rotate(200deg);</span></div><div class="line"><span class="undefined">                  	            -o-transform: rotate(200deg);</span></div><div class="line"><span class="undefined">                  	            transform: rotate(200deg);</span></div><div class="line"><span class="undefined">                  	        &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">            	<span class="comment">/*围脖*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.choker</span> &#123;</span></div><div class="line"><span class="undefined">              	            width: 230px;</span></div><div class="line"><span class="undefined">                	            height: 20px;</span></div><div class="line"><span class="css">                	            <span class="selector-tag">background</span>: <span class="selector-id">#c40</span>;</span></div><div class="line"><span class="css">                	            <span class="comment">/*线性渐变 让围巾看上去更自然*/</span></span></div><div class="line"><span class="css">                	            <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">linear</span>,<span class="selector-tag">left</span> <span class="selector-tag">top</span>,<span class="selector-tag">left</span> <span class="selector-tag">bottom</span>,<span class="selector-tag">from</span>(<span class="selector-id">#c40</span>),<span class="selector-tag">to</span>(<span class="selector-id">#800400</span>));</span></div><div class="line"><span class="css">                	            <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">center</span> <span class="selector-tag">top</span>,<span class="selector-id">#c40</span>,<span class="selector-id">#800400</span>);</span></div><div class="line"><span class="css">                	            <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">center</span> <span class="selector-tag">top</span>,<span class="selector-id">#c40</span>,<span class="selector-id">#800400</span>);</span></div><div class="line"><span class="css">                     <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></div><div class="line"><span class="undefined">                        border-radius: 10px;</span></div><div class="line"><span class="undefined">                        position: relative;</span></div><div class="line"><span class="undefined">                        top: -40px;</span></div><div class="line"><span class="undefined">                        left: 45px;</span></div><div class="line"><span class="undefined">                        z-index: 4;</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="css">               <span class="comment">/*铃铛*/</span></span></div><div class="line"><span class="css">               <span class="selector-class">.doraemon</span> <span class="selector-class">.choker</span> <span class="selector-class">.bell</span> &#123;</span></div><div class="line"><span class="undefined">            	            width: 40px;</span></div><div class="line"><span class="undefined">            	            height: 40px;</span></div><div class="line"><span class="css">            	            _<span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>; <span class="comment">/*IE6 hack*/</span></span></div><div class="line"><span class="css">            	            <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></div><div class="line"><span class="undefined">            	            border-radius: 50px;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">background</span>: <span class="selector-id">#f9f12a</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">linear</span>, <span class="selector-tag">left</span> <span class="selector-tag">top</span>, <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">from</span>(<span class="selector-id">#f9f12a</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.5</span>, <span class="selector-id">#e9e11a</span>), <span class="selector-tag">to</span>(<span class="selector-id">#a9a100</span>));</span></div><div class="line"><span class="css">            	            <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#f9f12a</span>, <span class="selector-id">#e9e11a</span> 75%,<span class="selector-id">#a9a100</span>);</span></div><div class="line"><span class="css">           	   <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#f9f12a</span>, <span class="selector-id">#e9e11a</span> 75%,<span class="selector-id">#a9a100</span>);</span></div><div class="line"><span class="css">           	            <span class="selector-tag">box-shadow</span>: <span class="selector-tag">-5px</span> 5<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.25</span>);</span></div><div class="line"><span class="undefined">           	            position: absolute;</span></div><div class="line"><span class="undefined">           	            top: 5px;</span></div><div class="line"><span class="undefined">           	            left: 90px;</span></div><div class="line"><span class="undefined">           	        &#125;</span></div><div class="line"><span class="css">              <span class="comment">/*双横线*/</span></span></div><div class="line"><span class="css">              <span class="selector-class">.doraemon</span> <span class="selector-class">.choker</span> <span class="selector-class">.bell_line</span> &#123;</span></div><div class="line"><span class="undefined">           	            width: 36px;</span></div><div class="line"><span class="undefined">           	            height: 2px;</span></div><div class="line"><span class="css">           	            <span class="selector-tag">background</span>: <span class="selector-id">#f9f12a</span>;</span></div><div class="line"><span class="css">           	            <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></div><div class="line"><span class="undefined">           	            border-radius: 3px 3px 0 0;</span></div><div class="line"><span class="undefined">           	            position: absolute;</span></div><div class="line"><span class="undefined">           	            top: 10px;</span></div><div class="line"><span class="undefined">           	        &#125;</span></div><div class="line"><span class="css">              <span class="comment">/*黑点*/</span></span></div><div class="line"><span class="css">              <span class="selector-class">.doraemon</span> <span class="selector-class">.choker</span> <span class="selector-class">.bell_circle</span>&#123;</span></div><div class="line"><span class="css">                  <span class="selector-tag">width</span><span class="selector-pseudo">:12px</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">height</span><span class="selector-pseudo">:10px</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">background</span>:<span class="selector-id">#000</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">border-radius</span><span class="selector-pseudo">:5px</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">top</span><span class="selector-pseudo">:20px</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">left</span><span class="selector-pseudo">:14px</span>;</span></div><div class="line"><span class="undefined">            	        &#125;</span></div><div class="line"><span class="css">               <span class="comment">/*黑点下的线*/</span></span></div><div class="line"><span class="css">               <span class="selector-class">.doraemon</span> <span class="selector-class">.choker</span> <span class="selector-class">.bell_under</span>&#123;</span></div><div class="line"><span class="undefined">            	            width: 3px;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">height</span><span class="selector-pseudo">:15px</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">background</span>:<span class="selector-id">#000</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></div><div class="line"><span class="undefined">            	            left: 18px;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">top</span><span class="selector-pseudo">:27px</span>;</span></div><div class="line"><span class="undefined">            	        &#125;</span></div><div class="line"><span class="css">               <span class="comment">/*铃铛高光*/</span></span></div><div class="line"><span class="css">               <span class="selector-class">.doraemon</span> <span class="selector-class">.choker</span> <span class="selector-class">.bell_light</span>&#123;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">width</span><span class="selector-pseudo">:12px</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">height</span><span class="selector-pseudo">:12px</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">border-radius</span><span class="selector-pseudo">:10px</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">box-shadow</span><span class="selector-pseudo">:19px</span> 8<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">top</span><span class="selector-pseudo">:-5px</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">left</span><span class="selector-pseudo">:5px</span>;</span></div><div class="line"><span class="css">            	            <span class="selector-tag">opacity</span><span class="selector-pseudo">:0.7</span>;</span></div><div class="line"><span class="undefined">            	        &#125;</span></div><div class="line"><span class="css">               <span class="comment">/*身子*/</span></span></div><div class="line"><span class="css">               <span class="selector-class">.doraemon</span> <span class="selector-class">.bodys</span> &#123;</span></div><div class="line"><span class="undefined">            	            position: relative;</span></div><div class="line"><span class="undefined">            	            top: -310px;</span></div><div class="line"><span class="undefined">            	        &#125;</span></div><div class="line"><span class="css">               <span class="comment">/*肚子*/</span></span></div><div class="line"><span class="css">            	        <span class="selector-class">.doraemon</span> <span class="selector-class">.bodys</span> <span class="selector-class">.body</span> &#123;</span></div><div class="line"><span class="undefined">                 	            width: 220px;</span></div><div class="line"><span class="undefined">                 	            height: 165px;</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">background</span>: <span class="selector-id">#07beea</span>;</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">linear</span>,<span class="selector-tag">right</span> <span class="selector-tag">top</span>,<span class="selector-tag">left</span> <span class="selector-tag">top</span>,<span class="selector-tag">from</span>(<span class="selector-id">#07beea</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.5</span>, <span class="selector-id">#0073b3</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.75</span>,<span class="selector-id">#00b0e0</span>), <span class="selector-tag">to</span>(<span class="selector-id">#0096be</span>));</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">center</span>,<span class="selector-id">#07beea</span>,<span class="selector-id">#0073b3</span> 50%,<span class="selector-id">#00b0e0</span> 75%,<span class="selector-id">#0096be</span> 100%);</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">center</span>,<span class="selector-id">#07beea</span>,<span class="selector-id">#0073b3</span> 50%,<span class="selector-id">#00b0e0</span> 75%,<span class="selector-id">#0096be</span> 100%);</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">border</span><span class="selector-pseudo">:2px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">top</span><span class="selector-pseudo">:265px</span>;</span></div><div class="line"><span class="css">                 	            <span class="selector-tag">left</span><span class="selector-pseudo">:50px</span>;</span></div><div class="line"><span class="undefined">                 	        &#125;</span></div><div class="line"><span class="css">            	        <span class="comment">/*白色肚兜*/</span></span></div><div class="line"><span class="css">            	            <span class="selector-class">.doraemon</span> <span class="selector-class">.bodys</span> <span class="selector-class">.wraps</span> &#123;</span></div><div class="line"><span class="undefined">                                  width: 170px;</span></div><div class="line"><span class="undefined">                                  height: 170px;</span></div><div class="line"><span class="css">                                  <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="css">                                  <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">linear</span>, <span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">from</span>(<span class="selector-id">#fff</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.75</span>,<span class="selector-id">#fff</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.83</span>,<span class="selector-id">#eee</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.90</span>,<span class="selector-id">#999</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.95</span>,<span class="selector-id">#444</span>), <span class="selector-tag">to</span>(<span class="selector-id">#000</span>));</span></div><div class="line"><span class="css">                                  <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>,<span class="selector-id">#fff</span>,<span class="selector-id">#fff</span> 75%,<span class="selector-id">#eee</span> 83%,<span class="selector-id">#999</span> 90%,<span class="selector-id">#444</span> 95%,<span class="selector-id">#000</span>);</span></div><div class="line"><span class="css">                                  <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>,<span class="selector-id">#fff</span>,<span class="selector-id">#fff</span> 75%,<span class="selector-id">#eee</span> 83%,<span class="selector-id">#999</span> 90%,<span class="selector-id">#444</span> 95%,<span class="selector-id">#000</span>);</span></div><div class="line"><span class="css">                                  <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></div><div class="line"><span class="undefined">                  	                border-radius: 85px;</span></div><div class="line"><span class="undefined">                  	                position: absolute;</span></div><div class="line"><span class="undefined">                  	                left: 72px;</span></div><div class="line"><span class="undefined">                  	                top: 230px;</span></div><div class="line"><span class="undefined">                  	            &#125;</span></div><div class="line"><span class="css">            	            <span class="comment">/*口袋*/</span></span></div><div class="line"><span class="css">            	            <span class="selector-class">.doraemon</span> <span class="selector-class">.bodys</span> <span class="selector-class">.pocket</span> &#123;</span></div><div class="line"><span class="undefined">                   	                width: 130px;</span></div><div class="line"><span class="undefined">                   	                height: 130px;</span></div><div class="line"><span class="undefined">                   	                border-radius: 65px;</span></div><div class="line"><span class="css">                   	                <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="css">                   	                <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">linear</span>, <span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">from</span>(<span class="selector-id">#fff</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.70</span>,<span class="selector-id">#fff</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.75</span>,<span class="selector-id">#f8f8f8</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.80</span>,<span class="selector-id">#eee</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.88</span>,<span class="selector-id">#ddd</span>), <span class="selector-tag">to</span>(<span class="selector-id">#fff</span>));</span></div><div class="line"><span class="css">                   	                <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-id">#fff</span>, <span class="selector-id">#fff</span> 70%,<span class="selector-id">#f8f8f8</span> 75%,<span class="selector-id">#eee</span> 80%,<span class="selector-id">#ddd</span> 88%, <span class="selector-id">#fff</span>);</span></div><div class="line"><span class="css">                   	                <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-id">#fff</span>, <span class="selector-id">#fff</span> 70%,<span class="selector-id">#f8f8f8</span> 75%,<span class="selector-id">#eee</span> 80%,<span class="selector-id">#ddd</span> 88%, <span class="selector-id">#fff</span>);</span></div><div class="line"><span class="css">                   	                <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></div><div class="line"><span class="css">                   	                <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></div><div class="line"><span class="undefined">                   	                top: 250px;</span></div><div class="line"><span class="undefined">                   	                left: 92px;</span></div><div class="line"><span class="undefined">                   	            &#125;</span></div><div class="line"><span class="css">            	            <span class="comment">/*挡住口袋一半*/</span></span></div><div class="line"><span class="css">            	            <span class="selector-class">.doraemon</span> <span class="selector-class">.bodys</span> <span class="selector-class">.pocket_mask</span> &#123;</span></div><div class="line"><span class="undefined">                   	                width: 134px;</span></div><div class="line"><span class="undefined">                   	                height: 60px;</span></div><div class="line"><span class="css">                   	                <span class="selector-tag">background</span>:<span class="selector-id">#fff</span>;</span></div><div class="line"><span class="css">                   	                <span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></div><div class="line"><span class="css">                   	                <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></div><div class="line"><span class="undefined">                   	                top: 259px;</span></div><div class="line"><span class="undefined">                   	                left: 92px;</span></div><div class="line"><span class="undefined">                   	           &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">            	<span class="comment">/*左右手*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.hand_right</span>, <span class="selector-class">.doraemon</span> <span class="selector-class">.hand_left</span> &#123;</span></div><div class="line"><span class="undefined">                        height: 100px;</span></div><div class="line"><span class="undefined">                        width: 100px;</span></div><div class="line"><span class="undefined">                        position: absolute;</span></div><div class="line"><span class="undefined">                        top: 272px;</span></div><div class="line"><span class="undefined">                        left: 248px;</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="css">                <span class="comment">/*左手*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.hand_left</span> &#123;</span></div><div class="line"><span class="undefined">           	                left: -10px;</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                <span class="comment">/*手臂公共部分*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.arm</span> &#123;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">width</span><span class="selector-pseudo">:80px</span>;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">height</span><span class="selector-pseudo">:50px</span>;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-id">#07beea</span>;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">linear</span>, <span class="selector-tag">left</span> <span class="selector-tag">top</span>, <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">from</span>(<span class="selector-id">#07beea</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.85</span>,<span class="selector-id">#07beea</span>), <span class="selector-tag">to</span>(<span class="selector-id">#555</span>));</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">center</span> <span class="selector-tag">top</span>, <span class="selector-id">#07BEEA</span>, <span class="selector-id">#07BEEA</span> 85%, <span class="selector-id">#555</span>);</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">center</span> <span class="selector-tag">top</span>, <span class="selector-id">#07BEEA</span>, <span class="selector-id">#07BEEA</span> 85%, <span class="selector-id">#555</span>);</span></div><div class="line"><span class="css">           	                <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000000</span>;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">box-shadow</span>: <span class="selector-tag">-10px</span> 7<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.35</span>);</span></div><div class="line"><span class="undefined">           	                z-index: -1;</span></div><div class="line"><span class="undefined">           	                position: relative;</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                <span class="comment">/*右手手臂*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.hand_right</span> <span class="selector-class">.arm</span> &#123;</span></div><div class="line"><span class="undefined">           	                top: 17px;</span></div><div class="line"><span class="undefined">           	                -webkit-transform: rotate(35deg);</span></div><div class="line"><span class="undefined">           	                -moz-transform: rotate(35deg);</span></div><div class="line"><span class="undefined">           	                -ms-transform: rotate(35deg);</span></div><div class="line"><span class="undefined">           	                -o-transform: rotate(35deg);</span></div><div class="line"><span class="undefined">           	                transform: rotate(35deg);</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                <span class="comment">/*左手手臂*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.hand_left</span> <span class="selector-class">.arm</span> &#123;</span></div><div class="line"><span class="undefined">           	                top: 17px;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-id">#0096be</span>;   <span class="comment">/*背光一面使用纯色，使其有立体感*/</span></span></div><div class="line"><span class="css">           	                <span class="selector-tag">box-shadow</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">-7px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.25</span>);</span></div><div class="line"><span class="undefined">           	                -webkit-transform: rotate(145deg);</span></div><div class="line"><span class="undefined">           	                -moz-transform: rotate(145deg);</span></div><div class="line"><span class="undefined">           	                -ms-transform: rotate(145deg);</span></div><div class="line"><span class="undefined">           	                -o-transform: rotate(145deg);</span></div><div class="line"><span class="undefined">           	                transform: rotate(145deg);</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                <span class="comment">/*圆形手掌公共部分*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.circle</span> &#123;</span></div><div class="line"><span class="undefined">           	                width: 60px;</span></div><div class="line"><span class="undefined">           	                height: 60px;</span></div><div class="line"><span class="undefined">           	                border-radius: 30px;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">linear</span>, <span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">from</span>(<span class="selector-id">#fff</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.5</span>,<span class="selector-id">#fff</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.70</span>,<span class="selector-id">#eee</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.8</span>,<span class="selector-id">#ddd</span>), <span class="selector-tag">to</span>(<span class="selector-id">#999</span>));</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-id">#fff</span>, <span class="selector-id">#fff</span> 50%, <span class="selector-id">#eee</span> 70%, <span class="selector-id">#ddd</span> 80%,<span class="selector-id">#999</span>);</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-id">#fff</span>, <span class="selector-id">#fff</span> 50%, <span class="selector-id">#eee</span> 70%, <span class="selector-id">#ddd</span> 80%,<span class="selector-id">#999</span>);</span></div><div class="line"><span class="undefined">           	                position: absolute;</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                <span class="comment">/*右手手掌*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.hand_right</span> <span class="selector-class">.circle</span> &#123;</span></div><div class="line"><span class="undefined">           	                left: 40px;</span></div><div class="line"><span class="undefined">           	                top: 32px;</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                <span class="comment">/*左手手掌*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.hand_left</span> <span class="selector-class">.circle</span> &#123;</span></div><div class="line"><span class="undefined">           	                left: -20px;</span></div><div class="line"><span class="undefined">           	                top: 32px;</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                <span class="comment">/*手臂和身体结合处，使用背景遮住边框*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.arm_rewrite</span> &#123;</span></div><div class="line"><span class="undefined">           	                height: 45px;</span></div><div class="line"><span class="undefined">           	                width: 5px;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-id">#07beea</span>;</span></div><div class="line"><span class="undefined">           	                position: relative;</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                <span class="comment">/*右手结合处*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.hand_right</span> <span class="selector-class">.arm_rewrite</span> &#123;</span></div><div class="line"><span class="undefined">           	                top: -45px;</span></div><div class="line"><span class="undefined">           	                left: 22px;</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                <span class="comment">/*左手结合处*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.hand_left</span> <span class="selector-class">.arm_rewrite</span> &#123;</span></div><div class="line"><span class="undefined">           	                top: -45px;</span></div><div class="line"><span class="undefined">           	                left: 60px;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-id">#0096be</span>; <span class="comment">/*同理，背光一面使用纯色，使其有立体感*/</span></span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                <span class="comment">/*脚部*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.foot</span> &#123;</span></div><div class="line"><span class="undefined">           	                width: 280px;</span></div><div class="line"><span class="undefined">           	                height: 40px;</span></div><div class="line"><span class="undefined">           	                position: relative;</span></div><div class="line"><span class="undefined">           	                top: 55px;</span></div><div class="line"><span class="undefined">           	                left: 20px;</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                <span class="comment">/*左右脚共同样式*/</span></span></div><div class="line"><span class="css">                <span class="selector-class">.doraemon</span> <span class="selector-class">.foot</span> <span class="selector-class">.left</span>, <span class="selector-class">.doraemon</span> <span class="selector-class">.foot</span> <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">           	                width: 125px;</span></div><div class="line"><span class="undefined">           	                height: 30px;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">linear</span>, <span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">from</span>(<span class="selector-id">#fff</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.75</span>,<span class="selector-id">#fff</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.85</span>,<span class="selector-id">#eee</span>), <span class="selector-tag">to</span>(<span class="selector-id">#999</span>));</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-id">#fff</span>, <span class="selector-id">#fff</span> 75%, <span class="selector-id">#eee</span> 85%, <span class="selector-id">#999</span>);</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-id">#fff</span>, <span class="selector-id">#fff</span> 75%, <span class="selector-id">#eee</span> 85%, <span class="selector-id">#999</span>);</span></div><div class="line"><span class="css">           	                <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></div><div class="line"><span class="undefined">           	                border-radius: 80px 60px 60px 40px;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">box-shadow</span>: <span class="selector-tag">-6px</span> 0 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.35</span>);</span></div><div class="line"><span class="undefined">           	                position: relative;</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                    <span class="selector-class">.doraemon</span> <span class="selector-class">.foot</span> <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">           	                left: 8px;</span></div><div class="line"><span class="undefined">           	                top: 65px;</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">                    <span class="selector-class">.doraemon</span> <span class="selector-class">.foot</span> <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">           	                top: 31px;</span></div><div class="line"><span class="undefined">           	                left: 141px;</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="css">                    <span class="comment">/*双脚之间的缝隙，加阴影使用立体感*/</span></span></div><div class="line"><span class="css">                    <span class="selector-class">.doraemon</span> <span class="selector-class">.foot</span> <span class="selector-class">.foot_rewrite</span> &#123;</span></div><div class="line"><span class="undefined">           	                width: 20px;</span></div><div class="line"><span class="undefined">           	                height: 10px;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">linear</span>, <span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">from</span>(<span class="selector-id">#666</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.83</span>,<span class="selector-id">#fff</span>), <span class="selector-tag">to</span>(<span class="selector-id">#fff</span>));</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-id">#666</span>, <span class="selector-id">#fff</span> 83%, <span class="selector-id">#fff</span>);</span></div><div class="line"><span class="css">           	                <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">right</span> <span class="selector-tag">top</span>, <span class="selector-id">#666</span>, <span class="selector-id">#fff</span> 83%, <span class="selector-id">#fff</span>);</span></div><div class="line"><span class="css">           	                <span class="comment">/*制作半圆效果*/</span></span></div><div class="line"><span class="css">           	                <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></div><div class="line"><span class="undefined">           	                border-bottom: none;</span></div><div class="line"><span class="undefined">           	                border-radius: 40px 40px 0 0;</span></div><div class="line"><span class="undefined">           	                position: relative;</span></div><div class="line"><span class="undefined">           	                top: -11px;</span></div><div class="line"><span class="undefined">           	                left: 130px;</span></div><div class="line"><span class="undefined">           	                _left: 127px;</span></div><div class="line"><span class="undefined">           	            &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">            	<span class="comment">/*眼珠*/</span></span></div><div class="line"><span class="css">               <span class="selector-class">.doraemon</span> <span class="selector-class">.eyes</span> <span class="selector-class">.eye</span> <span class="selector-class">.black</span> &#123;</span></div><div class="line"><span class="undefined">                       width: 14px;</span></div><div class="line"><span class="undefined">                       height: 14px;</span></div><div class="line"><span class="css">                       <span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span></div><div class="line"><span class="undefined">                       border-radius: 7px;</span></div><div class="line"><span class="undefined">                       position: absolute;</span></div><div class="line"><span class="undefined">                       top: 40px;</span></div><div class="line"><span class="undefined">                       -webkit-animation: eyemove 3s linear infinite;</span></div><div class="line"><span class="undefined">            	            -moz-animation: eyemove 3s linear infinite;</span></div><div class="line"><span class="undefined">            	            -ms-animation: eyemove 3s linear infinite;</span></div><div class="line"><span class="undefined">            	            -o-animation: eyemove 3s linear infinite;</span></div><div class="line"><span class="undefined">            	            animation: eyemove 3s linear infinite;</span></div><div class="line"><span class="undefined">            	        &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">               <span class="comment">/*让眼睛动起来*/</span></span></div><div class="line"><span class="css">               @-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> eyemove &#123;</span></div><div class="line"><span class="undefined">                   70%&#123;</span></div><div class="line"><span class="css">                           <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined">                   80% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   85% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 0 0 5px;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   90% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 10px 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   93% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   96% &#123;</span></div><div class="line"><span class="undefined">                           margin: 0 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined">               &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">               @-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> eyemove &#123;</span></div><div class="line"><span class="undefined">                   70% &#123;</span></div><div class="line"><span class="undefined">                           margin: 0 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   80% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   85% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 0 0 5px;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   90% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 10px 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   93% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   96% &#123;</span></div><div class="line"><span class="undefined">                           margin: 0 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined">               &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">               @-<span class="keyword">o</span>-<span class="keyword">keyframes</span> eyemove &#123;</span></div><div class="line"><span class="undefined">                   70% &#123;</span></div><div class="line"><span class="undefined">                           margin: 0 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   80% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   85% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 0 0 5px;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   90% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 10px 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   93% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   96% &#123;</span></div><div class="line"><span class="undefined">                           margin: 0 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined">               &#125;</span></div><div class="line"><span class="css">               @<span class="keyword">keyframes</span> eyemove &#123;</span></div><div class="line"><span class="undefined">                   70% &#123;</span></div><div class="line"><span class="undefined">                           margin: 0 0 0 0;</span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                   80% &#123;</span></div><div class="line"><span class="undefined">                           margin: -22px 0 0 0;</span></div><div class="line"><span class="undefined">            	            &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                       85% &#123;</span></div><div class="line"><span class="undefined">            	                margin: -22px 0 0 5px;</span></div><div class="line"><span class="undefined">            	            &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                       90% &#123;</span></div><div class="line"><span class="undefined">            	                margin: -22px 10px 0 0;</span></div><div class="line"><span class="undefined">            	            &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                       93% &#123;</span></div><div class="line"><span class="undefined">            	                margin: -22px 0 0 0;</span></div><div class="line"><span class="undefined">            	            &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                       96% &#123;</span></div><div class="line"><span class="undefined">            	                margin: 0 0 0 0;</span></div><div class="line"><span class="undefined">            	            &#125;</span></div><div class="line"><span class="undefined">                   &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--叮当猫整体--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"doraemon"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--头部--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"head"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--眼睛--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eyes"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eye left"</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--眼珠--&gt;</span></div><div class="line">    	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"black bleft"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eye right"</span>&gt;</span></div><div class="line">    	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"black bright"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	            <span class="comment">&lt;!--脸部--&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face"</span>&gt;</span></div><div class="line">    	                <span class="comment">&lt;!--白色脸底--&gt;</span></div><div class="line">    	                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"white"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                <span class="comment">&lt;!--鼻子--&gt;</span></div><div class="line">    	                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nose"</span>&gt;</span></div><div class="line">    	                    <span class="comment">&lt;!--鼻子高光部分--&gt;</span></div><div class="line">    	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"light"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                <span class="comment">&lt;!--鼻子的竖线--&gt;</span></div><div class="line">    	                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nose_line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                <span class="comment">&lt;!--嘴巴--&gt;</span></div><div class="line">    	                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mouth"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                <span class="comment">&lt;!--胡须--&gt;</span></div><div class="line">    	                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"whiskers"</span>&gt;</span></div><div class="line">    	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"whisker rTop r160"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"whisker rMiddle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"whisker rBottom r20"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"whisker lTop r20"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"whisker lMiddle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"whisker lBottom r160"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	        <span class="comment">&lt;!--脖子和铃铛--&gt;</span></div><div class="line">    	        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"choker"</span>&gt;</span></div><div class="line">    	            <span class="comment">&lt;!--铃铛--&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bell"</span>&gt;</span></div><div class="line">    	                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bell_line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bell_circle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bell_under"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bell_light"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	        <span class="comment">&lt;!--身体--&gt;</span></div><div class="line">    	        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bodys"</span>&gt;</span></div><div class="line">    	            <span class="comment">&lt;!--肚子--&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	            <span class="comment">&lt;!--肚兜--&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wraps"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	            <span class="comment">&lt;!--口袋--&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pocket"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	            <span class="comment">&lt;!--遮住一半口袋，使其呈现半圆--&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pocket_mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	        <span class="comment">&lt;!--右手--&gt;</span></div><div class="line">    	        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hand_right"</span>&gt;</span></div><div class="line">    	            <span class="comment">&lt;!--手臂--&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arm"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	            <span class="comment">&lt;!--手掌--&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	            <span class="comment">&lt;!--遮住手臂和身子交接处的线--&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arm_rewrite"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	        <span class="comment">&lt;!--左手--&gt;</span></div><div class="line">    	        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hand_left"</span>&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arm"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arm_rewrite"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	        <span class="comment">&lt;!--脚--&gt;</span></div><div class="line">    	        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foot"</span>&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	             <span class="comment">&lt;!--双脚之间的缝隙--&gt;</span></div><div class="line">    	            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foot_rewrite"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h4><p>设置背景图片的尺寸，参数设置如下：<br>1.可以设置长度单位px或者百分比（设置百分比时，参照盒子的宽高）  </p>
<ul>
<li>length:用长度值指定背景图像大小。不允许负值。 </li>
<li>percentage： 用百分比指定背景图像大小。不允许负值。 </li>
<li>auto： 背景图像的真实大小。 </li>
<li>cover： 将背景图像等比缩放到完全覆盖容器，背景图像有可能超出容器。 保证图片始终填满背景区域，如果有溢出，溢出部分会被隐藏。</li>
<li>contain： 将背景图像等比缩放到宽度或高度与容器的宽度或高度相等，背景图像始终被包含在容器内。 保证图片始终完整显示在背景区域。盒子溢出的自动隐藏。<h4 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h4>可以设置背景图片定位(background-position)的参照原点。<br>参数设置为：  </li>
<li>border-box  以边框作为参考原点，默认值</li>
<li>padding-box  以内边距作为参考原点</li>
<li>content-box  以内容区作为参考原点<h4 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h4>可以对背景区域进行裁切，即改变背景区域的大小。参数设置如下：</li>
<li>border-box 裁切边框以内为背景区域</li>
<li>padding-box 裁切内边距以内为背景区域</li>
<li>content-box  裁切内容区作为背景区域</li>
<li>多个图片可以设置元素的多背景效果</li>
<li>background:url(),url(),url();<h4 id="多背景"><a href="#多背景" class="headerlink" title="多背景"></a>多背景</h4>以逗号分隔可以设置多背景，可用于自适应布局。多个背景图的书写顺序为左上右上，右下，左下，中间。<h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><h4 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h4>linear-gradient线性渐变指沿着某条直线朝一个方向产生渐变效果。<br>必要的元素：方向，起始色，终止色，渐变距离。<br>关于方向：设置渐变的方向，可以用关键字如to top，to-right，也可以用角度（正负值均可），如45deg，-90deg等，当以角度作为参数时，0deg从下往上走90deg从左往右，进而可以推出180deg从上向下。   <h4 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h4>radial-gradient指的是从一个中心点开始沿着四周产生渐变效果。<br>必要的元素：辐射范围即圆半径，中心点即圆心，渐变起始色，渐变终止色，渐变范围。<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    background-image: radial-gradient(100px at center,yellow,green);</span></div><div class="line"><span class="css">    <span class="comment">/*at前面可以有两个半径 100px 50 px at....*/</span></span></div><div class="line"><span class="undefined">     background-image: radial-gradient(100px at 150px 150px ,yellow 25%,green 50%,blue 75%,red);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="过渡属性"><a href="#过渡属性" class="headerlink" title="过渡属性"></a>过渡属性</h2><p>过渡是css3中具有颠覆性的特征之一，可以实现元素不同状态间的平滑过渡（补间动画），经常用来制作动画效果。<br>帧动画：通过一帧一帧的画面按照固定顺序和速度播放。类似于电影胶片。<br>补间动画：自动完成从起始状态到终止状态的过渡。<br>==特点：当元素只要有“属性”发生变化时，可以平滑的进行过渡，并不仅仅局限于hover状态。==  </p>
<ul>
<li>transition-property 设置过渡属性</li>
<li>transition-duration 设置过渡时间</li>
<li>transition-timing-function  设置过渡速度</li>
<li>transition-delay  设置过渡延时</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 过渡<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    body &#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#F7F7F7</span>;</span></div><div class="line"><span class="undefined">      position: relative;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.transition</span> &#123;</span></div><div class="line"><span class="undefined">      width: 200px;</span></div><div class="line"><span class="undefined">      height: 200px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></div><div class="line"><span class="undefined">      width: 200px;</span></div><div class="line"><span class="undefined">      height: 200px;</span></div><div class="line"><span class="undefined">      background-color: green;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      top: 50px;</span></div><div class="line"><span class="undefined">      left: 20px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="comment">/*四个参数:all---所有属性,1s--时间,linear---线性(匀速),*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*参数:all---所有属性*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*1s---时间*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*linear----匀速*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*ease---快慢(缓解的意思)*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*ease-in---快*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*ease-out---慢*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*2s---过渡延迟时间*/</span></span></div><div class="line"><span class="css">   <span class="selector-class">.transition</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box</span>&#123;</span></div><div class="line"><span class="undefined">     left: 800px;</span></div><div class="line"><span class="undefined">     width: 300px;</span></div><div class="line"><span class="undefined">     height: 300px;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">     transition: all 1s linear;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">     <span class="comment">/*transition:all 1s ease;*/</span></span></div><div class="line"><span class="css">     <span class="comment">/*transition: all 1s linear|ease|ease-in|ease-out 2s;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">     <span class="comment">/*指定的属性名字:transition-property*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">     <span class="comment">/*transition-property: all;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">     <span class="comment">/*动画执行的时间:transition-duration*/</span></span></div><div class="line"><span class="css">     <span class="comment">/*transition-duration:2s ;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">     <span class="comment">/*速度:timing-function*/</span></span></div><div class="line"><span class="css">     <span class="comment">/*transition-timing-function: linear;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">     <span class="comment">/*延迟:transition-delay*/</span></span></div><div class="line"><span class="css">     <span class="comment">/*transition-delay:2s;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="comment">/*延迟效果实现,属性拆分*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*transition:width 1s,height 2s 3s, left 4s 4s;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"transition"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>过渡：<br>transition:all 1s 2s 这个写法的解释<br>第一个参数：属性—all—所有的属性<br>第二个参数：属性—1s—-过渡的时间<br>第三个参数：属性—2s—-延迟的时间<br>第一个参数如果是改变所有的属性那么就用all，如果只是设置一个属性进行过渡，就写一个属性。  </p>
<ol>
<li>transition-property：希望要过渡的属性  </li>
<li>transition-duration：过渡的时间</li>
<li>transition-timing-function：速度（linear匀速，ease快慢，ease-in，ease-out。）  </li>
<li>transition-delay：延迟<h3 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h3>转换是css3中具有颠覆性的特征之一，可以实现元素的位移，旋转，变形，缩放，甚至支持矩阵方式，配合即将学习的过渡和动画知识，可以取代大量之前只能靠Flash才可以实现的效果。<br>1.移动  translate(x,y) 可以改变元素的位置，x，y可以为负值。<br>注意：移动位置相当于自身原来的位置；y轴正方向朝下；除了可以像素值，也可以是百分比，相对于自身的宽度或高度。<br>2.缩放  scale(x,y)  可以对元素进行水平和垂直方向的缩放，x，y的取值可以为小数。<br>3.旋转  rotate(deg)  可以对元素进行旋转，正值为顺时针，负值为逆时针。<br>当元素旋转以后，坐标轴也跟着发生转变。调整顺序可以解决，把旋转放在最后。<br>4.倾斜  skew(deg,deg)可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为0。<br>5.矩阵 matrix() 把所有的2D转换组合到一起，需要6个参数。<br>transform-orgin可以调整元素转换的原点，但是对于transform:translate(x,y)没有影响。<br>我们可以同时使用多个转换，其格式为:transform:translate() rotate() scale()…等，其顺序会影响转换的效果。<h3 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h3>1.3D坐标轴<br>用X，Y，Z分别表示空间的3个维度，三条轴互相垂直<br><img src="F:备用图片\坐标轴.png" alt="image"><br>2.透视<br>透视可以将一个2D平面，在转换的过程当中，呈现3D效果。（没有perspective，便没有Z轴）并非任何情况下需要透视效果。<br>透视会产生”近大远小”的效果。<br>3.perspective的两种写法<br>（a）作为一个属性，设置给父元素，作用于所有3D转换的子元素。<br>（b）作为transform属性的一个值，做用于自身元素。<br>4.左手坐标系<br>伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表X、Y、Z轴的正方向。<br>5.左手法则<br>左手握住旋转轴，竖起拇指指向旋转轴正方向，正向就是其余手指卷曲的方向。<br>6.3D呈现<br>设置内嵌的元素在 3D 空间如何呈现，这些子元素必须为变形原素。<br>flat：所有子元素在 2D 平面呈现<br>preserve-3d：保留3D空间<br>7、backface-visibility<br>设置元素背面是否可见。   <h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3>动画是css3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或者一组动画，常用来实现复杂的动画效果。<br>1.必要的元素<br>a、通过@keyframes指定动画序列；<br>b、通过百分比将动画序列分割成多个节点；<br>c、在各节点中分别定义各属性；<br>d、通过animation将动画应用于相应元素。<br>2.关键属性<br>a、animation-name设置动画序列名称<br>b、animation-duration动画持续时间<br>c、animation-delay动画延时时间<br>d、animation-timing-function动画执行速度，linear、ease等<br>e、animation-play-state动画播放状态，running、paused等<br>f、animation-direction动画逆播，alternate等。<br>g、animation-fill-mode动画执行完毕后状态，forwards、backwards等。<br>h、animation-iteration-count动画执行次数，inifinate等。<br>i、steps（60）表示动画分为60步完成。<br>参数值的顺序：关于几个值，除了名字，动画时间，延时有严格顺序要求其他随意。  <h3 id="伸缩布局"><a href="#伸缩布局" class="headerlink" title="伸缩布局"></a>伸缩布局</h3>css在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适用性非常强，其强大的伸缩性，在响应式布局中可以发挥极大的作用。也有兼容性问题。<br><img src="F:备用图片\伸缩布局.png" alt="image"><br>主轴：Flex容器的主轴主要用来配置Flex项目，默认是水平方向。<br>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的。<br>方向：默认主轴从左向右，侧轴默认从上到下。<br>主轴和侧轴并不是固定不变的，通过flex-direction可以互换。<br>1.必要属性<br>a、指定一个盒子为伸缩盒子 display：flex；<br>b、设置属性来调整此盒子的子元素的布局方式，如flex-direction<br>c、明确主侧轴及方向<br>d、可互换主侧轴，也可改变方向。<br>2.各个属性详解<br>a、flex-direction调整主轴方向（默认为水平方向）<br>b、justify-content调整主轴对齐<br>c、align-items调整侧轴对齐<br>d、flex-wrap控制是否换行<br>e、align-content堆栈（由flex-wrap产生的独立行）对齐<br>f、flex-flow是flex-direction、flex-wrap的简写形式<br>g、flex子项目在主轴的缩放比例，不指定flex属性，则不参与伸缩分配<br>h、order控制子项目的排列顺序，正序方式排序，从小到大<br>==主轴方向==<br>调整主轴方向（默认为水平方向）包括row、column、row-reverse、column-reverse。<br>调整主轴方向，默认为水平方向。<br>取值为column时，垂直排列。<br>取值为row-reverse时，水平反向排列。<br>取值column-reverse时，垂直反向排列。<br>==主轴方向对齐==<br>主轴方向对齐，可以调整元素在主轴方向上的对齐方式，包括flex-start、flex-end、center、space-between几种方式。<br>flex-start 起始点对齐。<br>flex-end  终止点对齐。<br>center   居中对齐。<br>space-around  四面环绕<br>space-between  两端对齐<br>==侧轴方向==<br>侧轴方向对齐方式，包括flex-start、flex-end、center、stretch。<br>flex-start  侧轴起始点对齐<br>flex-end   侧轴终止点对齐<br>center   侧轴居中对齐<br>stretch  侧轴拉伸对齐<br>==控制换行==<br>控制是否换行，包括wrap、nowrap。<br>nowrap不换行，wrap换行。<br>==堆栈排列==<br>可以应用flex-wrap：wrap后产生的换行进行控制，包括flex-start、flex-end、center、space-between、space-around、space-around、stretch。<br>flex-start 起始点对齐<br>flex-end  终止点对齐<br>center  居中对齐<br>space-around  四周环绕<br>space-between  两端对齐<br>stretch   拉伸<br>==flex-direction和flex-wrap的简写形式为flex-flow。==<br>==伸缩布局==<br>flex  控制子元素的伸缩比例<br>同align-items可覆盖父元素设置的algin-items，包括flex-start、flex-end、center、stretch。<br>==order可以控制子元素的顺序==  </li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    body&#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    ul&#123;</span></div><div class="line"><span class="undefined">      width: 800px;</span></div><div class="line"><span class="undefined">      height: 400px;</span></div><div class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="css">      <span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;</span></div><div class="line"><span class="css">      <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span></div><div class="line"><span class="undefined">      margin-left: -400px;</span></div><div class="line"><span class="css">      <span class="selector-tag">margin-top</span><span class="selector-pseudo">:-200px</span> ;</span></div><div class="line"><span class="undefined">      list-style-type: none;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*指定ul为父级伸缩容器*/</span></span></div><div class="line"><span class="undefined">      display: flex;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*默认主轴方向:向右*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*如何调整主轴的-方向---使用flex-direction属性--*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*主轴方向--默认向右*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-direction: row;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴方向向下*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-direction: column;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴方向向左*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-direction: row-reverse;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴方向向上*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-direction: column-reverse;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*如何调整主轴的-对齐方式----使用justify-content*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴对齐方向默认---向右*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*justify-content: flex-start;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴对齐方向---向左*/</span></span></div><div class="line"><span class="css">       <span class="comment">/*justify-content:flex-end;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴对齐方向---居中*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*justify-content: center;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴对齐方向---两端*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*justify-content: space-between;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴对齐方向----环绕*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*justify-content: space-around;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*默认侧轴方向:---向下*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*侧轴方向--向下*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*align-items: flex-start;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*侧轴方向--向上*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*align-items: flex-end;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*侧轴方向--中间*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*align-items: center;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*侧轴方向--拉伸状态,注意,在li中设置该属性,并且把li高度干掉*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*align-items: stretch;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*下面属性设置的时候,把li的宽度改为百分比的方式*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*控制是否换行:flex-wrap:nowrap*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*默认不换行*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*换行*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-wrap: wrap;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*反方向换行*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-wrap: wrap-reverse;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*柔性排列：设置或检索弹性盒模型对象的子元素排列方式*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*时候第二个ul*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*换行排列*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-flow: wrap;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*反方向排列*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-flow: wrap-reverse;*/</span></span></div><div class="line"><span class="css">     <span class="comment">/*flex-flow: row-reverse;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-flow: row-reverse nowrap;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/**/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    ul li&#123;</span></div><div class="line"><span class="css">      <span class="comment">/*width: 40%;*/</span></span></div><div class="line"><span class="undefined">      width: 200px;</span></div><div class="line"><span class="undefined">      height: 200px;</span></div><div class="line"><span class="undefined">      background-color: pink;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      line-height: 200px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="comment">/*分多少份*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*ul li:last-child&#123;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*flex: 1;*!*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*设置当前自己的这个元素的排列对齐方式*!*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*中间*!*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*align-self: center;*!*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*下面*!*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*align-self: flex-end;*!*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*&#125;*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*ul li:nth-child(1)&#123;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*调整顺序*!*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*order: 3;*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*&#125;*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*ul li:nth-child(2)&#123;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*order: 1;*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*&#125;*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*ul li:nth-child(3)&#123;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*order: 2;*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*&#125;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--演示之前的样式--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--演示弹性子元素排列方式--&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;ul&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;1&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;2&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;3&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;4&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;5&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;6&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;7&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;8&lt;/li&gt;--&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;/ul&gt;--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    body&#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    ul&#123;</span></div><div class="line"><span class="undefined">      width: 800px;</span></div><div class="line"><span class="undefined">      height: 400px;</span></div><div class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="css">      <span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;</span></div><div class="line"><span class="css">      <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span></div><div class="line"><span class="undefined">      margin-left: -400px;</span></div><div class="line"><span class="css">      <span class="selector-tag">margin-top</span><span class="selector-pseudo">:-200px</span> ;</span></div><div class="line"><span class="undefined">      list-style-type: none;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*指定ul为父级伸缩容器*/</span></span></div><div class="line"><span class="undefined">      display: flex;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*默认主轴方向:向右*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴方向--默认向右*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-direction: row;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴方向向下*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-direction: column;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴方向向左*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-direction: row-reverse;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴方向向上*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-direction: column-reverse;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*如何调整主轴的-对齐方式----使用justify-content*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*主轴对齐方向默认---向右*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*justify-content: flex-start;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴对齐方向---向左*/</span></span></div><div class="line"><span class="css">       <span class="comment">/*justify-content:flex-end;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴对齐方向---居中*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*justify-content: center;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴对齐方向---两端*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*justify-content: space-between;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*主轴对齐方向----环绕*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*justify-content: space-around;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*默认侧轴方向:---向下*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*侧轴方向--向下*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*align-items: flex-start;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*侧轴方向--向上*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*align-items: flex-end;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*侧轴方向--中间*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*align-items: center;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*侧轴方向--拉伸状态,默认值*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*align-items: stretch;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*下面属性设置的时候,把li的宽度改为百分比的方式*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*控制是否换行:flex-wrap:nowrap*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*默认不换行*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*换行*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-wrap: wrap;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*反方向换行*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-wrap: wrap-reverse;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">      <span class="comment">/*柔性排列：设置或检索弹性盒模型对象的子元素排列方式*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*时候第二个ul*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*换行排列*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-flow: wrap;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*反方向排列*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-flow: wrap-reverse;*/</span></span></div><div class="line"><span class="css">     <span class="comment">/*flex-flow: row-reverse;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*flex-flow: row-reverse nowrap;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/**/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ul li&#123;</span></div><div class="line"><span class="undefined">      width: 40%;</span></div><div class="line"><span class="css">      <span class="comment">/*width: 200px;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">      height: 200px;</span></div><div class="line"><span class="undefined">      background-color: pink;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      line-height: 200px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="comment">/*分多少份*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*ul li:last-child&#123;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*flex: 1;*!*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*设置当前自己的这个元素的排列对齐方式*!*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*中间*!*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*align-self: center;*!*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*下面*!*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*align-self: flex-end;*!*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*&#125;*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*ul li:nth-child(1)&#123;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*!*调整顺序*!*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*order: 3;*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*&#125;*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*ul li:nth-child(2)&#123;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*order: 1;*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*&#125;*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*ul li:nth-child(3)&#123;*/</span></span></div><div class="line"><span class="css">      <span class="comment">/*order: 2;*/</span></span></div><div class="line"><span class="css">    <span class="comment">/*&#125;*/</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--演示之前的样式--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--演示弹性子元素排列方式--&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;ul&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;1&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;2&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;3&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;4&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;5&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;6&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;7&lt;/li&gt;--&gt;</span></div><div class="line">  <span class="comment">&lt;!--&lt;li&gt;8&lt;/li&gt;--&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;/ul&gt;--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h4><p>兼容性很差，类似报纸和杂志中的排版方式，用以控制大篇幅文本。实际意义不大。   </p>
<h4 id="web字体"><a href="#web字体" class="headerlink" title="web字体"></a>web字体</h4><p>定义：开发人员可以为积极的网页指定特殊的字体，无需考虑用户电脑上是否安装了此特殊字体，支持程度较好，甚至IE低版本浏览器支持。<br>字体图标：把文字理解为一种特殊形状的图片，进而把图片做成文字。<br>优点：<br>1.将所有图标打包成字体库，减少请求。<br>2.具有矢量性，可以保证清晰度。<br>3.使用灵活，便于维护。  </p>
<h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p>一般兼容习惯处理的常见方法是为属性添加私有前缀，如不能解决，应该避免使用，无需刻意去了解css33的兼容性问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3&quot;&gt;&lt;a href=&quot;#CSS3&quot; class=&quot;headerlink&quot; title=&quot;CSS3&quot;&gt;&lt;/a&gt;CSS3&lt;/h1&gt;&lt;p&gt;css3就是css版本的一个升级，里面增加了一些新的样式，增强了一些样式。&lt;br&gt;css3现状：  &lt;/p&gt;
&lt;ol&gt;
&lt;l
    
    </summary>
    
      <category term="CSS3" scheme="http://yoursite.com/categories/CSS3/"/>
    
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>HTML5</title>
    <link href="http://yoursite.com/2016/07/10/12.HTML5/"/>
    <id>http://yoursite.com/2016/07/10/12.HTML5/</id>
    <published>2016-07-10T03:33:21.000Z</published>
    <updated>2017-11-03T09:09:45.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h3 id="一、html的版本升级。h5可以看成是标记语言，也可以看成是一个平台。（html5-css3-js合成的一个开发平台）"><a href="#一、html的版本升级。h5可以看成是标记语言，也可以看成是一个平台。（html5-css3-js合成的一个开发平台）" class="headerlink" title="一、html的版本升级。h5可以看成是标记语言，也可以看成是一个平台。（html5+css3+js合成的一个开发平台）"></a>一、html的版本升级。h5可以看成是标记语言，也可以看成是一个平台。（html5+css3+js合成的一个开发平台）</h3><h4 id="二、html5多用于移动端的开发。HTML5手机应用的最大优势就是可以直接调试和修改。html的设计目的是为了在移动设备上支持多媒体。"><a href="#二、html5多用于移动端的开发。HTML5手机应用的最大优势就是可以直接调试和修改。html的设计目的是为了在移动设备上支持多媒体。" class="headerlink" title="二、html5多用于移动端的开发。HTML5手机应用的最大优势就是可以直接调试和修改。html的设计目的是为了在移动设备上支持多媒体。"></a>二、html5多用于移动端的开发。HTML5手机应用的最大优势就是可以直接调试和修改。html的设计目的是为了在移动设备上支持多媒体。</h4><p>html5是专门为承接丰富的web内容而设计的，并且无需额外插件。html5中默认的字符编码是UTF-8。html5是跨平台的，被设计为在不同类型的硬件（pc，平板，手机，电视机等等）之上运行。html拥有新的语义（新元素，新语义标签，智能表单，多媒体标签等），图形以及多媒体元素。html5提供的新元素和新的API简化了web应用程序的搭建（如地理定位，重力感应）。<br>html5在语法规范上的特点为更简洁，更宽松，但是我们在实际开发中应该规范书写，不建议太随意！并且现在基本所有网站都采用了html5的语法规范。</p>
<h3 id="三、优点："><a href="#三、优点：" class="headerlink" title="三、优点："></a>三、优点：</h3><ol>
<li>提供可用性和改进用户的友好体验。</li>
<li>有几个新的标签，这将有助于开发人员定义重要的内容</li>
<li>可以给站点带来更多的多媒体元素（视频和音频）</li>
<li>可以更好的替代FLASH和Silverlight。</li>
<li>当涉及到网站的抓取和索引的时候，对于SEO很友好。  </li>
<li>将被大量应用于移动应用程序和游戏。 </li>
<li>可移植性很好。<h4 id="四、缺点：该标准未能很好的被浏览器所支持，因新标签的引入，各浏览器之间将缺少一种统一的数据描述格式，造成用户体验不佳。"><a href="#四、缺点：该标准未能很好的被浏览器所支持，因新标签的引入，各浏览器之间将缺少一种统一的数据描述格式，造成用户体验不佳。" class="headerlink" title="四、缺点：该标准未能很好的被浏览器所支持，因新标签的引入，各浏览器之间将缺少一种统一的数据描述格式，造成用户体验不佳。"></a>四、缺点：该标准未能很好的被浏览器所支持，因新标签的引入，各浏览器之间将缺少一种统一的数据描述格式，造成用户体验不佳。</h4><h5 id="五、漏洞：在浏览网页的时候总是会将cookie等小部分文件下载在本地硬盘上，这些文件都不大，控制在5-10kb之间。但是如果你在访问HTML5的网页的时候下载的文件就会顺便放大1000倍，容量可能在5mb或者以上，一些而已程序甚至能够通过这个漏洞不断在网页上下载一些无用文件直到填满你的硬盘。-类似网站有http-www-filldisk-com-。"><a href="#五、漏洞：在浏览网页的时候总是会将cookie等小部分文件下载在本地硬盘上，这些文件都不大，控制在5-10kb之间。但是如果你在访问HTML5的网页的时候下载的文件就会顺便放大1000倍，容量可能在5mb或者以上，一些而已程序甚至能够通过这个漏洞不断在网页上下载一些无用文件直到填满你的硬盘。-类似网站有http-www-filldisk-com-。" class="headerlink" title="五、漏洞：在浏览网页的时候总是会将cookie等小部分文件下载在本地硬盘上，这些文件都不大，控制在5-10kb之间。但是如果你在访问HTML5的网页的时候下载的文件就会顺便放大1000倍，容量可能在5mb或者以上，一些而已程序甚至能够通过这个漏洞不断在网页上下载一些无用文件直到填满你的硬盘。(类似网站有http://www.filldisk.com)。"></a>五、漏洞：在浏览网页的时候总是会将cookie等小部分文件下载在本地硬盘上，这些文件都不大，控制在5-10kb之间。但是如果你在访问HTML5的网页的时候下载的文件就会顺便放大1000倍，容量可能在5mb或者以上，一些而已程序甚至能够通过这个漏洞不断在网页上下载一些无用文件直到填满你的硬盘。(类似网站有<a href="http://www.filldisk.com)。" target="_blank" rel="external">http://www.filldisk.com)。</a></h5><h3 id="六、语法规范"><a href="#六、语法规范" class="headerlink" title="六、语法规范"></a>六、语法规范</h3>所有浏览器都支持&lt;!DOCTYPE&gt;声明。&lt;!DOCTYPE&gt;声明必须是html文档的第一行，位于<html>标签之前。<br>&lt;!DOCTYPE&gt;声明不是HTML标签，他是指示web浏览器关于页面使用哪个HTML版本进行编写的指令。<br>总结：&lt;!DOCTYPE&gt;不一样；meta标签后面有/不一样的(严格模式有/,其他模式没有/).<br>script标签中 type=“text/javascript” 可以省略(严格模式不能省略)。<br>但标签后面可以没有结束的/ 如:img标签后面可以没有/(h5的标准中可以省略)<br>&lt;!DOCTYPE html&gt;<br>&lt;!doctype html&gt;<br>两种写法都可以,个人推荐:大写<br>html5允许在元素名中使用混合大小写字母，但是还是推荐小写元素名，因为混合大小写名称并不好，而且开发者习惯使用小写，而且小写更易书写，写起来更纯净。<br>在html中，可以不必关闭所有元素（如<p>元素），建议关闭所有html元素。<br>类名推荐小写，属性推荐加双引号。<br>等号两边的空格是合法的，但是W3C中提示精简空格更容易阅读代码。<br>请勿毫无理由地增加空行，为了提高可读性，请增加空格来分隔大型或者逻辑代码块。<br>为了提高可读性，请增加两个空格的缩进。请勿使用tab。请勿使用没有必要的空格和缩进，没有必要在短的和相关项目之间使用空行，也没有必要缩进每个元素。<br>在html5标准中，能够省略<html>标签和<body>标签，但是不推荐这样做。html文件名应该使用扩展名.html(而不是.htm)。CSS文件应该使用拓展名.css，javascript文件应该使用扩展名.js。  <h3 id="H5的语义化"><a href="#H5的语义化" class="headerlink" title="H5的语义化"></a>H5的语义化</h3>==语义元素==：语义元素清楚地向浏览器和开发者描述其意义。<br>非语义元素的例子：<div> 和 <span> - 无法提供关于其内容的信息。<br>语义元素的例子：<form>、<table> 以及 <img> - 清晰地定义其内容。<br>优点:有利于搜索引擎和辅助设备来理解html页面内容<br>根据 W3C，语义网：“允许跨应用程序、企业和团体对数据进行分享和重用”<br><img src="F:备用图片\有无语义化.jpg" alt="image"><br><img src="F:备用图片\标签语义化1.jpg" alt="image"><br>尽量避免全局使用header、footer、aside等语义标签。  <h4 id="兼容处理"><a href="#兼容处理" class="headerlink" title="兼容处理"></a>兼容处理</h4>在不支持HTML5新标签的浏览器里，会将这些新的标签解析成行内元素(inline)对待，所以我们只需要将其转换成块元素(block)即可使用，但是在IE9版本以下，并不能正常解析这些新标签，但是却可以识别通过document.createElement(‘tagName’)创建的自定义标签，于是我们的解决方案就是将HTML5的新标签全部通过document.createElement(‘tagName’)来创建一遍，这样IE低版本也能正常解析HTML5新标签了，但在实际开发中我们更多采用的是通过检测IE浏览器的版本来加载第三方的一个JS库来解决兼容问题，这个库文件会帮自动通过document.createElement(‘tagName’)创建所有HTML5的新标签。<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line"><span class="comment">&lt;script&gt;  </span></div><div class="line"><span class="comment">;(function()&#123;    </span></div><div class="line"><span class="comment">var elements =['section','header','footer','article'];    </span></div><div class="line"><span class="comment">var i;    </span></div><div class="line"><span class="comment">for(i in elements)&#123;      document.createElement(elements[i]);    &#125;  &#125;)();</span></div><div class="line"><span class="comment">&lt;/script&gt;</span></div><div class="line"><span class="comment">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure>
</table></form></span></div></body></html></p></html></li>
</ol>
<h4 id="微数据"><a href="#微数据" class="headerlink" title="微数据"></a>微数据</h4><p>微数据是在如 span、div 的标签内添加属性，让机器（如搜索引擎）识别其含义，某些特定类型的信息，例如评论、人物信息或事件都有相应的属性，用来描述其含义，可以理解成新语义标签的一种补充。微数据的固定语法：在一项微数据的最外层div，需要用itemscope表示，并用itemtype指定微数据类型，itemtype的值是一个url用于引入一个微数据词汇表（即各种微数据的类型定义）。  </p>
<h4 id="WAI-ARIA-针对残障人士开发应用，role指定相应的属性为残障人士使用。太难了，想看查资料吧。"><a href="#WAI-ARIA-针对残障人士开发应用，role指定相应的属性为残障人士使用。太难了，想看查资料吧。" class="headerlink" title="WAI-ARIA:针对残障人士开发应用，role指定相应的属性为残障人士使用。太难了，想看查资料吧。"></a>WAI-ARIA:针对残障人士开发应用，role指定相应的属性为残障人士使用。太难了，想看查资料吧。</h4><p><img src="F:备用图片\表单输入类型.jpg" alt="image"><br><img src="F:备用图片\表单输入类型1.jpg" alt="image"><br><img src="F:备用图片\表单输入类型2.jpg" alt="image"><br><img src="F:备用图片\表单元素.jpg" alt="image"><br><img src="F:备用图片\表单元素1.jpg" alt="image"><br><img src="F:备用图片\表单属性.jpg" alt="image">  </p>
<h2 id="新增API"><a href="#新增API" class="headerlink" title="新增API"></a>新增API</h2><p>1.1网络状态<br>属性：window.onLine用户当前的网络状况，返回一个布尔值。<br>事件：<br>window.online用户网络连接时被调用<br>winodw.offline用户网络断开时被调用<br>1.2文件读取<br>通过FileReader对象可以读取本地存储的文件，使用File对象来指定索要读取的文件或数据。File对象可以是来自用户在一个<input type="file">元素上选择文件后返回的FileList对象，也可以来自自由拖放操作生成的DataTransfer。<br>1.2.1 FileList对象<br>HTML5中通过为表单元素添加multiple属性实现文件多选，因此通过<input type="file">上传文件后得到的FileList对象是以伪数组的形式存在。<br>1.2.2 FileReader对象<br>HTML5新增内建对象，用以读取本地文件。<br>属性：result文件读取的结果<br>事件：onload文件读取结果<br>方法：readAsDataURL()、readAsText()<br>1.3 地理定位<br>在HTML规范中，增加了获取用户地理信息的API，这样使得我们可以基于用户位置开发互联网应用，即基于位置服务(Location Base Service)。<br>1.3.1获取方式<br>通过IP地址、三维坐标、GPS、Wi-Fi、手机信息等多种方式获取地址信息，如下图对不同获取方式的优缺点进行了比较，浏览器会自动以最优方式去获取用户地理信息。<br><img src="F:备用图片\地理定位.jpg" alt="image"><br>1.3.2 隐私<br>HTML5 Geolocation 规范提供了一套保护用户隐私的机制。必须先得到用户明确许可，才能获取用户的位置信息。<br>1.3.3 方法<br>1、获取当前地理信息<br>    navigator.geolocation.getCurrentPosition(successCallback, errorCallback)<br>2、获取实时地理信息<br>    navigator.geolocation.watchPosition(successCallback, errorCallback)<br>当成功获取地理信息后，会调用succssCallback，并返回一个包含位置信息的对象。<br>获取地理信息失败后，会调用errorCallback，并返回一个包含错误信息的对象。<br>position.coords.latitude纬度<br>position.coords.longitude经度<br>position.coords.accuracy精度<br>position.coords.altitude海拔高度<br>1.3.4 应用<br>在现实开发中，通过调用第三方API（如百度地图）来实现地理定位信息，这些API都是基于用户当前位置的，并将用位置位置（经/纬度）当做参数传递，就可以实现相应的功能。<br>1.4 Web存储<br>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，传统方式我们以document.cookie来进行存储的，但是由于其存储大小只有4k左右，并且解析也相当的复杂，给开发带来诸多不便，HTML5规范则提出解决方案，使用sessionStorage和localStorage存储数据。<br>1.4.1 特性<br>    1、设置、读取方法<br>    2、容量较大<br>    3、只能存储字符串，可以将对象JSON.stringify() 编码后存储<br>1.4.2  差异<br>sessionStorage：<br>    1、生命周期为关闭浏览器窗口<br>    2、在同一个窗口下数据可以共享<br>    3、容量约5M<br>localStorage：<br>    1、永久生效，除非手动删除(在chrome浏览器下需要以服务器方式)<br>    2、可以多窗口共享<br>    3、容量约20M<br>1.4.3  方法<br>    setItem(key, value) 设置存储内容<br>    getItem(key) 读取存储内容<br>    removeItem(key) 删除键值为key的存储内容<br>    clear() 清空所有存储内容<br>    key(n) 以索引值来获取存储内容<br>1.4.4   其他<br>    WebSQL、IndexDB、Application Cache  </p>
<h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4><p>概念：就是自己加的属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//如果可以一个属性就能获取所有的自定义属性的值---(标准的写法的自定义属性)</span></div><div class="line"><span class="keyword">var</span> dvObj=<span class="built_in">document</span>.getElementById(<span class="string">"dv"</span>);</div><div class="line"> <span class="comment">//console.log(dvObj.dataset);//所有的自定义属性及值</span></div><div class="line">  <span class="keyword">var</span> dt=dvObj.dataset;<span class="comment">//h5中新增的</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> dt)&#123;</div><div class="line">    <span class="built_in">console</span>.log(key,dt[key]);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> dvObj=<span class="built_in">document</span>.getElementById(<span class="string">"dv"</span>);</div><div class="line"> <span class="comment">//设置自定义属性---规范,名字必须是驼峰命名法,否则就出事了</span></div><div class="line">  dvObj.dataset[<span class="string">"height"</span>]=<span class="string">"199"</span>;  dvObj.dataset[<span class="string">"myWeight"</span>]=<span class="string">"199"</span>;    dvObj.dataset.myFace=<span class="string">"太帅了"</span>;</div></pre></td></tr></table></figure></p>
<h5 id="json格式的数据"><a href="#json格式的数据" class="headerlink" title="json格式的数据"></a>json格式的数据</h5><p>就是一个键值对对象，是一个特殊格式的字符串。<br>json格式的数据—》字符串<br>字符串的数据—–》json</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML5&quot;&gt;&lt;a href=&quot;#HTML5&quot; class=&quot;headerlink&quot; title=&quot;HTML5&quot;&gt;&lt;/a&gt;HTML5&lt;/h1&gt;&lt;h3 id=&quot;一、html的版本升级。h5可以看成是标记语言，也可以看成是一个平台。（html5-css3-js合成的一
    
    </summary>
    
      <category term="HTML5" scheme="http://yoursite.com/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>JSONP原理</title>
    <link href="http://yoursite.com/2016/06/15/11.jsonp%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2016/06/15/11.jsonp的原理/</id>
    <published>2016-06-15T03:33:21.000Z</published>
    <updated>2017-11-03T09:09:01.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jsonp的原理"><a href="#jsonp的原理" class="headerlink" title="jsonp的原理"></a>jsonp的原理</h2><ul>
<li>一个中所周知的问题，Ajax直接请求普通文件存在跨域无权访问的问题，甭管你是静态页面、动态网页、web服务、WCF()，主要是跨域问题，一律不准。<ul>
<li>注释：WCF(Windows Communication Foundation)是由微软开发的一些列支持数据通信的应用程序框架，可以翻译为windows通讯开发平台。</li>
</ul>
</li>
<li>不过我们发现，Web页面上调用js文件时则不受是否跨域的影响(不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<script>、<img>、<iframe>)。</li>
<li>于是可以判断，当前阶段如果想通过纯web端(ActiveX空间、服务端低矮、属于未来的HTML5之Websocket等方式不算)跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进去js格式的文件里，供客户端调用和进一步处理。</li>
<li>恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生所支持，所以在客户端几乎可以随心所欲的处理这种格式的数据。</li>
<li>这样子解决方案就呼之欲出额，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件(一般以JSON为后缀)，显而易见，服务器之所以要冬天生成JSON文件，目的就在于把客户端需要的数据装进去。</li>
<li>客户端在堆JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。</li>
<li>为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传输一个callback参数给服务端，然后跟服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</li>
</ul>
<h3 id="JSONP的客户端实现："><a href="#JSONP的客户端实现：" class="headerlink" title="JSONP的客户端实现："></a>JSONP的客户端实现：</h3><ul>
<li>不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我们来循序渐进地说明一下jsonp在客户端如何实现</li>
</ul>
<h4 id="1-我们知道，哪怕跨域js文件中的代码-当然指符合web脚本安全策略的-，web页面也是可以无条件执行的。"><a href="#1-我们知道，哪怕跨域js文件中的代码-当然指符合web脚本安全策略的-，web页面也是可以无条件执行的。" class="headerlink" title="1.我们知道，哪怕跨域js文件中的代码(当然指符合web脚本安全策略的)，web页面也是可以无条件执行的。"></a>1.我们知道，哪怕跨域js文件中的代码(当然指符合web脚本安全策略的)，web页面也是可以无条件执行的。</h4><ul>
<li>远程服务器remoteserve.com根目录下有个remote.js文件代码如下：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert("我是远程文件");</div></pre></td></tr></table></figure>
<p>本地服务器localserver.com下有个jsonp.html页面代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://remoteserver.com/remote.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。  </p>
<h4 id="2-现在我们在jsonp-html野蛮定义一个函数，然后在远程remote-js中传入数据进行调用"><a href="#2-现在我们在jsonp-html野蛮定义一个函数，然后在远程remote-js中传入数据进行调用" class="headerlink" title="2.现在我们在jsonp.html野蛮定义一个函数，然后在远程remote.js中传入数据进行调用"></a>2.现在我们在jsonp.html野蛮定义一个函数，然后在远程remote.js中传入数据进行调用</h4><p>jsonp.html页面代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var localHandler = function(data)&#123;</span></div><div class="line"><span class="undefined">        alert('我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：' + data.result);</span></div><div class="line"><span class="undefined">    &#125;;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://remoteserver.com/remote.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>remote.js文件代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localHandler(&#123;"result":"我是远程js带来的数据"&#125;);</div></pre></td></tr></table></figure></p>
<p>运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。<br>跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程hs知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着走；  </p>
<h4 id="聪明的开发者很容易想到，只要服务端提供的js交班本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端”我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并相应了。"><a href="#聪明的开发者很容易想到，只要服务端提供的js交班本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端”我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并相应了。" class="headerlink" title="聪明的开发者很容易想到，只要服务端提供的js交班本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端”我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并相应了。"></a>聪明的开发者很容易想到，只要服务端提供的js交班本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端”我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并相应了。</h4><p>看jsonp.html页面的代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    // 得到航班信息查询结果后的回调函数</span></div><div class="line"><span class="undefined">    var flightHandler = function(data)&#123;</span></div><div class="line"><span class="undefined">        alert('你查询的航班结果是：票价 ' + data.price + ' 元，' + '余票 ' + data.tickets + ' 张。');</span></div><div class="line"><span class="undefined">    &#125;;</span></div><div class="line"><span class="undefined">    // 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></div><div class="line"><span class="undefined">    var url = "http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler";</span></div><div class="line"><span class="undefined">    // 创建script标签，设置其属性</span></div><div class="line"><span class="undefined">    var script = document.createElement('script');</span></div><div class="line"><span class="undefined">    script.setAttribute('src', url);</span></div><div class="line"><span class="undefined">    // 把script标签加入head，此时调用开始</span></div><div class="line"><span class="undefined">    document.getElementsByTagName('head')[0].appendChild(script); </span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这正是jsonp客户端实现的核心部分，本来中的重点就在于如何完成jsonp调用的全过程。<br>我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我们本地回调函数叫做fightHandler,所以请把查询结果传入这个函数中进行调用。<br>OK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html ，（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flightHandler(&#123;</div><div class="line">    "code": "CA1998",</div><div class="line">    "price": 1780,</div><div class="line">    "tickets": 5</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！</p>
<h4 id="到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。-jQuery如何实现jsonp调用？"><a href="#到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。-jQuery如何实现jsonp调用？" class="headerlink" title="到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。 jQuery如何实现jsonp调用？"></a>到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。 jQuery如何实现jsonp调用？</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>Untitled Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">jquery.min.js</span>"&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">     jQuery(document).ready(function()&#123; </span></div><div class="line"><span class="undefined">        $.ajax(&#123;</span></div><div class="line"><span class="undefined">             type: "get",</span></div><div class="line"><span class="undefined">             async: false,</span></div><div class="line"><span class="undefined">             url: "http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998",</span></div><div class="line"><span class="undefined">             dataType: "jsonp",</span></div><div class="line"><span class="undefined">             jsonp: "callback",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></div><div class="line"><span class="undefined">             jsonpCallback:"flightHandler",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据</span></div><div class="line"><span class="undefined">             success: function(json)&#123;</span></div><div class="line"><span class="undefined">                 alert('您查询到航班信息：票价： ' + json.price + ' 元，余票： ' + json.tickets + ' 张。');</span></div><div class="line"><span class="undefined">             &#125;,</span></div><div class="line"><span class="undefined">             error: function()&#123;</span></div><div class="line"><span class="undefined">                 alert('fail');</span></div><div class="line"><span class="undefined">             &#125;</span></div><div class="line"><span class="undefined">         &#125;);</span></div><div class="line"><span class="undefined">     &#125;);</span></div><div class="line"><span class="undefined">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！<br>这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？ </p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>1、ajax和jsonp这两种技术在调用方式上”看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装。 </p>
<p>2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。 </p>
<p>3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。 </p>
<p>4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。 </p>
</script></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jsonp的原理&quot;&gt;&lt;a href=&quot;#jsonp的原理&quot; class=&quot;headerlink&quot; title=&quot;jsonp的原理&quot;&gt;&lt;/a&gt;jsonp的原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一个中所周知的问题，Ajax直接请求普通文件存在跨域无权访问的问题，甭管你是静态
    
    </summary>
    
      <category term="JSONP" scheme="http://yoursite.com/categories/JSONP/"/>
    
    
      <category term="JSONP" scheme="http://yoursite.com/tags/JSONP/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶版本2.0</title>
    <link href="http://yoursite.com/2016/05/20/10.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%E7%89%88%E6%9C%AC2.0/"/>
    <id>http://yoursite.com/2016/05/20/10.面向对象进阶版本2.0/</id>
    <published>2016-05-20T04:22:26.000Z</published>
    <updated>2017-11-03T09:08:43.769Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h3><ul>
<li>编写通用框架-可以使用jQuery。</li>
<li>编写通用UI组件——可以选择使用jQuery UI插件。</li>
<li>编写其他框架：验证，产品价格计算，可以使用jQuery插件。</li>
<li>页面初始化：绑定，事件，性能，安全</li>
<li>ajax交互：数据获取，数据提交</li>
</ul>
<h3 id="面向对象开发"><a href="#面向对象开发" class="headerlink" title="面向对象开发"></a>面向对象开发</h3><ul>
<li>分析需要的对象</li>
<li>分析每个对象需要的属性和方法</li>
<li>一次实现每个对象</li>
<li>面向对象编程(直接使用封装好的方法)</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li>不要一口吃个胖子，分成小的，一个一个解决</li>
<li>比如：绑定数据：我们用两个函数封装：<ul>
<li>一个绑定基本信息</li>
<li>一个绑定图片</li>
</ul>
</li>
</ul>
<h3 id="页面开发整体思路"><a href="#页面开发整体思路" class="headerlink" title="页面开发整体思路"></a>页面开发整体思路</h3><ul>
<li>先思考页面初始化所需要做的使用：<ul>
<li>绑定产品相关</li>
<li>绑定购物车相关</li>
</ul>
</li>
<li>然后思考页面在和用户交互过程需要做的事情<ul>
<li>什么事交互</li>
<li>如何实现交互</li>
</ul>
</li>
</ul>
<h3 id="基础知识汇总"><a href="#基础知识汇总" class="headerlink" title="基础知识汇总"></a>基础知识汇总</h3><ul>
<li>数据存储在磁盘中。</li>
<li>计算机的磁盘其实就是无数个0和1或者无数个开关，又叫二极管每个二极管有两个状体：开关。开表示1，关表示0。</li>
<li>二进制(短除法)：比如7除以2等于3余1，再除以2等于1，余数1.那么他的二进制是111。倒回去就是最后一个1乘以2的0次方，倒数第二个1乘以2的1次方，第一个1乘以2的二次方，然后三者和相加则可以得到十进制的数字。指令也是01表示的，001表示加法，010表示减法，011表示乘法。三个二极管可以表示八个指令。指令越多，计算机就越牛逼，32位操作系统只能表示2的32次方个指令，64位操作系统可以识别2的64位操作系统。</li>
<li>二进制图片的处理就是把图片描绘在一个一个帧点上来画出来。所以就有了分辨率的问题。</li>
<li>CPU内部就是无数个二极管造成的。1纳米等于10的-9次方米。内存就是一个二进制存储器。</li>
<li>代码执行的方式：系统会将我们编写的代码全部转换成对应的二进制，也就是01存放在内存中。CPU一行一行的从内存中读取这些01010，然后实现运算。</li>
<li>汇编语言用于一些易于记住的符号来表示二进制指令。汇编语言用8进制，16进制等来表示二进制。<ul>
<li>2进制：0，1</li>
<li>8进制：0,1,2,3,4,5,6,7</li>
<li>16进制：它由0-9，A-F组成</li>
<li>8进制和16进制知识二进制的简化写法，归根到底还是二进制，就是一大坨二进制代码的简称而已，他们有一套法则的运算方式能够将2进制转换成8进制和16进制。当CPU运算的时候，再从8进制或者16进制转换成2进制再进行计算。</li>
<li>编译原理就是将高级语言编程成汇编语言，然后编译成二进制语言的过程。由于计算机只认识0和1，所以我们使用的各种语言编码编写的代码最终都会编译成汇编语言，然后再编译成二进制语言，也有的语言跳过汇编，直接编译成二进制语言。</li>
</ul>
</li>
</ul>
<h3 id="C语言编程-面向对象编程"><a href="#C语言编程-面向对象编程" class="headerlink" title="C语言编程-面向对象编程"></a>C语言编程-面向对象编程</h3><h3 id="高级语言-面向对象语法"><a href="#高级语言-面向对象语法" class="headerlink" title="高级语言-面向对象语法"></a>高级语言-面向对象语法</h3><ul>
<li>C++ 面向对象语言的鼻祖</li>
<li>Java 面向对象发扬光大</li>
<li>C# 结合java C++等多种面向对象语言的优点开发的一种语言</li>
<li>PHP</li>
<li>JavaScript 高级版本已经开始支持面向对象比如class关键字</li>
<li>Object C:开发iphone，落后的语言</li>
<li>Swift：法法iphone结合java C# C++等开发的一种更加优秀的语言</li>
<li>Ruby</li>
<li>python</li>
<li>==总结：格式千变万化，但是本质都是一样的；属性和方法==  <h3 id="网络传输和二进制"><a href="#网络传输和二进制" class="headerlink" title="网络传输和二进制"></a>网络传输和二进制</h3></li>
<li>互联网看到的数据都是通过01传递的。</li>
<li>将汉字，拖欠，代码等数据翻译成01的过程称之为序列化。</li>
<li>将10翻译成汉字，图片，diamante的过程称之为反序列化。</li>
<li>wifi是一种以波的形式传输的能量场。信号波就有一定强度，彼此之间存在距离，以一定的速度传输。wifi波波长约为3到5英寸。波峰代表1，波谷代表0。</li>
<li>光纤信号的琴调都是强度调制，发一束强光那就代表1，发一束弱光就代表0。</li>
</ul>
<h2 id="构造函数和属性"><a href="#构造函数和属性" class="headerlink" title="构造函数和属性"></a>构造函数和属性</h2><h3 id="构造函数和普通函数"><a href="#构造函数和普通函数" class="headerlink" title="构造函数和普通函数"></a>构造函数和普通函数</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ul>
<li>构造函数用来实例化一个对象</li>
<li>就像是一道菜谱，按照这个菜谱炒了一盘菜。</li>
<li>语法点：var product=new Product();</li>
<li>构造函数和普通函数的区别<ul>
<li>对象其实是使用函数实现的</li>
<li>对象本身就是一个函数</li>
<li>如果一个函数用于创建对象，我们一般称之为构造函数。</li>
</ul>
</li>
<li>js创建对象的四种方式<ul>
<li>参数传参</li>
<li>默认值</li>
<li>动态添加属性</li>
<li>混合模式</li>
</ul>
</li>
<li><p>构造语法规范</p>
<ul>
<li>成员(属性)定义规范</li>
<li>this.name</li>
<li>成员(方法)定义规范：<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.buy=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"buy"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>属性访问： 点语法</p>
<ul>
<li>先实例化，再使用点语法访问<h4 id="instanceOf"><a href="#instanceOf" class="headerlink" title="instanceOf"></a>instanceOf</h4>如何判断某个实例是否是根据某个猴枣函数创建的<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(pl <span class="keyword">instanceof</span> Product)&#123;</div><div class="line">    clert(<span class="string">"true"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>高级语言构造函数是没有return的，而js比较特殊，js构造函数本省就是一个函数，所以拥有函数的一切的特性。 </p>
</li>
<li><strong>如果return是一个对象，则new的时候返回的是return的对象。</strong>  </li>
</ul>
<p><strong>万物皆属性</strong><br>一切数据都是通过变量来统一管理的。  </p>
<ul>
<li>如何避免重大损失<ul>
<li>后台开发校验</li>
<li>前端开发人员也校验</li>
</ul>
</li>
<li>作用<ul>
<li>对属性封装一些操作：比如判断，校验，默认值等等</li>
<li>保护某些属性</li>
</ul>
</li>
</ul>
<h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><ul>
<li>因为这些是ECMAScript 5新增属性，所以老版本浏览器都不一定支持</li>
<li>如果不考虑兼容低端浏览器，可以使用</li>
<li>支持浏览器：Chromre 32、IE 9、FireFox 28、Opera 19,Safari 5.1.7。</li>
<li>设置属性读取权限<ul>
<li>设置属性的访问权限</li>
<li>Object.defineProperty(a,b,c)</li>
<li>a. 必须要属性设置的对象</li>
<li>b. 必须要设置的属性名，（键值）</li>
<li>c. 是一个用于描述属性值得json数据，这个json数占领configurable，enmerable，writable，value构成。</li>
<li>configurable<ul>
<li><ol>
<li>可否被删除</li>
</ol>
</li>
<li><ol>
<li>他的属性值可否被批改</li>
</ol>
</li>
<li><ol>
<li>可否把属性设置成接见器属性，默认值是true，可以删除，批改，设置</li>
</ol>
</li>
<li>eumerable：可否被for-in轮回道</li>
<li>writable默示属性值可否被批改</li>
<li>value：属性值</li>
</ul>
</li>
<li>团队合作中的使用：高级开发工程师编写一个对象，为了防止别人使用的时候限制某些权限，可以使用该方法。 </li>
</ul>
</li>
</ul>
<h3 id="共有属性和私有属性"><a href="#共有属性和私有属性" class="headerlink" title="共有属性和私有属性"></a>共有属性和私有属性</h3><ul>
<li>对象都是一个一个小工具包</li>
<li>bindDOMDetail是私有，外界无法访问</li>
<li>init是共有，外界可以访问，类似于接口。<ul>
<li>好处是方便其他人使用，还可以防止其他人员访问核心代码。</li>
</ul>
</li>
</ul>
<h4 id="config对象"><a href="#config对象" class="headerlink" title="config对象"></a>config对象</h4><p>定义一个config对象保存当前对象的临时变量，这样其他所有成员都可以访问：  </p>
<ul>
<li>统一管理</li>
<li>方便内存回收</li>
<li>解决代码重复性问题：一定要保证你写的代码不要重复的</li>
<li>如何避免重复：利用函数来解决代码的复用性</li>
<li>重复性带来的危害：一旦需求改变，需要更改代码，那么所有重复的地方都需要更改。</li>
</ul>
<h4 id="实例化的本质"><a href="#实例化的本质" class="headerlink" title="实例化的本质"></a>实例化的本质</h4><ul>
<li>一些数据通过变量来管理。定义变量的过程其实就是内存分配的过程，所以本质上一切数据都是存放在内存中的。</li>
<li>数据通过变量来管理，不管是字符串，数字，还是复杂的对象，都是存放在变量中的。</li>
</ul>
<h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><ul>
<li>对象也不例外，对象也是放在变量中管理的。</li>
<li>一切数据都是保存在内存中的。</li>
<li>当打开浏览器的时候，系统先把我们开发的代码放在内存中。然后解析成我们看到的绚丽的页面。</li>
</ul>
<h5 id="数据类型复习"><a href="#数据类型复习" class="headerlink" title="数据类型复习"></a>数据类型复习</h5><ol>
<li>数值型(Number):包括整数，浮点数。</li>
<li>布尔值(Boolean)</li>
<li>字符串型(String)</li>
<li>对象(Object)</li>
<li>数组(Array)</li>
<li>空值(Null)</li>
<li>未定义(Undefined)</li>
</ol>
<ul>
<li>typeof判断数据类型<ul>
<li>在使用typeof运算符时采用引用类型存储值会出现一个问题，无论引用的是什么类型的对象，它都返回”object”。</li>
</ul>
</li>
<li>第二种方式</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(toString.call(<span class="number">123</span>)) <span class="comment">//[object Number]</span></div><div class="line"><span class="built_in">console</span>.log(toString.call(<span class="string">'123'</span>)) <span class="comment">//[object String]</span></div><div class="line"><span class="built_in">console</span>.log(toString.call(<span class="literal">undefined</span>)) <span class="comment">//[object Undefined]</span></div><div class="line"><span class="built_in">console</span>.log(toString.call(<span class="literal">true</span>)) <span class="comment">//[object Boolean]</span></div><div class="line"><span class="built_in">console</span>.log(toString.call(&#123;&#125;)) <span class="comment">//[object Object]</span></div><div class="line"><span class="built_in">console</span>.log(toString.call([])) <span class="comment">//[object Array]</span></div><div class="line"><span class="built_in">console</span>.log(toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)) <span class="comment">//[object Function]</span></div></pre></td></tr></table></figure>
<ul>
<li>第三种方法<ul>
<li>instanceof 数据类型判断</li>
<li>判断已知对象类型的方法：instanceof</li>
<li>注意：在instanceof后面一定要有对象类型，并且大小不能写错，该方法适合一些条件选择或者分支。</li>
</ul>
</li>
<li>第四种方法<ul>
<li>constructor判断</li>
</ul>
</li>
</ul>
<h5 id="jQuery中判断数据的方法"><a href="#jQuery中判断数据的方法" class="headerlink" title="jQuery中判断数据的方法"></a>jQuery中判断数据的方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//    jQuery提供一系列工具方法，用来判断数据类型，以弥补JavaScript原生的typeof运算符的不足。</span></div><div class="line"><span class="comment">//     以下方法对参数进行判断，返回一个布尔值。</span></div><div class="line"><span class="comment">//    jQuery.isArray()：是否为数组。</span></div><div class="line"><span class="comment">//    jQuery.isEmptyObject()：是否为空对象（不含可枚举的属性）。</span></div><div class="line"><span class="comment">//    jQuery.isFunction()：是否为函数。</span></div><div class="line"><span class="comment">//    jQuery.isNumeric()：是否为数字。</span></div><div class="line"><span class="comment">//    jQuery.isPlainObject()：是否为使用“&#123;&#125;”或“new Object”生成的对象，而不是浏览器原生提供的对象。</span></div><div class="line"><span class="comment">//    jQuery.isWindow()：是否为window对象。//    jQuery.isXMLDoc()：判断一个DOM节点是否处于XML文档之中。</span></div></pre></td></tr></table></figure>
<h4 id="内存介绍"><a href="#内存介绍" class="headerlink" title="内存介绍"></a>内存介绍</h4><ul>
<li>代码的执行过程：<ul>
<li>系统先将我们写的diamante编译成二进制</li>
<li>将二进制写进内存</li>
<li>CPU读取内存中的保存的数据，通过一大堆复杂的程序让我们看到漂亮的页面。</li>
</ul>
</li>
<li>数据最终都要放入到内存中 </li>
<li><strong>指针</strong>：在定义一个变量的时候，有两个重要的量：值和地址。地址也就是指针。<ul>
<li>指针的解释：指针就类似于门牌号，方便搜索，搜索引擎优化。</li>
<li><strong>一个变量如果保存的是门牌号，就称其指向某个变量。</strong></li>
</ul>
</li>
<li>内存和变量<ul>
<li>一切数据都是保存在内存中</li>
<li>变量定义：每个数据都会有一个地址(门牌号).</li>
<li>因为数据可能很复杂，为了能够快速找到，对数字的搜索很快。</li>
</ul>
</li>
</ul>
<h4 id="对象实例在内存中的存储"><a href="#对象实例在内存中的存储" class="headerlink" title="对象实例在内存中的存储"></a>对象实例在内存中的存储</h4><ul>
<li>实例拷贝原理：内存分配会自动拷贝构造对象的所有属性，并赋以实例的值。</li>
<li>实例在内存中的保存：当你实例化一个对象，那么内存中会开辟两个内存区域：一个保存实例名称变量，其保存的只是地址。一个保存对象的真正的数据。</li>
<li><strong>总结</strong><ul>
<li>实例化的过程其实就是拷贝构造函数属性的过程</li>
<li>==除了拷贝意外还会自动生成一个constructor属性，用于识别其实根据哪个构造函数创建的实例。==</li>
</ul>
</li>
</ul>
<h3 id="原型对象本质"><a href="#原型对象本质" class="headerlink" title="原型对象本质"></a>原型对象本质</h3><h4 id="原型对象的必要性——构造函数创建对象存在的问题"><a href="#原型对象的必要性——构造函数创建对象存在的问题" class="headerlink" title="原型对象的必要性——构造函数创建对象存在的问题"></a>原型对象的必要性——构造函数创建对象存在的问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//会拷贝一份</span></div><div class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> Product();</div><div class="line"><span class="keyword">var</span> p2=<span class="keyword">new</span> Product();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(p1.constructor);</div><div class="line"><span class="built_in">console</span>.log(p2.constructor);</div></pre></td></tr></table></figure>
<p><strong>存在的问题</strong><br>每个实例的name，描述确实不一样，需要单独的空间存储，但是buy方法是所有实例都是一样的。我了避免内存浪费，所以就出现了原型帮我们解决这个问题。<br><strong>原型对象，不管你实例化多少次，都只生成一次。</strong>  </p>
<ul>
<li>只用构造函数创建对象存在的缺点<ul>
<li>对象需要实例化</li>
<li>每次实例化都需要分配内存存储这些数据</li>
<li>如果实例很多，那就要分配很多内存存储</li>
<li>一般每个实例的属性是不一样的，而行为一般都是一样的，所以我们希望每次实例化的方法，只分配内存保存不一样的数据。</li>
<li>而像原型对象方法，可以非配一次空间，所有的实例共享这个方法，所以需要原型对象。</li>
</ul>
</li>
<li>==原型对象中的工具被所有实例所共享==</li>
<li>原型对象的本质：<strong>原型对象的属性和方法可以被所有实例共享</strong><ul>
<li>这样，如果我们需要修改属性或者方法，就只需要修改一处，就能够影响到所有实例了。</li>
<li>所以，一般大家将共有的东西放在原型独享中。每个实例独特的不一样的属性放在构造函数中。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//面试题</span></div><div class="line"><span class="comment">//题目三</span></div><div class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">fun.prototype = &#123;</div><div class="line">    info: &#123;</div><div class="line">    name: <span class="string">"peter"</span>,</div><div class="line">    age: <span class="number">25</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fun();</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> fun();</div><div class="line">a.info.name = <span class="string">"jack"</span>;</div><div class="line">b.info.name = <span class="string">"tom"</span>;</div><div class="line"><span class="built_in">console</span>.log(a.info.name); <span class="comment">//tom</span></div><div class="line"><span class="built_in">console</span>.log(b.info.name); <span class="comment">//tom</span></div></pre></td></tr></table></figure>
<h4 id="术语总结：双对象法则"><a href="#术语总结：双对象法则" class="headerlink" title="术语总结：双对象法则"></a>术语总结：双对象法则</h4><ul>
<li>通过原型创建对象，其实创建的是两个对象<ul>
<li>构造函数对象</li>
<li>原型对象</li>
</ul>
</li>
<li>当我们实例化的时候，该实例自动拷贝构造函数的所有属性和方法，而对于原型对象，则不拷贝，而是通过一个属性“铁链”。</li>
<li>双对象的名称<ul>
<li>构造函数对象的名称：就是函数名称</li>
<li>原型对象的名称：古怪点：函数名称.prototype。</li>
</ul>
</li>
<li>双双对象第一个对象：构造函数(对象) <ul>
<li>构造函数对象</li>
<li>构造函数对象中的属性方法</li>
<li>构造属性方法</li>
</ul>
</li>
<li>双对象第一个对象：原型对象<ul>
<li>原型</li>
<li>原型对象</li>
<li>原型属性 原型方法</li>
</ul>
</li>
</ul>
<h3 id="铁索连舟"><a href="#铁索连舟" class="headerlink" title="铁索连舟"></a>铁索连舟</h3><ul>
<li>实例不拷贝原型中的属性方法，如何访问其他属性？</li>
<li>隐藏的两个属性<ul>
<li>任何实例都有一个隐藏的属性：contructor，其值是构造函数。</li>
<li>此外还有一个隐藏的属性：prototype1，这就像一条铁链一样，将实例和原型对象连在一起，这样我们就可以访问到原型对象中的方法，而不用拷贝。</li>
</ul>
</li>
<li>双隐藏属性法则<ul>
<li>contructor</li>
<li>prototype</li>
</ul>
</li>
<li><strong>属性访问搜索原则</strong>  <ul>
<li>首先遍历自己的属性(从构造函数拷贝过来的属性)，如果找到就返回。</li>
<li>如果没找到，就根据铁链寻找到原型对象，一次遍历原型对象中的属性，如果找到同名的属性就返回。</li>
</ul>
</li>
<li><strong>原型链定义</strong>：以上的链式访问形式有一个术语：原型链。</li>
</ul>
<h4 id="主体屏蔽理论"><a href="#主体屏蔽理论" class="headerlink" title="主体屏蔽理论"></a>主体屏蔽理论</h4><ul>
<li>原型中也可以包含属性</li>
<li>两种访问方式<ul>
<li>访问原型对象中的属性 Product.prototype.buy() ;</li>
</ul>
</li>
<li>属性屏蔽理论 </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Product.prototype=&#123;</div><div class="line">    name:<span class="string">"zzz"</span>,</div><div class="line">    buy:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"原型对象"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> product=<span class="keyword">new</span> Product();</div><div class="line"><span class="comment">//原型属性屏蔽理论——乌云蔽日</span></div><div class="line"><span class="built_in">console</span>.log(product.buy());</div><div class="line"><span class="comment">//清除乌云</span></div><div class="line"><span class="keyword">delete</span> product.buy;</div><div class="line"><span class="built_in">console</span>.log(product.buy());</div><div class="line"></div><div class="line"><span class="comment">//被屏蔽之后如何获取</span></div><div class="line"><span class="built_in">console</span>.log(Product.prototype.buy());</div></pre></td></tr></table></figure>
<h4 id="构造属性和原型属性判断"><a href="#构造属性和原型属性判断" class="headerlink" title="构造属性和原型属性判断"></a>构造属性和原型属性判断</h4><ul>
<li>hasOwnProperty()方法<ul>
<li>可以判断一个属性是存在于构造对象的实例上海市原型对象上，该方法继承自Object。</li>
<li>如果是实例对象-true</li>
<li>如果是原型对象-false</li>
</ul>
</li>
</ul>
<h4 id="引用类型和值类型"><a href="#引用类型和值类型" class="headerlink" title="引用类型和值类型"></a>引用类型和值类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数值型</span></div><div class="line"><span class="keyword">var</span> str;<span class="comment">//这个时候不进行内存分配</span></div><div class="line"><span class="keyword">var</span> x=<span class="number">9</span>;<span class="comment">//分配内存</span></div><div class="line"><span class="keyword">var</span> y=x;<span class="comment">//不分配内存 y变量和x变量公用同一个地址</span></div><div class="line"><span class="built_in">console</span>.log(str);</div><div class="line"><span class="built_in">console</span>.log(x==y);<span class="comment">//比较的是指指针指向的内存空间中存储的值</span></div><div class="line"><span class="built_in">console</span>.log(x===y);<span class="comment">//比较的是地址和内存中存储的值</span></div><div class="line"><span class="comment">//字符串</span></div><div class="line"><span class="keyword">var</span> str1;<span class="comment">//这个时候不进行内存分配</span></div><div class="line"><span class="keyword">var</span> str2=<span class="string">"百事屋"</span>;<span class="comment">//分配内存</span></div><div class="line"><span class="keyword">var</span> str3=str2;</div><div class="line"><span class="built_in">console</span>.log(str2==str3);<span class="comment">//比较的是指针指向的内存空间中存储的量</span></div><div class="line"><span class="built_in">console</span>.log(str2===str3);<span class="comment">//比较的是地址和地址中存储的值</span></div><div class="line"><span class="comment">//数组</span></div><div class="line"><span class="keyword">var</span> arr1=[<span class="string">"你猜"</span>,<span class="string">"你再猜"</span>];<span class="comment">//分配内存</span></div><div class="line"><span class="comment">//引用类型其实指向同一个地址，也就是操作的其实是同一个位置。</span></div><div class="line"><span class="keyword">var</span> arr2=arr1;<span class="comment">//问题，这里arr2会会不会分配内存，答案不会</span></div><div class="line"><span class="built_in">console</span>.log(arr1[<span class="number">0</span>]);</div><div class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>]);<span class="comment">//一样</span></div><div class="line"></div><div class="line"><span class="comment">//修改数组</span></div><div class="line">arr[<span class="number">0</span>]=<span class="string">"三国 水壶 西游记"</span>;</div><div class="line"><span class="built_in">console</span>.log(arr1[<span class="number">0</span>]);</div><div class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>]);</div><div class="line"><span class="comment">//一样，说明这里不是分配内存，其实arr变量中存的是地址，指向arr1内存</span></div><div class="line"></div><div class="line"><span class="comment">//函数</span></div><div class="line"><span class="comment">//系统都会在内存中生成两个区域：一个存储变量，一个用来存储函数</span></div><div class="line"><span class="comment">//而变量中存放的知识函数空间所在的地址(指针)</span></div><div class="line"><span class="comment">//由于函数是对象，因此函数名实际上也是一个指向函数对象的指针，不会与某个函数绑定。</span></div><div class="line"><span class="comment">//由于函数名仅仅是指向函数的指针</span></div><div class="line"><span class="comment">//因此函数名与包含对象指针的其他变量没有什么不同</span></div><div class="line"><span class="comment">//换句话说，一个函数可能会有多个名字，例如：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//20</span></div><div class="line"><span class="keyword">var</span> anotherSum=sum;<span class="comment">//内能是如何分配的？这里不会在内存生成新的空间，存储函数。而是生成一个变量，变量中保存的是同一个地址</span></div><div class="line">sum=<span class="literal">null</span>;<span class="comment">//这里只是将sum变量中原来保存的是函数地址，然后赋值成null，这样做并不会影响到函数对象对象的内存空间</span></div><div class="line"><span class="built_in">console</span>.log(anotherSum(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//20</span></div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//20</span></div></pre></td></tr></table></figure>
<p><strong>由于函数是对象，因此函数名实际上也是一个指向函数对象的指针，不会与某个函数绑定。</strong>  </p>
<h3 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h3><h4 id="引用类型和值类型-1"><a href="#引用类型和值类型-1" class="headerlink" title="引用类型和值类型"></a>引用类型和值类型</h4><h5 id="值类型内存分配"><a href="#值类型内存分配" class="headerlink" title="值类型内存分配"></a>值类型内存分配</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">chainStore</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> store=<span class="string">"nihao"</span>;</div><div class="line">    <span class="keyword">var</span> store2=store1;</div><div class="line">    store1=<span class="string">"haoni"</span>;</div><div class="line">    alert(store2);<span class="comment">//nihao</span></div><div class="line">&#125;</div><div class="line">chainStore();</div><div class="line"><span class="comment">//把一个值类型(也可以叫基本类型)store2传递另一个变量(赋值)时，其实是分配了一块新的内存空间，因此改变store1的值对store2没有任何影响，因为它不像引用类型，变量的交换其实是交换了指向同一个内容的地址。</span></div></pre></td></tr></table></figure>
<h5 id="对象是引用类型"><a href="#对象是引用类型" class="headerlink" title="对象是引用类型"></a>对象是引用类型</h5><p>对象是引用类型，赋值只是生成一个内存保存地址而已。<br>var y=x；<br>如果变量x表示一个对象，则通过复制后，y生成一个变量，变量包含一个地址，地址指向对象x。所以从本质上而言，不会生成新的变量，x，y指向内存中的同一个位置，当你通过y改变对象的值，这种变化也会反映到x上。<br><strong>Y不完全拷贝X对象，而只是生成一个变量，变量中存储的是x的地址。所以X其实是Y是一回事</strong>  </p>
<h5 id="引用类型内存分配"><a href="#引用类型内存分配" class="headerlink" title="引用类型内存分配"></a>引用类型内存分配</h5><p>其实操作的就是地址，他们都指向同一片地址，所以修改任何一个变量都是修改自身。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">chainStore</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> store1=[<span class="string">"Nike China"</span>];</div><div class="line">    <span class="keyword">var</span> store2=store1;</div><div class="line">    store1[<span class="number">0</span>]=<span class="string">"Nike U.S.A"</span>;</div><div class="line">    alert(store2[<span class="number">2</span>]);<span class="comment">//Nike U.S.A</span></div><div class="line">&#125;</div><div class="line">chainStore();</div></pre></td></tr></table></figure></p>
<p>在上面的代码中，store2只进行一次赋值，理论上它的值已经确定，但后面通过改写store1的值，发现store2的值也发生了改变，这正是引用类型的特征，也是我们要注意的地方。  </p>
<h5 id="引用类型和值类型区别"><a href="#引用类型和值类型区别" class="headerlink" title="引用类型和值类型区别"></a>引用类型和值类型区别</h5><ul>
<li>内存分配机制不一样<ul>
<li>引用类型-创建一个变量——内存中保存的是变量真实入口的地址</li>
<li>值类型-创建一个变量，内存创建一个区域。</li>
<li>说白了就是==引用类型会分配两个区域：一个保存地址，一个保存内容==</li>
</ul>
</li>
<li>变量赋值是否的区别<ul>
<li>将一个值类型赋值给另一个变量，实际上就是创建一个区域</li>
<li>引用类型，只是创建一个区域，保存另一个变量的入口地址。 </li>
</ul>
</li>
</ul>
<p><strong>总结</strong>  </p>
<ul>
<li>值类型赋值，会重新分配内存</li>
<li>==引用类型赋值其实赋的是指针。==</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(x));    <span class="comment">// undefined 值类型</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="number">10</span>));   <span class="comment">// number 值类型</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(‘abc’)); <span class="comment">// string 值类型</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="literal">true</span>));  <span class="comment">// Boolean 值类型</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;));  <span class="comment">//函数 引用类型</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span>([<span class="number">1</span>, ‘a’, <span class="literal">true</span>]));  <span class="comment">//数组  引用类型</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span> (&#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;));  <span class="comment">//object 或者json  引用类型</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="literal">null</span>));  <span class="comment">//null  引用类型</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>)));  <span class="comment">//内置对象 引用类型</span></div><div class="line">Var na；</div><div class="line">        &#125;</div><div class="line">        show();</div><div class="line">其中上面的四种（<span class="literal">undefined</span>, number, string, boolean）属于值类型，不是对象。</div><div class="line">函数、数组、对象、<span class="literal">null</span>、<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>)都是对象。他们都是引用类型。</div></pre></td></tr></table></figure>
<h5 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h5><ol>
<li>undefined 值类型</li>
<li>number 值类型</li>
<li>string 值类型</li>
<li>Boolean 值类型</li>
</ol>
<p>保存在栈内存中的简单数据段，栈是在内存中划分的固定内存。</p>
<h5 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h5><p>函数，数组，json类型，null，数值对象。<br>目的将数值型转换成引用类型new Number(10);</p>
<h4 id="堆内存空间和栈内存空间"><a href="#堆内存空间和栈内存空间" class="headerlink" title="堆内存空间和栈内存空间"></a>堆内存空间和栈内存空间</h4><p><strong>值类型都是存放在栈内存空间的</strong><br><strong>引用类型都是存放在堆内存空间的</strong>  </p>
<ul>
<li>栈：存放变量，变量中保存的只是对象所在的地址。</li>
<li>堆：保存对象真正的数据。</li>
</ul>
<h4 id="内存使用生命周期"><a href="#内存使用生命周期" class="headerlink" title="内存使用生命周期"></a>内存使用生命周期</h4><p>js环境中分配的内存一般有如下生命周期：  </p>
<ul>
<li>内存分配：当我们申明变量、函数、对象的时候，系统会自动为他们分配内存。</li>
<li>内存使用 var name=null;即读写内存，也就是使用变量，函数等。</li>
<li>内存回收：使用完毕，由垃圾回收自动回收不再使用的内存。</li>
</ul>
<h5 id="两个概念"><a href="#两个概念" class="headerlink" title="两个概念"></a>两个概念</h5><p>一切数据通过变量来管理。<br>定义变量的过程其实就是内存分配的过程，所以本质上一切数据都是存放在内存中的。  </p>
<h5 id="一切数据都是通过变量来存储的"><a href="#一切数据都是通过变量来存储的" class="headerlink" title="一切数据都是通过变量来存储的"></a>一切数据都是通过变量来存储的</h5><p>数据通过变量来管理，不管是字符串，数字，还是复杂的对象，都是存放在变量中的。有些时候系统会自动生成变量存储，即使我们看不到。总之一切数据都是通过变量存储的。</p>
<h5 id="内存生命使用周期-定义变量的过程就是内存分配的过程"><a href="#内存生命使用周期-定义变量的过程就是内存分配的过程" class="headerlink" title="内存生命使用周期-定义变量的过程就是内存分配的过程"></a>内存生命使用周期-定义变量的过程就是内存分配的过程</h5><p>内存分配就是使用内存。<br>内存空间是有限的，4g内存，8g内存，使用完就要回收。<br>好的程序都会处理这一点。整个c语言编程就是针对内存编程。这就是内存使用生命周期，也就是变量的生命周期。</p>
<h5 id="内存回收-自动释放篇"><a href="#内存回收-自动释放篇" class="headerlink" title="内存回收-自动释放篇"></a>内存回收-自动释放篇</h5><p>释放内存  </p>
<ol>
<li>系统自动释放</li>
<li>释放定义的数组占用的空间</li>
<li>释放对象的每个属性，方法占用的内存</li>
<li>释放对象本身占用的内存。</li>
</ol>
<ul>
<li>浏览器自动释放内存：IE在最小化和关闭时释放。  </li>
<li>值类型内存自动释放：当函数执行的时候，会将参数，函数中定义的值的类型变量都保存在堆栈中。当函数执行结束，会自动释放和这个函数有关的存放在堆栈中的值类型变量。==闭包除外==  </li>
<li>引用类型内存释放：引用类型通过引用计算器管理，实例化+1销毁(比如函数执行结束-1)，直到这个类的引用计数为0则系统自动释放内存。</li>
</ul>
<h5 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h5><ul>
<li>定义：内存泄漏是指一块被分配的内存既不能使用，又不能回收，这样泄漏越多，最终导致占用内存越来越多，最终使得应用崩溃，甚至导致浏览器崩溃，最恶毒的就是导致系统也崩溃。  </li>
<li>在C++中，因为是手动管理内存，内存泄漏是经常出现的事情。而现在流行的c#和java等语言采用了自动垃圾回收方法管理内存，正常使用的情况下几乎不会发生内存泄漏。浏览器中也是采用自动垃圾回收方法管理内存，但由于浏览器垃圾回收方法有bug，会产生内存泄漏。  </li>
<li>为什么c语言易学难用：c语言编程在实际中都是自己负责内存的分配，回收等。而高级语言都是系统帮我们管理内存。</li>
</ul>
<ul>
<li>如何解决内存泄漏：<ul>
<li>高级语言的指针和内存管理<ul>
<li>C语言，C++语言，JAVA语言，C#语言</li>
<li>其他语言=也有指针这个概念</li>
</ul>
</li>
<li>为什么C/C++语言相对Java等高级语言较为难学：因为需要程序员自己处理内存分配，内存泄漏，内存安全等问题。</li>
<li>Java，C#，swift语言自动内存回收机制：引用计数器的原理，函数的回收原理。</li>
</ul>
</li>
</ul>
<h4 id="其他方式创建对象"><a href="#其他方式创建对象" class="headerlink" title="其他方式创建对象"></a>其他方式创建对象</h4><p>总结创建对象的几种方式：  </p>
<ul>
<li>字面量</li>
<li>Object<ul>
<li>获取对象的值：通过.或者[]操作符 </li>
<li>缺点：重复太多</li>
</ul>
</li>
<li>内置对象</li>
<li>构造函数<ul>
<li>方法是所有实例都一样的，每次实例都重新分配内存，造成内存浪费。 </li>
</ul>
</li>
<li>原型对象<ul>
<li>有些属性，比如name并非是所有实例共享的</li>
<li>比如每个手机名称是不一样的</li>
<li>如果是值类型能正常显示</li>
<li>但是如果是引用类型就会出错</li>
<li>解决方式<ul>
<li>使用构造函数+原型对象方式</li>
<li>也就是混合模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//混合模式</span></div><div class="line"><span class="keyword">var</span> Role=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=&#123;<span class="attr">nickName</span>:<span class="string">"Jack"</span>,<span class="attr">accountName</span>:<span class="string">"12345@qq.com"</span>&#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">//姓名</span></div><div class="line"><span class="comment">//生命值</span></div><div class="line">Role.prototype.HP=<span class="number">100</span>;</div><div class="line"><span class="comment">//魔法值</span></div><div class="line">Role.prototype.MP=<span class="number">100</span>;</div><div class="line"><span class="comment">//技能</span></div><div class="line">Role.prototype.technologys=[<span class="string">"普攻"</span>,<span class="string">"变成白痴"</span>,<span class="string">"变成Sb"</span>,<span class="string">"变成猪头"</span>];</div><div class="line"><span class="comment">//跑起来</span></div><div class="line">Role.prototype.run=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"run"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>拷贝<ul>
<li>原理：遍历A对象的每个属性，以此赋值给另一个空对象。</li>
<li>使用场景：<ul>
<li>默认值场景(默认值和自定义值，模版)</li>
<li>拓展功能(框架)</li>
</ul>
</li>
</ul>
</li>
<li>工厂<ul>
<li>本质<ul>
<li>其实就是封装性</li>
<li>其实就是隐藏细节</li>
<li>让我们可以拿来即用</li>
<li>就像现实的工厂一样，生产出手机，我们可以直接使用</li>
</ul>
</li>
</ul>
</li>
<li>第三方<ul>
<li>基本方法</li>
<li>使用第三方框架改造案例</li>
</ul>
</li>
</ul>
<p>面向对象的一切思维都是来源于生活  </p>
<ul>
<li>生活场景<ul>
<li>工厂模式也不例外</li>
<li>工厂模式就是将物品生产交给工厂来做</li>
<li>同样的，我们可以实例看做一个具体的产品。产品创建的工作交给工厂，我们直接做事</li>
</ul>
</li>
<li>与构造函数创建区别<ul>
<li>没有显式的创建对象——不需要new</li>
<li>没有return语句</li>
</ul>
</li>
<li>传参的方式实现数据修改：<ul>
<li>适用于不用修改任何对象内部的任何值的情况</li>
<li>虽然避免了重复，但是使用范围较窄。</li>
</ul>
</li>
</ul>
<h4 id="各种术语总结"><a href="#各种术语总结" class="headerlink" title="各种术语总结"></a>各种术语总结</h4><ul>
<li>双对象法则：构造函数对象，原型对象</li>
<li>构造函数</li>
<li>原型对象</li>
<li>构造对象属性和方法</li>
<li>原型属性和方法</li>
<li>OOP</li>
<li>OO</li>
<li>高阶：继承 多态 接口 抽象 重载 覆写<ul>
<li>继承：一般构造函数对象中防止属性，原型对象中放置所有实例共享的方法<ul>
<li>构造函数黄建的实例能访问原型对象的方法属性是因为继承</li>
<li>两个对象的本质关系：原型对象继承了构造函数对象，因而可以访问构造函数对象的一切方法，属性。</li>
</ul>
</li>
<li>重载——overload<ul>
<li>function Add(a,b){};</li>
<li>function Add(a,b,c){};</li>
<li>function Add(a,b,c,d){};</li>
<li>function Add(a,b,c,d,e){};</li>
</ul>
</li>
<li>覆写：重写——override<ul>
<li>重写表示重写父对象的同名方法或者属性</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="comment">//    重写 重载 - override</span></div><div class="line"><span class="comment">//重写表示重写父对象的同名方法或者属性</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">    <span class="keyword">this</span>.test=<span class="string">'构造函数定义的属性'</span></div><div class="line">    <span class="keyword">this</span>.add=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'构造函数对象中定义的方法'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    test:<span class="string">'原型中定义的属性'</span>,</div><div class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;,</div><div class="line">    getSex: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sex;</div><div class="line">    &#125;,</div><div class="line">    add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'原型对象中定义的方法'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> shukui=<span class="keyword">new</span> Person(<span class="string">'wangshukui'</span>,<span class="string">'nan'</span>)</div><div class="line">shukui.add();<span class="comment">//构造函数对象继承原型对象 方法被重写</span></div><div class="line">alert(shukui.test); <span class="comment">//构造函数对象继承原型对象 属性被重写</span></div><div class="line">Person.prototype.add();</div><div class="line">Person.add();<span class="comment">//报错</span></div><div class="line">person.prototype.add(); <span class="comment">//报错</span></div><div class="line"><span class="comment">//    高级语言的中的覆写 - 重写 - override</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//    //声明一个超类的</span></div><div class="line"><span class="comment">//    public class Parent&#123;</span></div><div class="line"><span class="comment">//        public void kick()&#123;</span></div><div class="line"><span class="comment">//            System.out.println(“kick football beeline.”);</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    //声明一个子类</span></div><div class="line"><span class="comment">//    public class Child extends Parent&#123;</span></div><div class="line"><span class="comment">//        public void kick()&#123;</span></div><div class="line"><span class="comment">//            System.out.println(“kick football arc.”);</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    //执行代码</span></div><div class="line"><span class="comment">//    public class test&#123;</span></div><div class="line"><span class="comment">//        public static void mian(String[] args)&#123;</span></div><div class="line"><span class="comment">//        Child cld=new Child();</span></div><div class="line"><span class="comment">//        cld.kick();//print kick football arc.</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="面向对象定义"><a href="#面向对象定义" class="headerlink" title="面向对象定义"></a>面向对象定义</h4><p>面型过程就是使用函数包装好一个一个工具。<br>常用的三个过程：init，binddom，bindevents。<br><strong>面向对象编程原则：单一功能原则——一个函数尽量包含一个功能。</strong></p>
<h4 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h4><p>==原则：单一职责==  </p>
<h5 id="绑定进阶"><a href="#绑定进阶" class="headerlink" title="绑定进阶"></a>绑定进阶</h5><p>数据绑定：在开发中，数据一般是从后台开发人员从数据库读取出来，封装成一个json字符串返回给你，然后我们需要将前端写的假数据编程真数据，这个过程就是数据绑定。  </p>
<ul>
<li>数据绑定的几种形式<ul>
<li>简单绑定方法</li>
<li>动态创建标签绑定方式<ul>
<li>使用场景：状态不同，显示内同不一样。</li>
<li>比如登录有三个状态：未登录，登录失败，登录成功</li>
<li>每种状态显示的内容时不一样的，这个时候就需要动态创建标签。</li>
<li>使用技术：innerHTML append</li>
<li>备注：议案用于动态生成的代码量少的时候，如果需要动态生成很多代码，一般用模版技术。</li>
</ul>
</li>
<li>模版技术<ul>
<li>王者：art template(完美融合node.js)</li>
<li>doT.js</li>
<li>Juicer.js(支持node.js)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="art模版语法"><a href="#art模版语法" class="headerlink" title="art模版语法"></a>art模版语法</h3><p>编写模版，使用一个type=”text/html”的script便签存放模版<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script id=<span class="string">"test"</span> type=<span class="string">"text/html"</span>&gt;</div><div class="line"> &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;<span class="regexp">/h1&gt; </span></div><div class="line"><span class="regexp">&lt;ul&gt; </span></div><div class="line"><span class="regexp">&#123;&#123;each list as value i&#125;&#125; </span></div><div class="line"><span class="regexp">&lt;li&gt;索引 &#123;&#123;i + 1&#125;&#125; ：&#123;&#123;value&#125;&#125;&lt;/</span>li&gt; </div><div class="line">&#123;&#123;/each&#125;&#125; </div><div class="line">&lt;<span class="regexp">/ul&gt; </span></div><div class="line"><span class="regexp">&lt;/</span>script&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li>数据模版绑定<br>Test是模版名称，Data是数据名称  </li>
<li><p>两种绑定语法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123; </div><div class="line">title: <span class="string">'标签'</span>, </div><div class="line">list: [<span class="string">'文艺'</span>, <span class="string">'博客'</span>, <span class="string">'摄影'</span>, <span class="string">'电影'</span>, <span class="string">'民谣'</span>, <span class="string">'旅行'</span>, <span class="string">'吉他'</span>] </div><div class="line">&#125;; </div><div class="line"></div><div class="line"><span class="keyword">var</span> html = template(<span class="string">'test'</span>, data); <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = html;</div></pre></td></tr></table></figure>
</li>
<li><p>条件表达式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;<span class="keyword">if</span> admin&#125;&#125; </div><div class="line">&lt;p&gt;admin&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp"> &#123;&#123;else if code &gt; 0&#125;&#125; </span></div><div class="line"><span class="regexp">	&lt;p&gt;master&lt;/</span>p&gt;</div><div class="line"> &#123;&#123;<span class="keyword">else</span>&#125;&#125; </div><div class="line">      &lt;p&gt;error!<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"> &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>遍历表达式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//无论数组或者对象都可以用each进行遍历</span></div><div class="line">&#123;&#123;each list <span class="keyword">as</span> value index&#125;&#125; </div><div class="line">&lt;li&gt;</div><div class="line">	&#123;&#123;index&#125;&#125; - &#123;&#123;value.user&#125;&#125;</div><div class="line">&lt;<span class="regexp">/li&gt; </span></div><div class="line"><span class="regexp">&#123;&#123;/</span>each&#125;&#125; </div><div class="line">亦可以被简写：</div><div class="line">&#123;&#123;each list&#125;&#125; </div><div class="line">&lt;li&gt;</div><div class="line">	&#123;&#123;$index&#125;&#125; - &#123;&#123;$value.user&#125;&#125;</div><div class="line">&lt;<span class="regexp">/li&gt; </span></div><div class="line"><span class="regexp">&#123;&#123;/</span>each&#125;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>子模版<ul>
<li>模版包含表达式，用于嵌套子模版<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;include <span class="string">'template_name'</span>&#125;&#125; </div><div class="line">子模板默认共享当前数据，亦可以指定数据：</div><div class="line">&#123;&#123;include <span class="string">'template_name'</span> news_list&#125;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>子模版好处：模块化组装页面，将复杂页面分成几个模块，携程模版，之后通过一个容器模版组装整个网页。这代表一种未来新兴开发技术。基于node.js+arttemplate技术，已经实现动态加载模版技术。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前端开发&quot;&gt;&lt;a href=&quot;#前端开发&quot; class=&quot;headerlink&quot; title=&quot;前端开发&quot;&gt;&lt;/a&gt;前端开发&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;编写通用框架-可以使用jQuery。&lt;/li&gt;
&lt;li&gt;编写通用UI组件——可以选择使用jQuery UI插件。
    
    </summary>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶版本1.0</title>
    <link href="http://yoursite.com/2016/05/12/9.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%E7%89%88%E6%9C%AC1.0/"/>
    <id>http://yoursite.com/2016/05/12/9.面向对象进阶版本1.0/</id>
    <published>2016-05-12T07:21:36.000Z</published>
    <updated>2017-11-03T09:08:27.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="构造函数和属性"><a href="#构造函数和属性" class="headerlink" title="构造函数和属性"></a>构造函数和属性</h3><h4 id="01-基础"><a href="#01-基础" class="headerlink" title="01. 基础"></a>01. 基础</h4><ul>
<li>只使用构造函数创建对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">//该函数 用于创建对象 其除了是一个函数之外，我们又称之为构造对象的函数 - 简称构造函数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name,description</span>)</span>&#123;</div><div class="line">    <span class="comment">//属性</span></div><div class="line">   <span class="keyword">this</span>.name=name;</div><div class="line">    <span class="comment">// 属性</span></div><div class="line">    <span class="keyword">this</span>.description = description</div><div class="line">    <span class="comment">//方法 又称方法属性 万物皆属性</span></div><div class="line">    <span class="keyword">this</span>.buy=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'buy'</span>)</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">    <span class="comment">//会拷贝一份</span></div><div class="line">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Product()</div><div class="line">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Product()</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(p1.constructor)</div><div class="line">    <span class="built_in">console</span>.log(p2.constructor)</div><div class="line"></div><div class="line">    <span class="comment">/*如何判断某个实例是否是根据某个构造函数创建的*/</span></div><div class="line">    <span class="keyword">if</span>(p1 <span class="keyword">instanceof</span> Product)&#123;</div><div class="line">        alert(<span class="string">'true'</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/*存在的问题*/</span></div><div class="line">    <span class="comment">//每个实例的name，描述确实不一样，需要单独的空间存储，但是buy方法是所有实例都一样的</span></div><div class="line"></div><div class="line">    <span class="comment">/*为了避免内存浪费，所以出现了原型帮助我们解决这个问题*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*原型对象 不管你实例化多少次，都只生成一次*/</span></div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p><strong>四种创建方式</strong></p>
<ol>
<li>传参形式</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">&#125;</div><div class="line">Product.prototype=&#123;&#125;；</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> iphone = <span class="keyword">new</span> Product(<span class="string">'iphone8s'</span>)；</div></pre></td></tr></table></figure>
<ol>
<li>默认值</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">''</span></div><div class="line">    <span class="keyword">this</span>.price=<span class="number">0</span></div><div class="line">&#125;</div><div class="line">Product.prototype=&#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> iphone = <span class="keyword">new</span> Product()</div><div class="line"><span class="comment">/*动态添加形式*/</span></div><div class="line">iphone.description=<span class="string">'XXXXXXXXXX'</span></div><div class="line">iphone.images=[]</div></pre></td></tr></table></figure>
<ol>
<li>混合模式</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name,price</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">    <span class="keyword">this</span>.price=price</div><div class="line">    <span class="keyword">this</span>.version=<span class="number">1.0</span></div><div class="line">    <span class="keyword">this</span>.add=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;</div><div class="line">Product.prototype=&#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> iphone = <span class="keyword">new</span> Product()</div></pre></td></tr></table></figure>
<ol>
<li>动态添加形式</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">iphone.description=<span class="string">'XXXXXXXXXX'</span></div><div class="line">    iphone.images=[]</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(iphone <span class="keyword">instanceof</span> Product)<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h4 id="属性进阶"><a href="#属性进阶" class="headerlink" title="属性进阶"></a>属性进阶</h4><p><strong>万物皆属性</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name=<span class="string">''</span></div><div class="line">        <span class="keyword">this</span>.add=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Product.prototype=&#123;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><strong>万物皆变量</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str =<span class="string">''</span></div><div class="line"><span class="keyword">var</span> num=<span class="number">1</span></div><div class="line"><span class="keyword">var</span> bool=<span class="literal">true</span></div><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line"><span class="built_in">console</span>.log(fn())</div><div class="line"><span class="built_in">console</span>.log(fn2())<span class="comment">//无法访问到</span></div><div class="line"></div><div class="line"><span class="comment">//函数声明，变量fn以及其实现被提升到顶部</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'函数'</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">//函数表达式,仅变量fn2被提升到顶部，实现没有被提升</span></div><div class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'函数变量形式'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*万物皆变量*/</span></div><div class="line"><span class="keyword">var</span> Product = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=<span class="string">'iphone'</span></div><div class="line">    <span class="keyword">this</span>.add=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Product.prototype=&#123;</div><div class="line">    buy:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> iphone =  <span class="keyword">new</span> Product();</div><div class="line"><span class="built_in">console</span>.log(iphone.name)</div></pre></td></tr></table></figure></p>
<h4 id="产品对象"><a href="#产品对象" class="headerlink" title="产品对象"></a>产品对象</h4><ul>
<li>对象内使用对象的属性和方法：this</li>
<li>对象的使用方法：先实例化，后用点语法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*类 -- 抽象对象*/</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name,price</span>) </span>&#123;</div><div class="line">        <span class="comment">/*属性 行为 可以为空或者给默认值*/</span></div><div class="line">        <span class="keyword">this</span>.name=name</div><div class="line">        <span class="keyword">this</span>.price=<span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.description = <span class="string">''</span>;</div><div class="line">        <span class="keyword">this</span>.zhekou = <span class="string">''</span></div><div class="line">        <span class="keyword">this</span>.sales = <span class="string">''</span></div><div class="line">        <span class="comment">/*我们的需求：自动计算打折后的价格*/</span></div><div class="line">        <span class="comment">/*形象的理解：包装*/</span></div><div class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">"price"</span>, &#123;</div><div class="line">            get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="keyword">return</span> price*<span class="number">0.9</span>;&#125;,</div><div class="line">            set: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">                <span class="comment">/*大概普通产品的价格都在0--1万*/</span></div><div class="line">                <span class="keyword">if</span>(value&gt;<span class="number">10000</span>)</div><div class="line">                &#123;</div><div class="line">                    alert(<span class="string">'产品价格必须在0--1万之间'</span>);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    price = value;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>定义对象的两种方式</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种方法</span></div><div class="line"><span class="comment">//定义对象的两种方式</span></div><div class="line">    Product.prototype=&#123;</div><div class="line">        getPrice:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.price</div><div class="line">        &#125;,</div><div class="line">        addToCart:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            alert(<span class="string">'将物品添加到购物车'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//第二种方法</span></div><div class="line">    Product.prototype.buy=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    Product.prototype.addToCart=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>堆积木开发，代码可读性极高。<br>使用方法：对象的使用必须先实例化，对象定义好之后，都是抽象的，必须实例化成具体。<br>==给对象赋值，也可以新增属性==<br>例如：iphone.name=”iphone7”;<br><strong>绑定元素：通过点语法访问对象中的属性或者方法</strong><br>例如： name.innerHTML=iphone.name;<br><strong>绑定事件</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    iphone.addToCart();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>添加一个属性包装器</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加一个属性包装器</span></div><div class="line">   <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">"produceDate"</span>, &#123;</div><div class="line">       get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> produceDate.toLocaleDateString();</div><div class="line">           <span class="comment">/*return produceDate.toLocaleString();*/</span></div><div class="line">       &#125;,</div><div class="line">       set: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">           produceDate = value;</div><div class="line">       &#125;</div><div class="line">   &#125;);</div></pre></td></tr></table></figure></p>
<h4 id="共有属性私有属性"><a href="#共有属性私有属性" class="headerlink" title="共有属性私有属性"></a>共有属性私有属性</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>对象构造函数<br>私有属性好处：安全，就类似于闭包中的函数一样，减少污染。<br><strong>私有属性，只能在对象构造函数内部使用</strong><br><strong>公有属性，在对象实例化后调用</strong><br>共有属性的定义：使用对象的人可以访问到对象内部的某个属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对象构造函数</span></div><div class="line">    <span class="comment">// 私有属性好处： 安全 就类似闭包中的函数一样 减少污染</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="comment">//私有属性，只能在对象构造函数内部使用</span></div><div class="line">        <span class="keyword">var</span> className = <span class="string">"用户对象"</span>;</div><div class="line">        <span class="comment">//公有属性,在对象实例化后调用</span></div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="comment">//私有方法</span></div><div class="line">        <span class="keyword">var</span> privateFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="keyword">this</span>.name);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//公有方法</span></div><div class="line">        <span class="keyword">this</span>.publicFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="keyword">this</span>.name); <span class="comment">//公有属性</span></div><div class="line">            alert(className); <span class="comment">//正确 直接通过变量名访问</span></div><div class="line">            alert(<span class="keyword">this</span>.className); <span class="comment">//undefined 错误 不能这样访问</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//公有属性</span></div><div class="line">        alert(className);</div><div class="line">        <span class="comment">//正确 直接通过变量名访问</span></div><div class="line">        alert(<span class="keyword">this</span>.className); <span class="comment">//undefined 错误 不能这样访问</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*什么是公有属性：*/</span></div><div class="line">    <span class="comment">/*使用象的人可以访问到对象内部的某个属性*/</span></div><div class="line">    <span class="keyword">var</span> penson = <span class="keyword">new</span> Person(<span class="string">'xiaowang'</span>)</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(penson.className);</div><div class="line">    <span class="built_in">console</span>.log(penson.name)</div><div class="line">    <span class="built_in">console</span>.log(person.publicFunction())</div><div class="line">    <span class="built_in">console</span>.log(person.privateFunction())</div><div class="line"></div><div class="line">    <span class="comment">/*最小原则：*/</span></div><div class="line">    $(<span class="string">'#tab'</span>).tab()</div></pre></td></tr></table></figure></p>
<h5 id="init函数的引入"><a href="#init函数的引入" class="headerlink" title="init函数的引入"></a>init函数的引入</h5><p>初始化函数的引入：我们将开发某个功能的初始化的工作都放在一个函数里面，用户只需要知道这是一个工具就可以了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.bindDOM();</div><div class="line">    <span class="keyword">this</span>.bindEvents();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="私有成员的引入"><a href="#私有成员的引入" class="headerlink" title="私有成员的引入"></a>私有成员的引入</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*无法使用私有成员*/</span></div><div class="line"><span class="comment">//  iphone.bindDOM()</span></div><div class="line"><span class="comment">//  iphone.bindEvents()</span></div><div class="line"><span class="comment">/*只能使用共有成员*/</span></div><div class="line">    iphone.init()</div></pre></td></tr></table></figure>
<h5 id="config"><a href="#config" class="headerlink" title="config"></a>config</h5><p>定义一个变量：这个变量可以被对象中所有的属性访问到。目的是避免重复，减少内存，便于统一管理。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.config = &#123;</div><div class="line">    btnConfirm: <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>),</div><div class="line">    btnBuy: <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>),</div><div class="line">    btnAddCart: <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>),</div><div class="line">    domProductName :  <span class="built_in">document</span>.getElementById(<span class="string">'pname'</span>),</div><div class="line">    domProductPrice :  <span class="built_in">document</span>.getElementById(<span class="string">'pprice'</span>),</div><div class="line">    sum :  <span class="number">1000</span>,</div><div class="line">    des :  <span class="built_in">document</span>.getElementById(<span class="string">'pdes'</span>),</div><div class="line">    youhuijia :  <span class="built_in">document</span>.getElementById(<span class="string">'pyouhui'</span>),</div><div class="line">    zhekou :  <span class="built_in">document</span>.getElementById(<span class="string">'pzhekou'</span>),</div><div class="line">    sales :  <span class="built_in">document</span>.getElementById(<span class="string">'psales'</span>),</div><div class="line">    date :  <span class="built_in">document</span>.getElementById(<span class="string">'date'</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h5 id="命名规范化"><a href="#命名规范化" class="headerlink" title="命名规范化"></a>命名规范化</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"itemInfo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">'pname'</span>&gt;</span>乐视TV（ Letv） S50 Air 全配版 50英寸2D智能LED液晶 超级电视<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pdes"</span>&gt;</span>各地区货源已陆续到库，我们将在十月十号左右发货，对于此次延迟发货给您带来的不便表示致歉，望您谅解。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> &gt;</span>已售：<span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">"psales"</span>&gt;</span>6000<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>原价：<span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">'pprice'</span>&gt;</span>6000<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>元<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>优惠价：<span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">'pyouhui'</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>元<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>折扣：<span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">'pzhekou'</span>&gt;</span>6.0<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>折<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>生产日期：<span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">'date'</span>&gt;</span>2015-09-09<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'btn'</span>&gt;</span>加入购物车<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">dateFormat</span>(<span class="params">date,format</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> o = &#123;</span></div><div class="line"><span class="javascript">            <span class="string">"M+"</span> : date.getMonth()+<span class="number">1</span>, <span class="comment">//month</span></span></div><div class="line"><span class="javascript">            <span class="string">"d+"</span> : date.getDate(),    <span class="comment">//day</span></span></div><div class="line"><span class="javascript">            <span class="string">"h+"</span> : date.getHours(),   <span class="comment">//hour</span></span></div><div class="line"><span class="javascript">            <span class="string">"m+"</span> : date.getMinutes(), <span class="comment">//minute</span></span></div><div class="line"><span class="javascript">            <span class="string">"s+"</span> : date.getSeconds(), <span class="comment">//second</span></span></div><div class="line"><span class="javascript">            <span class="string">"q+"</span> : <span class="built_in">Math</span>.floor((date.getMonth()+<span class="number">3</span>)/<span class="number">3</span>),  <span class="comment">//quarter</span></span></div><div class="line"><span class="javascript">            <span class="string">"S"</span> : date.getMilliseconds() <span class="comment">//millisecond</span></span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="regexp">/(y+)/</span>.test(format)) format=format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>,</span></div><div class="line"><span class="javascript">                (date.getFullYear()+<span class="string">""</span>).substr(<span class="number">4</span>- <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span></div><div class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> o)<span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span>+ k +<span class="string">")"</span>).test(format))</span></div><div class="line"><span class="javascript">            format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>,</span></div><div class="line"><span class="javascript">                    <span class="built_in">RegExp</span>.$<span class="number">1.</span>length==<span class="number">1</span>? o[k] :</span></div><div class="line"><span class="javascript">                            (<span class="string">"00"</span>+ o[k]).substr((<span class="string">""</span>+ o[k]).length));</span></div><div class="line"><span class="javascript">        <span class="keyword">return</span> format;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">//产品对象</span></span></div><div class="line"><span class="javascript">    <span class="comment">/*对象内如何使用对象的属性和方法：this，对象外如何使用：先实例化，后用点语法*/</span></span></div><div class="line"><span class="javascript">    <span class="comment">/*类 -- 抽象对象*/</span></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name,price</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="comment">/*属性 行为 可以为空或者给默认值*/</span></span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.name=name</span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.price=<span class="number">1000</span>;</span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.description = <span class="string">''</span>;</span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.zhekou = <span class="string">''</span></span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.sales = <span class="string">''</span></span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.produceDate</span></div><div class="line"><span class="javascript">        <span class="comment">/*我们的需求：自动计算打折后的价格*/</span></span></div><div class="line"><span class="javascript">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">"price"</span>, &#123;</span></div><div class="line"><span class="undefined">            value:5000000,</span></div><div class="line"><span class="javascript">            writable: <span class="literal">false</span>,</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="javascript">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">"produceDate"</span>, &#123;</span></div><div class="line"><span class="javascript">            get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">return</span> dateFormat(produceDate,<span class="string">'yyyy年MM月dd日'</span>);</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="javascript">            set: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span></div><div class="line"><span class="undefined">                produceDate = value;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.config = &#123;</span></div><div class="line"><span class="javascript">            btn: <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>),</span></div><div class="line"><span class="javascript">            name :  <span class="built_in">document</span>.getElementById(<span class="string">'pname'</span>),</span></div><div class="line"><span class="javascript">            price :  <span class="built_in">document</span>.getElementById(<span class="string">'pprice'</span>),</span></div><div class="line"><span class="javascript">            sum :  <span class="built_in">document</span>.getElementById(<span class="string">'sum'</span>),</span></div><div class="line"><span class="javascript">            des :  <span class="built_in">document</span>.getElementById(<span class="string">'pdes'</span>),</span></div><div class="line"><span class="javascript">            youhuijia :  <span class="built_in">document</span>.getElementById(<span class="string">'pyouhui'</span>),</span></div><div class="line"><span class="javascript">            zhekou :  <span class="built_in">document</span>.getElementById(<span class="string">'pzhekou'</span>),</span></div><div class="line"><span class="javascript">            sales :  <span class="built_in">document</span>.getElementById(<span class="string">'psales'</span>),</span></div><div class="line"><span class="javascript">            date :  <span class="built_in">document</span>.getElementById(<span class="string">'date'</span>)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">bindDOM</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="comment">/*绑定元素*/</span></span></div><div class="line"><span class="javascript">            <span class="comment">/*通过点语法访问对象中的属性或者方法*/</span></span></div><div class="line"><span class="undefined">            that.config.name.innerHTML=that.name</span></div><div class="line"><span class="undefined">            that.config.price.innerHTML=that.price</span></div><div class="line"><span class="undefined">            that.config.des.innerHTML=that.description</span></div><div class="line"><span class="undefined">            that.config.youhuijia.innerHTML=that.youhuijia</span></div><div class="line"><span class="undefined">            that.config.zhekou.innerHTML=that.zhekou</span></div><div class="line"><span class="undefined">            that.config.sales.innerHTML=that.sales</span></div><div class="line"><span class="undefined">            that.config.date.innerHTML=that.produceDate</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">bindEvents</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="comment">/*绑定事件*/</span></span></div><div class="line"><span class="javascript">            that.config.btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">                that.addToCart()</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">            bindDOM()</span></div><div class="line"><span class="undefined">            bindEvents()</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">//定义对象的两种方式</span></span></div><div class="line"><span class="undefined">    Product.prototype=&#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        getPrice:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">this</span>.price</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        addToCart:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">            alert(<span class="string">'将物品添加到购物车'</span>)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    Product.prototype.buy=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    Product.prototype.addToCart=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">    </span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">/*搭积木开发 -- 代码可读性极高*/</span></span></div><div class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="comment">/*实例化 -- 实例 -- 具体*/</span></span></div><div class="line"><span class="javascript">        <span class="comment">//如何使用</span></span></div><div class="line"><span class="javascript">        <span class="comment">//对象的使用必须先实例化，对象定义好之后，都是抽象的，必须实例化成具体</span></span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> iphone = <span class="keyword">new</span> Product()</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="comment">/*给对象的赋值赋值，也可以新增属性*/</span></span></div><div class="line"><span class="javascript">        iphone.name=<span class="string">'iphone7'</span></span></div><div class="line"><span class="undefined">        iphone.price=6000</span></div><div class="line"><span class="javascript">        iphone.description=<span class="string">'手机中的战斗机'</span></span></div><div class="line"><span class="undefined">        iphone.youhuijia=3000</span></div><div class="line"><span class="undefined">        iphone.zhekou=3.0</span></div><div class="line"><span class="undefined">        iphone.sales=40000</span></div><div class="line"><span class="javascript">        iphone.produceDate=<span class="keyword">new</span> <span class="built_in">Date</span>()</span></div><div class="line"><span class="javascript">        <span class="comment">/*无法使用私有成员*/</span></span></div><div class="line"><span class="javascript"><span class="comment">//        iphone.bindDOM()</span></span></div><div class="line"><span class="javascript"><span class="comment">//        iphone.bindEvents()</span></span></div><div class="line"><span class="javascript">        <span class="comment">/*只能使用共有成员*/</span></span></div><div class="line"><span class="undefined">        iphone.init()</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="对象实例化的本质"><a href="#对象实例化的本质" class="headerlink" title="对象实例化的本质"></a>对象实例化的本质</h4><h5 id="数据类型判断"><a href="#数据类型判断" class="headerlink" title="数据类型判断"></a>数据类型判断</h5><ul>
<li>数据类型判断typeof，但是使用typeof运算符时采用引用类型存储值会出现一个问题：无论引用的是什么类型的对象，它都返回”object”。  </li>
<li>数据类型判断：toString.call。通用但是很繁琐的方法:peototype。</li>
<li>数据类型判断：instanceof。判断已知对象类型的方法。注意Instanceof后面一定要是对象类型，并且大小写不能写错，该方法适合一些条件选择或分支。</li>
<li>数据类型判断: 根据对象的constructor判断。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  根据对象的constructor判断： constructor</span></div><div class="line">    <span class="keyword">var</span> arr=[];</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'数据类型判断 - constructor'</span>)</div><div class="line">    <span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Array</span>)   <span class="comment">//----------&gt; true</span></div><div class="line">    <span class="built_in">console</span>.log(date.constructor === <span class="built_in">Date</span>)   <span class="comment">//-----------&gt; true</span></div><div class="line">    <span class="built_in">console</span>.log(fn.constructor === <span class="built_in">Function</span>) <span class="comment">//-------&gt; true</span></div></pre></td></tr></table></figure>
<p><strong>JavaScript中isFinite()函数，isFinite()函数用于检查其参数是否是无穷大。</strong>  </p>
<ul>
<li>如果number是有限数字(或可转换为有效数字)，那么返回值为true。</li>
<li>否则，如果number是NaN(非数字),或者是正、负无穷大的数，则返回false。<h3 id="原型对象（improtant）"><a href="#原型对象（improtant）" class="headerlink" title="原型对象（improtant）"></a>原型对象（improtant）</h3><h4 id="属性屏蔽理论"><a href="#属性屏蔽理论" class="headerlink" title="属性屏蔽理论"></a>属性屏蔽理论</h4></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">//该函数 用于创建对象 其除了是一个函数之外，我们又称之为构造对象的函数 - 简称构造函数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//属性</span></div><div class="line">        <span class="keyword">this</span>.name=<span class="string">'神仙'</span>;</div><div class="line">        <span class="comment">// 属性</span></div><div class="line">        <span class="keyword">this</span>.description = <span class="string">''</span></div><div class="line">        <span class="keyword">this</span>.buy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            alert(<span class="string">'构造函数对象'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">        Product.prototype=&#123;</div><div class="line">            name:<span class="string">'王书奎'</span>,</div><div class="line">            buy:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                alert(<span class="string">'原型对象'</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> product = <span class="keyword">new</span> Product()</div><div class="line">        <span class="comment">/*原型属性屏蔽理论 -- 乌云蔽日*/</span></div><div class="line">        <span class="built_in">console</span>.log(product.buy())</div><div class="line"></div><div class="line">        <span class="comment">/*清除乌云*/</span></div><div class="line">        <span class="keyword">delete</span> product.buy</div><div class="line">        <span class="built_in">console</span>.log(product.buy())</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">/*被屏蔽之后如何获取 */</span></div><div class="line"><span class="comment">//        console.log(Product.prototype.buy())</span></div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p><strong>hsaOwnProperty:看是不是对象自身下面的属性</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//hasOwnProperty : 看是不是对象自身下面的属性</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.name=<span class="string">'iphone'</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Product.prototype=&#123;</div><div class="line">            age:<span class="number">100</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> iphone = <span class="keyword">new</span> Product()</div><div class="line">        <span class="built_in">console</span>.log(iphone.hasOwnProperty(<span class="string">'name'</span>))</div><div class="line">        <span class="built_in">console</span>.log(iphone.hasOwnProperty(<span class="string">'age'</span>))</div></pre></td></tr></table></figure></p>
<p><strong>hasOwnProperty对象字面量</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//hasOwnProperty : 看是不是对象自身下面的属性</span></div><div class="line">        <span class="keyword">var</span> iphone = &#123;</div><div class="line">            name:<span class="string">'iphone'</span>,</div><div class="line">            age:<span class="number">100</span>,</div><div class="line">            address:&#123;<span class="attr">home</span>:<span class="string">'江苏'</span>,<span class="attr">current</span>:<span class="string">'北京昌平'</span>&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(iphone.hasOwnProperty(<span class="string">'name'</span>))<span class="comment">//true</span></div><div class="line">        <span class="built_in">console</span>.log(iphone.hasOwnProperty(<span class="string">'age'</span>))<span class="comment">//true</span></div><div class="line">        <span class="built_in">console</span>.log(iphone.hasOwnProperty(<span class="string">'address'</span>))<span class="comment">//true</span></div><div class="line">        <span class="built_in">console</span>.log(iphone.hasOwnProperty(<span class="string">'home'</span>))<span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<h5 id="constructor-查看对象的构造函数"><a href="#constructor-查看对象的构造函数" class="headerlink" title="constructor 查看对象的构造函数"></a>constructor 查看对象的构造函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> iphone=<span class="keyword">new</span> Product();</div><div class="line">alert(iphone.constructor);<span class="comment">//Product</span></div><div class="line"><span class="keyword">var</span> arr=[];</div><div class="line">alert(arr.constructor==<span class="built_in">Array</span>);<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h5 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name=<span class="string">'iphone8'</span></div><div class="line">        <span class="keyword">this</span>.description=<span class="string">'手机中的战斗机'</span></div><div class="line">        <span class="keyword">this</span>.price=<span class="number">7777</span></div><div class="line">        <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Product.prototype=&#123;</div><div class="line">        date:<span class="string">'2017-8-8'</span>,</div><div class="line">        buy:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> iphone = <span class="keyword">new</span> Product()</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> iphone) &#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>for in第二种<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name=<span class="string">'iphone8'</span></div><div class="line">        <span class="keyword">this</span>.description=<span class="string">'手机中的战斗机'</span></div><div class="line">        <span class="keyword">this</span>.price=<span class="number">7777</span></div><div class="line">        <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Product.prototype=&#123;</div><div class="line">        date:<span class="string">'2017-8-8'</span>,</div><div class="line">        buy:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> iphone = <span class="keyword">new</span> Product()</div><div class="line"><span class="comment">//    通过hasOwnProperty过滤掉原型中的属性</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> iphone) &#123;</div><div class="line">        <span class="keyword">if</span> (iphone.hasOwnProperty(i)) &#123;</div><div class="line">            <span class="built_in">console</span>.log(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>for in json<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> iphone = &#123;</div><div class="line">        name:<span class="string">'iphone'</span>,</div><div class="line">        age:<span class="number">100</span>,</div><div class="line">        address:&#123;<span class="attr">home</span>:<span class="string">'江苏'</span>,<span class="attr">current</span>:<span class="string">'北京昌平&#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">    for(var i in iphone) &#123;</span></div><div class="line"><span class="string">        if (iphone.hasOwnProperty(i)) &#123;</span></div><div class="line"><span class="string">            console.log(i);</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div></pre></td></tr></table></figure></p>
<h3 id="面向对象复习和各种术语总结"><a href="#面向对象复习和各种术语总结" class="headerlink" title="面向对象复习和各种术语总结"></a>面向对象复习和各种术语总结</h3><h4 id="构造函数和原型"><a href="#构造函数和原型" class="headerlink" title="构造函数和原型"></a>构造函数和原型</h4><p>原型对象里面的属性，简称原型属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Product.prototype.age = <span class="number">12</span>;</div><div class="line"><span class="comment">//    原型方法</span></div><div class="line">Product.prototype.add=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="comment">//实例化  抽象 具体 实例  ---  new Product ---类名</span></div><div class="line"><span class="comment">//使用的使用 需要先实例化：</span></div><div class="line"><span class="keyword">var</span>  product = <span class="keyword">new</span> Product(); <span class="comment">//实例对象 实例</span></div><div class="line"><span class="comment">//如何访问对象里面的方法属性 -- 点语法</span></div><div class="line"><span class="built_in">console</span>.log(product.name)</div><div class="line">product.add();</div></pre></td></tr></table></figure></p>
<p>构造函数的语法规范：该函数用于创建对象，其除了是一个对象外，我们又称之为构造对象的函数，简称构造函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name,description</span>)</span>&#123;</div><div class="line">        <span class="comment">//属性</span></div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>访问语法规范，先实例化后再点语法访问<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> phone = <span class="keyword">new</span> Product(<span class="string">'手机'</span>,<span class="string">'手机中的战斗机'</span>);</div><div class="line">    <span class="built_in">console</span>.log(phone.name);</div><div class="line">    <span class="built_in">console</span>.log(phone.buy());</div></pre></td></tr></table></figure></p>
<p><strong>原型对象名字：构造函数名称.prototype</strong><br>原型对象的属性语法规范：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Peoduct.prototype.date=<span class="string">'2017/10/2'</span>;</div><div class="line">Product.prototype.getDetail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">return</span> &#123;<span class="attr">name</span>:<span class="string">'IPhone7s'</span>,<span class="attr">price</span>:<span class="number">100</span>,<span class="attr">description</span>:<span class="string">'手机中的战斗机'</span>&#125;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>访问语法规范：静态模式访问。实例模式访问。  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//静态模式访问</span></div><div class="line">    <span class="built_in">console</span>.log(Product.prototype.date);</div><div class="line"></div><div class="line"><span class="comment">//实例模式访问</span></div><div class="line">    phone = <span class="keyword">new</span>; Product(<span class="string">'手机'</span>,<span class="string">'手机中的战斗机'</span>);</div><div class="line">    <span class="built_in">console</span>.log(phone.date);</div></pre></td></tr></table></figure>
<p><strong>构造函数对象属性不共享，原型对象属性共享</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">原型对象属性共享</div><div class="line">    <span class="keyword">var</span> iphone =<span class="keyword">new</span> Product(<span class="string">'iphone'</span>)</div><div class="line">    <span class="keyword">var</span> android =<span class="keyword">new</span> Product(<span class="string">'android'</span>)</div><div class="line"></div><div class="line">    <span class="comment">//构造函数对象属性不共享</span></div><div class="line">    <span class="built_in">console</span>.log(iphone.name)    <span class="comment">//iphone</span></div><div class="line">    <span class="built_in">console</span>.log(android.name)   <span class="comment">//android</span></div><div class="line"></div><div class="line">    <span class="comment">//原型对象属性被所有实例共享</span></div><div class="line">    <span class="built_in">console</span>.log(iphone.date)    <span class="comment">//2015/10/0</span></div><div class="line">    <span class="built_in">console</span>.log(android.date)   <span class="comment">//2015/10/0</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;构造函数和属性&quot;&gt;&lt;a href=&quot;#构造函数和属性&quot; class=&quot;headerlink&quot; title=&quot;构造函数和属性&quot;&gt;&lt;/a&gt;构造函数和属性&lt;/h3&gt;&lt;h4 id=&quot;01-基础&quot;&gt;&lt;a href=&quot;#01-基础&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的三大特征</title>
    <link href="http://yoursite.com/2016/05/08/8.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/"/>
    <id>http://yoursite.com/2016/05/08/8.面向对象的三大特征/</id>
    <published>2016-05-08T06:11:31.000Z</published>
    <updated>2017-11-03T09:08:10.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li>编程世界的继承：两层含义<ul>
<li>含义1:拥有父类的属性方法(特性)</li>
<li>含义2:拥有自己的属性和方法</li>
</ul>
</li>
<li>继承的简单理解<ul>
<li>继承可以减少代码重复 </li>
<li>我们一般将相同的属性放在父类中</li>
<li>然后子类定义自己独特的属性</li>
</ul>
</li>
<li>继承术语<ul>
<li>子类</li>
<li>父类</li>
<li>派生类</li>
<li>基类</li>
</ul>
</li>
</ul>
<h3 id="面向对象三大特性九重境界"><a href="#面向对象三大特性九重境界" class="headerlink" title="面向对象三大特性九重境界"></a>面向对象三大特性九重境界</h3><ol>
<li>Object中的继承-最简单的继承</li>
<li>内置对象的继承</li>
<li>自定义对象的继承</li>
<li>多种继承实现方式</li>
<li>第三方框架实现继承</li>
<li>面向对象三大特性和继承</li>
<li>面向未来变化编程和继承</li>
<li>面向接口编程和继承</li>
<li>设计模式 忘记模式 无招胜有招</li>
</ol>
<h4 id="第一层（从继承的角度理解原型创建对象）"><a href="#第一层（从继承的角度理解原型创建对象）" class="headerlink" title="第一层（从继承的角度理解原型创建对象）"></a>第一层（从继承的角度理解原型创建对象）</h4><ul>
<li>继承就是定义一个新的对象，继承另一个对象的属性和方法。</li>
<li>千年通过原型方式创建一个对象A，其可以使用Object中的所有属性和方法，这里我们就说A对象继承了Object对象。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个对象，继承Object</span></div><div class="line"><span class="keyword">var</span> <span class="number">0</span>=<span class="keyword">new</span> objecct();</div><div class="line"><span class="comment">//这里其实就是继承，我们新创建的一个对象，然后继承Object所有属性和方法</span></div><div class="line">alert(<span class="number">0.</span>toString);</div></pre></td></tr></table></figure>
<ul>
<li>内部实现机制<ul>
<li>继承的本质就是通过<strong>proto</strong>指针指向某个对象，系统能够自动 链式访问所指向的对象的属性方法。</li>
<li><strong>proto</strong>是函数的属性之一，对象都是函数。说白了其实就是地址。</li>
</ul>
</li>
<li>继承中的定义：基类和子类<ul>
<li>我们称0对象为儿子，又称子类，派生类Object为付清，又称分类，基类。</li>
</ul>
</li>
<li>祖先<ul>
<li>整个js世界都继承自Object，都可以访问Object中的属性和方法。</li>
<li>所以，Object是所有对象的祖先，是生命诞生的鼻祖</li>
</ul>
</li>
<li>继承第一层的特性<ul>
<li>在不破坏原有代码结构情况下重写基类</li>
<li>在不破坏原有代码结构情况下扩展基类</li>
</ul>
</li>
</ul>
<h4 id="第二层（内置对象的继承关系）"><a href="#第二层（内置对象的继承关系）" class="headerlink" title="第二层（内置对象的继承关系）"></a>第二层（内置对象的继承关系）</h4><ul>
<li>所有的内置对象都继承在Object，除了拥有自身的方法和属性之外，还拥有Object的所有属性和方法。</li>
<li>万物皆继承自Object</li>
<li>更准确的说：万物皆继承自Object.prototype</li>
</ul>
<h4 id="第三层（自定义对象的继承）"><a href="#第三层（自定义对象的继承）" class="headerlink" title="第三层（自定义对象的继承）"></a>第三层（自定义对象的继承）</h4><ul>
<li>继承的本质就是通过<strong>proto</strong>指针指向某个对象，系统能够自动链式访问所指向的对象的属性方法。</li>
<li>那么对于自定义对象的继承，只需要让第二个对象的<strong>proto</strong>指向另一个对象即可。</li>
</ul>
<p>用js实现上述继承<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//父类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperParent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=<span class="string">"jack"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//子类继承父亲</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.age=<span class="number">12</span>;</div><div class="line">&#125;</div><div class="line">Parent.prototype=<span class="keyword">new</span> SuperParent();</div><div class="line"><span class="comment">//付清继承爷爷，通过原型，形成链条</span></div><div class="line"><span class="keyword">var</span> test=<span class="keyword">new</span> Parent();</div><div class="line">alert(test.age);</div><div class="line"><span class="comment">//得到被继承的属性</span></div><div class="line">alert(test.name);</div><div class="line"><span class="comment">//单词击沉继续原型链继承</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.weight=<span class="number">60</span>;</div><div class="line">&#125;</div><div class="line">Child.prototype=<span class="keyword">new</span> Parent();</div><div class="line"><span class="comment">//继续原型链继承</span></div><div class="line"><span class="keyword">var</span> child=<span class="keyword">new</span> Child();</div><div class="line">alert(child.name);</div><div class="line"><span class="comment">//继承了Parent和Child，弹出jack</span></div><div class="line">alert(child.age);<span class="comment">//弹出12</span></div></pre></td></tr></table></figure></p>
<ul>
<li><strong>爷爷使用所有人祖先Object中属性方法</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test=<span class="keyword">new</span> SuperParent();</div><div class="line">alert(test.name);</div><div class="line">alert(test.toString());</div></pre></td></tr></table></figure>
<ul>
<li>访问链：——&gt;SuperParent构造对象——&gt;SuperParent原型对象——&gt;Object对象——&gt;Object原型对象(找到toString)——&gt;null</li>
<li><strong>儿子使用爷爷中的属性</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> child=<span class="keyword">new</span> Child();</div><div class="line">alert(child.name);</div></pre></td></tr></table></figure>
<ul>
<li>var child=new Child();</li>
<li>alert(child.name);</li>
</ul>
<h3 id="继承中的原型链-核心知识点-链式搜索机制"><a href="#继承中的原型链-核心知识点-链式搜索机制" class="headerlink" title="==继承中的原型链==核心知识点-链式搜索机制"></a>==继承中的原型链==核心知识点-链式搜索机制</h3><ul>
<li>首先访问child构造函数，返现没有name属性</li>
<li>寻找<strong>proto</strong>，判断其指针是否为空</li>
<li>指向Child原型函数，寻找有没有name属性</li>
<li>没有找到，则判断其<strong>proto</strong>属性是否为null，如果不是null，继续搜索。</li>
<li>找到parent实例对象，检查是否有name属性，没有的话继续找。</li>
<li>继承和面向对象编程<ul>
<li>将重复的代码放在基类 </li>
</ul>
</li>
</ul>
<h4 id="第四层-多种继承方式"><a href="#第四层-多种继承方式" class="headerlink" title="第四层(多种继承方式)"></a>第四层(多种继承方式)</h4><ul>
<li><strong>原型继承</strong><ul>
<li>存在的问题：无法传参，==无法通过参数定义对象==，在Student的构造方法中，无法使用new Student(“00001”,”张三”,12);</li>
<li>创建对象，并初始化name和age属性，必须stu.name,stu.age进行赋值</li>
</ul>
</li>
<li><strong>构造函数继承</strong><ul>
<li>使用call方法，第一个参数为上下文</li>
<li>存在的问题：无法继承原型中的方法</li>
<li>如何解决问题：二者合二为一</li>
</ul>
</li>
<li><strong>组合继承(实现了继承属性和方法)</strong><ul>
<li>组合继承-最佳组合 （混合模式）</li>
<li>这种方式的缺点：无论什么情况，都会调用两次超类构造函数。一次是在创建子类原型时，另一次是在子类构造函数内部。</li>
<li>解决方法就是下面的方法</li>
</ul>
</li>
<li><strong>继承组合继承(了解)</strong><ul>
<li>继承的固定函数</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//继承的固定函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType,superType</span>)</span>&#123;...&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;...&#125;;</div><div class="line">Person.prototype.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age</span>)</span>&#123;...&#125;;</div><div class="line">inheritPrototype(student,Person);</div><div class="line"><span class="keyword">var</span> xiaozhang=<span class="keyword">new</span> Student(<span class="string">"小张"</span>,<span class="number">20</span>);</div><div class="line"><span class="built_in">console</span>.log(xiaozhang,name);</div></pre></td></tr></table></figure>
<ul>
<li><strong>拷贝继承</strong> </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Chinese=&#123;</div><div class="line">    nation:<span class="string">"中国"</span>;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> Doctor=&#123;</div><div class="line">    career:<span class="string">"医生"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请问怎样才能让“医生”去继承“中国人”，也就是说，我怎样才能成为一个“中国医生”的对象？<br>这里要注意，这两个对象都是普通对象，不是构造函数，无法使用构造函数方法实现“继承”。<br><strong>除了使用“prototype链”以外，还有另一种思路：把父对象的属性，全部拷贝给子对象，也能实现继承</strong>  </p>
<h4 id="第五层（第三方框架实现继承）"><a href="#第五层（第三方框架实现继承）" class="headerlink" title="第五层（第三方框架实现继承）"></a>第五层（第三方框架实现继承）</h4><ul>
<li>Class.js</li>
<li>Canvas 第三方框架</li>
<li>Extend()</li>
<li>我们真正开发的时候用的就是第三方框架</li>
<li><strong>多继承</strong></li>
<li>一种以下还可以再分，比如动物可以分为鱼和马，鱼可以分为咸水鱼和淡水鱼，马可以分为公马和母马。  </li>
</ul>
<h4 id="第六层（封装性，多态性和继承的关系）"><a href="#第六层（封装性，多态性和继承的关系）" class="headerlink" title="第六层（封装性，多态性和继承的关系）"></a>第六层（封装性，多态性和继承的关系）</h4><ul>
<li>生活中一切事物皆对象，面向对象就是模拟现实</li>
<li>和现实一样，面向对象有三大特征：封装性，继承性和多态性</li>
<li>现实生活中人，山河湖海等都可以理解为一个对象，我们可以把和人相关的而一些属性，动作封装在人这个对象里面，比如人的属性：年龄，性别。人的动作：吃饭，睡觉，打豆豆。</li>
<li>机器：为我所用。</li>
<li>继承：祖先，父亲，儿子</li>
<li>多态：动物的多态性和植物的多态性</li>
</ul>
<h5 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h5><ul>
<li>先形成对象</li>
<li>思维转变：函数思维到面向对象思维<ul>
<li>第一种方式：函数，将所有的功能放在一个函数里面</li>
<li>第二种方式，面向对象思维</li>
</ul>
</li>
<li>封装性的好处<ul>
<li>将属性方法归类，调理清晰</li>
<li>当出现错误，容易发现问题，先找到其属于哪个对象隔离作用，当代码出现错误，不会影响其他对象</li>
<li>封装变化，对于一个需求经常变动的地方，封装起来，这样当代码需要经常修改，只需要修改单一方法。</li>
<li>封装复杂：将一些复杂的功能封装起来，方便使用</li>
</ul>
</li>
<li>面向对象和搭积木<ul>
<li>就类似盖房子，先把盖房子需要的各种对象实现出来或者制造出来，然后再用这些对象组装房子 </li>
<li>函数式编程：将所有功能放在一个函数里面—浆糊编程</li>
<li>面向对象编程：优雅编程</li>
</ul>
</li>
<li><strong>狭义封装性</strong><ul>
<li>定义：封装就是保护内容，保证类的某些属性或者是方法不背外部看见。</li>
<li>封装的实现<ul>
<li>为属性封装：peivate 属性类型 属性名称</li>
<li>为方法封装：private 方法返回值 方法名称(参数列表){};</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>如何实现共有私有</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="comment">//定义一个共有变量</span></div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">    <span class="comment">//定义一个共有函数</span></div><div class="line">    <span class="keyword">this</span>.show=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       alert(<span class="string">"name:"</span>+name+<span class="string">";age:"</span>+age); </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bill=<span class="keyword">new</span> Person(<span class="string">"Bill"</span>,<span class="number">20</span>);</div><div class="line"><span class="comment">//通过bill.name可以访问证明其公有性</span></div><div class="line">alert(bill.name);</div><div class="line">bill.show();</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>广义封装性</strong><ul>
<li>封装某些功能成一个函数，对象。</li>
<li>将一个系统拆分成不同的模块，然后组成系统，比如计算机分成cpu和硬盘</li>
<li>==原则==<ul>
<li>封装变化点</li>
<li>封装单个功能-单一职责功能</li>
<li>封装复杂点</li>
<li>封装功能成多个模块——模块化编程<ul>
<li>框架设计中命名空间，闭包，对象和函数等都可以实现模块</li>
</ul>
</li>
<li>封装成组件-框架<ul>
<li>幻灯片组件，tab组件，瀑布流组件——基于框架</li>
</ul>
</li>
<li>封装业务逻辑：基于框架，组件，比如幻灯片和ajax结合</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><ul>
<li>多态是一种思想：多态不是一种技术，是你解决问题的方针，知道思想。</li>
<li>通俗定义：同类事物，多种形态</li>
<li>世界之所以多彩，诗意，源于多态。</li>
<li>官方定义：多态(Polymorphism)，是指面向对象程序运行时，相同的消息可能会送给多个不同的类之对象，而系统可依据对象所属类，引发对应类的方法，而有不同的行为。</li>
<li>js中的多态世界<ul>
<li>多态和观察者模式实现一处变化，所有皆变。 </li>
</ul>
</li>
<li>继承实现多态<ul>
<li>继承本身就是多态的一种实现</li>
<li>同类事物-多态</li>
<li>重载也是多态的一种体现</li>
</ul>
</li>
</ul>
<h5 id="重载和多态"><a href="#重载和多态" class="headerlink" title="重载和多态"></a>重载和多态</h5><ul>
<li>一个方法，名称相同，通过参数个数不同或者参数的类型不同执行不同的功能。</li>
<li>高级语言是支持重载多态的，但是Javascript不支持</li>
<li>在.Net中有方法的重载，方法名称相同，参数不同或者参数类型 不同，被视为不同的方法</li>
<li>但是在Javascript中，如果函数名称相同，无论参数怎么不相同，调用的时候始终会以最后一个函数为有效函数，怎么解决这个问题呢。</li>
<li>函数重载实现<ul>
<li>通过函数参数个数区分<ul>
<li>重载实现方式-类型不同</li>
<li>通过函数的arguments属性实现重载</li>
<li>jQuery框架中的重载</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="第七层-面向对象接口编程，面向抽象编程，面向未来编程"><a href="#第七层-面向对象接口编程，面向抽象编程，面向未来编程" class="headerlink" title="第七层 面向对象接口编程，面向抽象编程，面向未来编程"></a>第七层 面向对象接口编程，面向抽象编程，面向未来编程</h4><ul>
<li>现实生活中的接口：<ul>
<li>接口的定义：接口就是一个协议，规定大家都必须遵守的协议 </li>
</ul>
</li>
<li>接口连接整个世界</li>
<li>采用接口(协议)的好处<ul>
<li>实现模块化制造，各个模块通过接口联系起来</li>
<li>由于模块化，导致分工明细，从而保证大规模项目团队化制造，多团队制造</li>
<li>面向接口制造，灵活组装，替换容易</li>
</ul>
</li>
<li>接口遍布整个世界</li>
<li>接口的重要性：整个世界都是通过接口连接在一起的。是万物联系的根本，很难用语言描述其重要性</li>
<li>编程世界中的接口<ul>
<li>协议类型1 前后台通信协议<ul>
<li>json xml </li>
<li>前后台开发人员通过接口来合作</li>
</ul>
</li>
<li>协议类型2 不同开发人员之间的协议<ul>
<li>多人开发项目中，一般都是每个人负责编写不同的模块(对象)，当别人需要使用你写的对象的时候，你们可以坐下来沟通下接口，让对方先去使用你写的功能，至少有没有实现，如何实现，对方不关心，最简单的方法就是定义一个对象，定义一个空方法。或者方法中暂时返回假数据。先让其他人能够使用。</li>
</ul>
</li>
<li>不用系统之间的协议<ul>
<li>多系统开发一般使用web Service作为沟通桥梁，代理模式或者中介模式处理不同系统之间的通信</li>
</ul>
</li>
</ul>
</li>
<li>面向对象接口思维<ul>
<li>接口一般用于规定某个对象必须实现的方法</li>
<li>对于大型网站开发，如果采用面向对象开发。将系统分成多个模块（对象），我们可以像搭积木一样构建整个功能。</li>
<li>构建的时候我们面向接口编程。</li>
<li>首先每个模块提供一个接口。这个接口是恒定的，不变的。我们不关心内部是如何实现的，只是关心这个接口如何使用的。</li>
</ul>
</li>
<li>面向接口编程步骤<ul>
<li>1.规定接口</li>
<li>2.按照接口编写子模块</li>
<li>3.面向接口编程</li>
</ul>
</li>
</ul>
<h5 id="面向未来编程"><a href="#面向未来编程" class="headerlink" title="面向未来编程"></a>面向未来编程</h5><ul>
<li>面向对象解决的问题：封装世界，应对变化。</li>
<li>应对变化：需求变化，代码需要不断的改善，每次变化差的架构需要改动很多代码，而号的代码只需要修改最少的代码</li>
<li>面向未来编程的定义：由于用户的需求时刻变化，导致我们开发好的代码也不是一成不变的，也是需要不断修改的。为了应对这些可能的变化，必须让代码模块化。这样就算变化也只会影响某个模块而不会影响全局。</li>
<li>如何更好的应对变化<ul>
<li>一群软件大事根据建筑学等理论得出了如下几个原则：</li>
<li>开放封装原则(有变化，尽量不修改原来的代码，扩充功能)单一职责原则-这样变化了，容易找到问题</li>
<li>通俗的讲：单一职责原则：每个兑现只有一个引起他变化的原因，这样需求变化的时候，很快定位到是那个对象需要修改，而不是修改多个对象，如果刚开始架构合理，是可以完美应对需求变化的</li>
</ul>
</li>
<li>好的架构师<ul>
<li>从容应对需求变化<ul>
<li>封装变化</li>
<li>分离算法</li>
<li>分层-设计 前端 后台 数据库 服务</li>
<li>好的架构师可以让新人写的代码再差，也不会影响全局，因为采用了模块化，低耦合，让你写的代码尽量和别人写的联系少，或者通过中间桥梁来沟通，你写的再差，顶多会影响到桥梁。</li>
</ul>
</li>
<li>学习思维而不是代码，重点是你要有这种解决问题的思维</li>
<li>继承和开放封闭原则：共性放在基类中，特性通过继承的方式继承的对象只含有某产品的方法属性。</li>
</ul>
</li>
<li><strong>总结继承作用</strong><ul>
<li>继承不是一种技术，是你解决问题的方针，指导思想。</li>
<li>定义一个新的对象，使得其拥有另一个对象的功能(属性和方法)</li>
<li>减少拷贝和代码相同(如果一个地方出错，代码相同的话，需要修改很多地方，可以将一样的地方用函数封装)</li>
<li>模块化-降低系统之间的耦合，从而更好应对未来需求变化带来的代码修改，有经验的人知道，很多项目失败是因为架构差，到了最后，用户随便一个不满意，都会导致代码全部改动，进而加班疯狂改动。</li>
<li><strong>继承的好处</strong><ul>
<li>核心<ul>
<li>模块化编程，降低耦合</li>
<li>应对需求变化，随着时间流逝，产品需求可能对你类的行为有更多的要求</li>
</ul>
</li>
<li>其他好处<ul>
<li>拓展功能</li>
<li>修改功能</li>
<li>通过继承实现代码重用</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="第八层-设计模式和继承"><a href="#第八层-设计模式和继承" class="headerlink" title="第八层 设计模式和继承"></a>第八层 设计模式和继承</h4><ul>
<li>独孤九剑：23中设计模式招式</li>
<li>易筋经：面向对象编程思维 艺术</li>
</ul>
<h4 id="第九层-忘记模式-挥洒自如-无照胜有招"><a href="#第九层-忘记模式-挥洒自如-无照胜有招" class="headerlink" title="第九层 忘记模式 挥洒自如 无照胜有招"></a>第九层 忘记模式 挥洒自如 无照胜有招</h4><ul>
<li>随着开发经验提高，很自然的就会根据需求，场景创造适合当前开发场景的最佳模式。</li>
<li>基础：必须修炼完成前四层</li>
<li>中级：第五层，第六层，第七层</li>
<li>高级：第八层，第九层</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面向对象的三大特征&quot;&gt;&lt;a href=&quot;#面向对象的三大特征&quot; class=&quot;headerlink&quot; title=&quot;面向对象的三大特征&quot;&gt;&lt;/a&gt;面向对象的三大特征&lt;/h1&gt;&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>jQuery</title>
    <link href="http://yoursite.com/2016/04/11/7.jQuery/"/>
    <id>http://yoursite.com/2016/04/11/7.jQuery/</id>
    <published>2016-04-11T11:34:22.000Z</published>
    <updated>2017-11-03T09:07:47.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>定义：就是一个js文件封装的库，就是一个js文件，（类似于common.js)。<br>JavaScript库：把一些兼容性的代码（比较复杂的操作代码封装到一个js文件中，这个文件就是JavaScript库。这个库有很多，有一个是比较符合目前操作的库，这个库就是jQuery。<br>js库中（js文件里）都是通过js来实现的并不能代替javascript。jQuery就是一种函数。学习就是学习一些封装后方法的使用。<br>常见的JavaScript库：Prototype、YUI(网络反响一般)、Dojo、ExtJS、jQuery等。<br>能做什么：js做100，jQ做97。但是jQ不会替代js<br>jQ的容错性很高，浏览器可能不报错，所以这就是难点。<br>特点：write less，do more.<br>js中的事件，在JQuery中很少使用:=;<br>jQuery一般都是两个文件（正常版本的，压缩版本的）。<br>正常版本的：开发的时候使用<br>压缩的版本：上线的时候使用<br>jQuery中的顶级对象：jQuery—–$<br>jQuery中所有的方法或者属性都是要通过jQuery对象来调用的。<br>注意：jQuery中代码写的时候方便，可以链式编程，所以要写注释，并且要多写注释。（容易出错误）<br>jQuery中的事件几乎是把DOM中的on干掉，直接变成了方法。<br>DOM中页面加载的事件<br>window.onload事件：页面中所有的内容全部加载完毕后才触发（标签，图片，外部引入）<br>window.onload事件页面中只能执行一个。他的方法类似以赋值，所以会执行最后的一次赋值。<br>jQuery页面加载的事件的写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">//第一种写法</span></div><div class="line">    $(<span class="built_in">window</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//要执行的事</span></div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//第二种写法（页面中的基本元素加载完毕后就触发）</span></div><div class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//要执行的事</span></div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//第三种写法</span></div><div class="line">    jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//要执行的事</span></div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//第四种写法</span></div><div class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//要执行的事</span></div><div class="line">    &#125;);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>总结：DOM的写法：window.onload=匿名函数;页面中只能存在一个，页面中国所有内容加载后才触发。<br>jQuery写法  </p>
<ol>
<li>$(window).load(匿名函数);相当于DOM中的window.onload写法。</li>
<li>$(document).ready(匿名函数);页面中基本元素加载后就触发，一般在插件中比较常见。上面的这两种写法就是把DOM对象转成jQuery对象。</li>
<li>jQuery中有自己的页面加载事件。jQuery(匿名函数);就相当于$(document).ready(匿名函数);</li>
<li>$(匿名函数);就相当于jQuery(匿名函数);  </li>
</ol>
<p>==DOM对象不能调用jQuery中的方法，jQuery对象不能调用DOM对象的方法==<br>快速分辨DOM对象或者是jQuery对象的关键就是看对象后的属相或者方法是DOM或是jQuery里面的。<br>D二者为什么要互转：解决兼容性的问题需要转换，或者需要调用相互的方法需要二者互转。<br>转换方法：  </p>
<ol>
<li>DOM对象转jQuery对象：$(DOM对象);</li>
<li>jQuery对象转DOM对象：jQuery对象[0]或者jQuery对象.get(0);</li>
</ol>
<p>jQuery中获取元素是根据选择器的方式来获取的：  </p>
<ol>
<li>id选择器：$(“#id属性的值”);—元素对象</li>
<li>类选择器：$(“.类样式的名字”);—元素</li>
<li>标签选择器：$(“标签名字”);—元素</li>
</ol>
<p>几个常见的方法  </p>
<ol>
<li>.html()方法，设置标签中间显示其他标签及内容，类似于innerHTML。</li>
<li>.text()方法，设置标签中间显示的文本内容，类似于innerText。</li>
<li>.val()方法：设置input便签中的type值，类似于Value。</li>
<li>.css()方法，设置元素的样式，类似于style。</li>
<li>注意：()中写字符串，一个参数，就是要设置的值，什么也不写，返回的是这个属性的值。.css()写的是键值对。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//属性和值很少，可以直接用逗号隔开。多个属性和值，多对的，可以用链式编程或者是键值对的方式。</span></div><div class="line">            $(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);</div><div class="line">            $(<span class="keyword">this</span>).css(&#123;<span class="string">"backgroundColor"</span>:<span class="string">"red"</span>,<span class="string">"width"</span>:<span class="string">"200px"</span>,<span class="string">"height"</span>,<span class="string">"100px"</span>&#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>标签+类选择器：$(li.cls);<br>多条件选择器：$(span,li,div);  </p>
<h4 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h4><p>后代选择器（子元素中元素，子，子孙，孙子）<br>$(“#dv li”)或者$(“ul li”)或者$(“.cls li”);<br>子代选择器（直接的所有子元素，儿子们）<br>$(“#dv&gt;li”)或者$(“ul&gt;li”)或者$(“.cls&gt;li”);<br>获取当前元素的相邻元素：  $(“div+span”);<br>获取当前元素后面所有元素：$(“div~span”);</p>
<h4 id="索引选择器"><a href="#索引选择器" class="headerlink" title="索引选择器"></a>索引选择器</h4><p>eq(3);获取索引三的元素<br>gt(3);索引大于三的所有元素<br>lt(3);索引小于三的所有元素   </p>
<h4 id="其他选择器"><a href="#其他选择器" class="headerlink" title="其他选择器"></a>其他选择器</h4><p>奇数选择器：$(“li:odd”);odd本身为奇数的意思，但是在实际应用中，由于索引0的存在，用户看到的时候是偶数。<br>偶数选择器：$(“li:even”);even本身为偶数的意思，但是在实际应用中，由于索引0的存在，用户看到的时候是奇数。<br>索引选择器：<br>:eq(索引);<br>:gt(“索引”);大于这个索引的所有元素<br>:lt(“索引”);小于这个索引的所有元素<br>jQuery的作用还是操作页面的DOM元素。<br>find();寻找元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    $(<span class="string">"#uu&gt;li:gt(5):lt(3)"</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"yellow"</span>);</div><div class="line">    <span class="comment">//这里的意思是先找到索引大于5的元素排成一排，再找到其中小于3的元素</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>设置元素样式的方法：—》css方法—》写法方式<br>第一种写法：键值对类的写法，小括号逗号一一对应<br>第二种写法：链式编程<br>第三种写法：json格式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">var</span> json=&#123;<span class="string">"width"</span>:<span class="string">"300px"</span>,<span class="string">"height"</span>:<span class="string">"200px"</span>,<span class="string">"backgroundColor"</span>:<span class="string">"green"</span>&#125;;</div><div class="line">    $(<span class="string">"#dv"</span>).css(json);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>css方法用来获取样式，返回的是该样式属性的值，css方法用来设置样式之后的代码返回的是对象。<br>链式编程的条件：调用这个方法后，是设置的方式才能链式编程。<br>元素设置类样式的方式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">//写法一</span></div><div class="line">    $(<span class="string">"#dv"</span>).addClass(<span class="string">"cls"</span>);</div><div class="line">    <span class="comment">//写法二</span></div><div class="line">    $(<span class="string">"#dv"</span>).addClass(<span class="string">"cls"</span>).addClass(<span class="string">"cls2"</span>);</div><div class="line">    <span class="comment">//写法三---中间有空格</span></div><div class="line">    $(<span class="string">"#dv"</span>).addClass(<span class="string">"cls cls2"</span>);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>去掉元素的类样式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">//写法一</span></div><div class="line">    $(<span class="string">"#dv"</span>).removeClass(<span class="string">"cls"</span>);</div><div class="line">    <span class="comment">//写法二</span></div><div class="line">    $(<span class="string">"#dv"</span>).removeClass(<span class="string">"cls"</span>).removeClass(<span class="string">"cls2"</span>);</div><div class="line">    <span class="comment">//写法三</span></div><div class="line">    $(<span class="string">"#dv"</span>).removeClass(<span class="string">"cls cls2"</span>);</div><div class="line">    </div><div class="line">    $(<span class="string">"#dv"</span>).addClass(<span class="string">""</span>);<span class="comment">//不是去掉类样式</span></div><div class="line">    <span class="comment">//啥也不写,一个参数都没有,是干掉所有的类样式</span></div><div class="line">    $(<span class="string">"#dv"</span>).removeClass();</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>添加<br>addClass(“类样式的名字”);（没有类样式前的点）<br>移除<br>removeClass(“类样式的名字”);(没有类样式前的点)<br>判断<br>hasClass(“类样式的名字”);(没有类样式前的点)<br>切换类样式<br>toggleClass(“类样式的名字”);(没有类样式前的点)<br>css和类样式对比：设置的样式如果很多那么直接使用类样式的方式进行操作，为了方便维护也最好使用类样式进行操作。简单的操作直接使用css。</p>
<h4 id="链式编程的断链问题"><a href="#链式编程的断链问题" class="headerlink" title="链式编程的断链问题"></a>链式编程的断链问题</h4><p>如果链式编程过程中发现返回的值不是原来的对象，此时可以视为断链。修复断链的方法为.end()方法（==end修复断链的问题是针对上一个==，恢复到断链之前的状态。<br>不要轻易使用链式编程—必须要清除调用方法后返回的还是不是原来的对象。<br>==多行代码合并成一行代码，前提要认清此行代码返回的是不是对象。是对象才能进行链式编程。</p>
<h4 id="获取其他元素的方法"><a href="#获取其他元素的方法" class="headerlink" title="获取其他元素的方法"></a>获取其他元素的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">//获取的是当前元素的下一个兄弟元素</span></div><div class="line">    $(<span class="string">"#three"</span>).next().css(<span class="string">"backgroundColor"</span>,<span class="string">"blue"</span>);</div><div class="line">    <span class="comment">//当前元素的前一个兄弟元素</span></div><div class="line">    $(<span class="string">"#three"</span>).prev().css(<span class="string">"backgroundColor"</span>,<span class="string">"blue"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//后面所有的兄弟元素</span></div><div class="line">    $(<span class="string">"#three"</span>).nextAll().css(<span class="string">"backgroundColor"</span>,<span class="string">"blue"</span>);</div><div class="line">    <span class="comment">//前面所有的兄弟元素</span></div><div class="line">    $(<span class="string">"#three"</span>).prevAll().css(<span class="string">"backgroundColor"</span>,<span class="string">"blue"</span>);</div><div class="line">    <span class="comment">//所有的兄弟元素,没有自己</span></div><div class="line">    $(<span class="string">"#three"</span>).siblings().css(<span class="string">"backgroundColor"</span>,<span class="string">"blue"</span>);</div><div class="line">    <span class="comment">//所有的li中的第一个</span></div><div class="line">    $(<span class="string">"ul&gt;li"</span>).first().css(<span class="string">"backgroundColor"</span>,<span class="string">"blue"</span>);</div><div class="line">    $(<span class="string">"ul :first-child"</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"blue"</span>);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h4><p>show和hide方法</p>
<ul>
<li>show(参数1,参数2);</li>
<li>hide(参数1,参数2);</li>
<li>slideUp();滑上—隐藏 拉上窗帘</li>
<li>slideDown();滑下—显示</li>
<li>slideToggle();切换的滑入和滑出</li>
<li>fadeIn();淡入 类似于透明度</li>
<li>fadeOut();淡出</li>
<li>fadeToggle();切换的淡入淡出</li>
<li>fadeTo();到达什么效果</li>
<li>参数1:这个参数的类型可以是数字类型,也可以是字符串类型:</li>
<li>数字类型:是时间—1000—1秒–1000毫秒,</li>
<li>字符串类型:fast,normal,slow—固定的三个</li>
<li>参数2:回调函数,这个函数是在动画执行结束后才执行 <h4 id="元素的创建"><a href="#元素的创建" class="headerlink" title="元素的创建"></a>元素的创建</h4>$(“标签及代码”)—&gt;创建元素，返回的就是一个对象<br>追加<br>父级元素.append(子级元素);<br>子级元素.appendTo(父级元素);<br>总结：如果是从父级元素中获取子级元素，再次追加到其他元素中的时候，注意此时看成是剪切，第一个父级元素中没有这个元素。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    $(<span class="string">"#dv2"</span>).append($(<span class="string">"#dv1&gt;p"</span>).clone(<span class="literal">true</span>));</div><div class="line">    <span class="comment">//此时相当于复制的意思。克隆一个到另一个</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="清空元素的几个方法"><a href="#清空元素的几个方法" class="headerlink" title="清空元素的几个方法"></a>清空元素的几个方法</h4><p>第一种方法：设置内容为空（但是标签存在）<br>第二种方法：$(“#dv”).empty();注意empty()没有参数<br>第三种方法：$(“#dv&gt;p”).remove();<br>removeAttr(“属性的名字”);移除属性<br>remove方法自己把自己去掉，相当于自杀的行为  </p>
<h4 id="设置元素的value属性"><a href="#设置元素的value属性" class="headerlink" title="设置元素的value属性"></a>设置元素的value属性</h4><p>input标签：文本框，radio，textarea（文本域），checkbox…常见的表单标签，都可以通过val方法获取和设置value的值。<br>如果是jQuery的方式写的代码，设置文本域的内容使用.text，下拉框设置value属性，并不是概念option的value属性，而是设置值为3的这个option选中。$(“#s1”).val(3);  </p>
<h4 id="元素的自定义属性"><a href="#元素的自定义属性" class="headerlink" title="元素的自定义属性"></a>元素的自定义属性</h4><p>==对象.attr();设置两个参数。==<br>参数1位属性名字，参数2为值。<br>对象.attr(“属性名字”);获取的是该属性的值。<br>.attr方法相当于DOM中的setAttribute()和getAttribute()方法。<br>.attr()方法可以设置标签的自带属性值，也可以设置自定义属性值。<br>==.offset()==<br>方法返回都是一个对象。该对象有两个属性，分别是left和top。获取的是数字类型，没有px。想要获取的属性的值用.offset().属性名字即可。设置前如果没有脱离文档流，设置的时候会有relative设置前如果有脱离文档流，设置的时候不会再次设置脱标。==设置的时候元素在设置前如果没有脱离文档流，设置的时候回自动进行脱离文档流，默认relative。如果设置前有脱离文档流，那么设置的时候直接改变位置。==<br>注意：如果层和层中的标签（p）同时定位，并且p距离左上角50px，通过按钮设置层距离左上角100px，那么p此时距离左上角为150px。<br>设置元素的left和top<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    $(<span class="string">"#dv"</span>).offset(&#123;<span class="string">"left"</span>:<span class="number">200</span>,<span class="string">"top"</span>:<span class="number">300</span>&#125;);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>在jQuery中获取元素的宽和高可以直接调用封装的方法：<br>.width();/.height();<br>都是数字类型，这两个方法中，设置元素的宽或者高的时候，参数可以是数字类型，不用加px。<br>$(document).scrollTop()方法，获取的是向上卷曲出去的距离。<br>$(document).scrollLeft()方法，获取的是向左卷曲出去的距离。<br>这两种是jQuery内部封装好的，不需要考虑其兼容性。  </p>
<h3 id="为元素绑定事件的几种写法"><a href="#为元素绑定事件的几种写法" class="headerlink" title="为元素绑定事件的几种写法"></a>为元素绑定事件的几种写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">//为按钮添加点击事件,鼠标进入,鼠标离开</span></div><div class="line"></div><div class="line">      <span class="comment">//第一种</span></div><div class="line">      $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"今天中午不吃了,减肥"</span>);</div><div class="line">      &#125;);</div><div class="line">      $(<span class="string">"#btn"</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);</div><div class="line">      &#125;);</div><div class="line">      $(<span class="string">"#btn"</span>).mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">""</span>);</div><div class="line">      &#125;);</div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">//第二种写法:链式编程</span></div><div class="line">      $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"今天中午不吃了,减肥"</span>);</div><div class="line">      &#125;).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);</div><div class="line">      &#125;).mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">""</span>);</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      <span class="comment">//第三种方式: bind---为元素绑定多个事件</span></div><div class="line">      $(<span class="string">"#btn"</span>).bind(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"哦买噶的"</span>);</div><div class="line">      &#125;).bind(<span class="string">"mouseenter"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);</div><div class="line">      &#125;).bind(<span class="string">"mouseleave"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">""</span>);</div><div class="line">      &#125;);</div><div class="line">      <span class="comment">//第四种写法:</span></div><div class="line">      <span class="comment">//键:事件名字</span></div><div class="line">      <span class="comment">//值:事件处理函数</span></div><div class="line">      $(<span class="string">"#btn"</span>).bind(&#123;<span class="string">"click"</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"哦买噶的"</span>);</div><div class="line">      &#125;,<span class="string">"mouseenter"</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);</div><div class="line">      &#125;,<span class="string">"mouseleave"</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">""</span>);</div><div class="line">      &#125;&#125;);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">//为父级元素中的子级元素通过代理的方式绑定事件</span></div><div class="line">    $(<span class="string">"#dv"</span>).delegate(<span class="string">"p"</span>,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       alert(<span class="string">"象拔蚌"</span>); </div><div class="line">      <span class="comment">//找到父元素，添加这个方法，胃里面的子级元素绑定事件。</span></div><div class="line">    &#125;);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>==delegate()方法为父级元素绑定事件，子元素来触发。==<br>delegate()方法内部也是调用on的方法来绑定事件的。新的标准中不推荐使用（不安全）。  </p>
<h2 id="on的方法"><a href="#on的方法" class="headerlink" title="on的方法"></a>on的方法</h2><p>参数1：绑定事件的类型<br>参数2：绑定事件的元素<br>参数3：执行事件的函数<br>手机开发中也是使用的on的方式绑定事件。 </p>
<h2 id="为元素绑定事件三种方式（总结）"><a href="#为元素绑定事件三种方式（总结）" class="headerlink" title="为元素绑定事件三种方式（总结）"></a>为元素绑定事件三种方式（总结）</h2><ol>
<li>bind() 方式绑定事件</li>
</ol>
<ul>
<li>如果是一个参数: {“事件名字”:事件处理函数}</li>
<li>例子:$(“#btn”).bind({“click”:function(){});</li>
<li>如果是两个参数: 事件名字,事件处理函数</li>
<li>例子:$(“#btn”).bind(“click”,function(){});</li>
</ul>
<ol>
<li>delegate方式绑定事件—父级元素调用方式为子级元素绑定事件</li>
</ol>
<ul>
<li>最少三个参数</li>
<li>元素,类型,事件处理函数</li>
<li>例子:$(“#dv”).delegate(子级元素p,”事件类型click”,function(){});</li>
</ul>
<ol>
<li>on方式绑定事件—父级元素调用方法为子级元素绑定事件  </li>
</ol>
<ul>
<li>父级元素.on(事件类型,子级元素,事件处理函数);</li>
<li>例子:父级元素.on(“click”,”p”,function(){});</li>
<li>对象.on(“事件类型”,事件处理函数);</li>
<li>== 最终推荐使用on绑定事件==<h2 id="解绑事件的三种方式"><a href="#解绑事件的三种方式" class="headerlink" title="解绑事件的三种方式"></a>解绑事件的三种方式</h2>==通过什么方式绑定事件,最好使用对应的方式进行解绑==</li>
<li>bind 方式绑定事件,解绑:unbind();</li>
<li>delegate方式绑定事件,解绑:undelegate();</li>
<li>on方式绑定事件,解绑:off()</li>
<li>推荐使用on绑定事件,off解绑事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="comment">//bind绑定事件--解绑unbind</span></div><div class="line">     <span class="comment">//没有参数，div所有绑定的事件全部解绑</span></div><div class="line">    $(<span class="string">"#dv"</span>).unbind();</div><div class="line">     <span class="comment">//解绑多个事件，事件名中间用空格</span></div><div class="line">    $(<span class="string">"#dv"</span>).unbind(<span class="string">"click mouseenter"</span>);</div><div class="line"><span class="comment">//delegate绑定事件--解绑undelegate</span></div><div class="line">    <span class="comment">//没有参数，干掉了div中所有的子级元素的所有的绑定事件</span></div><div class="line">    $(<span class="string">"#dv"</span>).undelegate();</div><div class="line">    <span class="comment">//把指定的子级元素的指定的事件干掉</span></div><div class="line">    $(<span class="string">"#dv"</span>).undelegate(<span class="string">"p"</span>,<span class="string">"click"</span>);</div><div class="line">    <span class="comment">//干掉了父级元素中，p标签所有的事件</span></div><div class="line">    $(<span class="string">"#dv"</span>).undelegate(<span class="string">"p"</span>);</div><div class="line"><span class="comment">//on绑定事件--off解绑</span></div><div class="line">    <span class="comment">//父级元素和子级元素，所有的事件全部被干掉</span></div><div class="line">    $(<span class="string">"#dv"</span>).off();</div><div class="line">    <span class="comment">//父级元素和子级元素的所有点击事件被干掉</span></div><div class="line">    $(<span class="string">"#dv"</span>).off(<span class="string">"click"</span>);</div><div class="line">    <span class="comment">//子级元素指定的事件被干掉</span></div><div class="line">    $(<span class="string">"#dv"</span>).off(<span class="string">"click"</span>,<span class="string">"p"</span>);</div><div class="line">    <span class="comment">//会把div中所有的子级元素的被指定的事件全部干掉</span></div><div class="line">    $(<span class="string">"#dv"</span>).off(<span class="string">"mouseenter"</span>,<span class="string">"**"</span>);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="元素自定义属性的设置和获取"><a href="#元素自定义属性的设置和获取" class="headerlink" title="元素自定义属性的设置和获取"></a>元素自定义属性的设置和获取</h3><ul>
<li>attr(“属性”,”值”);设置某个元素的自定义属性及值</li>
<li>attr(“属性”);获取该元素的这个自定义属性的值</li>
<li>removeAttr(“属性的名字”)</li>
<li>prop(“属性”,值);可以设置元素的选中的属性及值</li>
<li>prop(“属性”);获取该属性的值  </li>
<li>注意:一般非选中的属性使用attr方法，否则建议使用.prop方法。<h4 id="元素样式设置和获取"><a href="#元素样式设置和获取" class="headerlink" title="元素样式设置和获取"></a>元素样式设置和获取</h4></li>
<li>设置和获取元素的宽和高,推荐使用:.width()和.height()方法,如果是设置直接在括号中传入数字类型的值即可,字符串类型的值也是可以的。</li>
<li>设置和获取元素的left和top,推荐使用.offset()方法，该方法返回的是一个对象,对象中有left和top属性,如果是设置.offset({“left”:值,”top”:值});</li>
<li>设置和获取元素的卷曲出去的距离left和top</li>
<li>使用.scrollLeft()方法或者是.scrollTop()方法</li>
<li>.css方法普遍使用的一个方法。  <h4 id="事件触发"><a href="#事件触发" class="headerlink" title="事件触发"></a>事件触发</h4>元素有事件直接调用这个元素的事件，叫事件触发。  </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">//如何阻止事件冒泡</span></div><div class="line">      $(<span class="string">"#dv1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</div><div class="line">      &#125;);</div><div class="line">      $(<span class="string">"#dv2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</div><div class="line">      &#125;);</div><div class="line">      $(<span class="string">"#dv3"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</div><div class="line">        <span class="comment">//阻止事件冒泡-----return false---</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>阻止事件冒泡，return false;<br>链式编程的原理：就是对象调用的方法中，返回的是当前的对象<br>jquery中 对象.方法(值)—返回的是对象<br>jquery中  对象.方法()—-字符串值  </p>
<h4 id="面向对象初级"><a href="#面向对象初级" class="headerlink" title="面向对象初级"></a>面向对象初级</h4><ul>
<li>面向对象和面向过程都是编程的思想</li>
<li>面向过程:凡事亲力亲为,都要自己做,每一步都要清楚,—注重的过程</li>
<li>面向对象:找到对象.让对象帮我们做事,注重的是结果</li>
<li>什么叫对象?  看的见,摸得到,具体特指的某个东西</li>
<li>对象:有特征和行为</li>
<li>对象具有属性和方法——</li>
<li>js是基于对象的语言,不是真正的面向对象语言</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    now object()&#123;&#125;;</div><div class="line">    自定义构造函数</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>each用法的前奏</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//jQuery帮我们循环----内部遍历----隐式迭代</span></div><div class="line">        $(<span class="string">"p"</span>).text(<span class="string">"都变了,大清亡了....."</span>);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">    &lt;script&gt;</div><div class="line">    <span class="comment">//each方法是遍历元素的</span></div><div class="line"></div><div class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">//获取所有的li</span></div><div class="line">      <span class="comment">//x参数----索引</span></div><div class="line">      <span class="comment">//y参数----每个元素---是DOM对象</span></div><div class="line">      $(<span class="string">"li"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</div><div class="line">       <span class="comment">//每个li的透明度--值依次的递增</span></div><div class="line">        <span class="keyword">var</span> opacity=(x+<span class="number">1</span>)/<span class="number">10</span>;</div><div class="line">        $(y).css(<span class="string">"opacity"</span>,opacity);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>script&gt;</div></pre></td></tr></table></figure>
<h5 id="多库共存的问题"><a href="#多库共存的问题" class="headerlink" title="多库共存的问题"></a>多库共存的问题</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">//第一种方式解决</span></div><div class="line">   <span class="keyword">var</span> $=<span class="number">10</span>;<span class="comment">//$---&gt;变量</span></div><div class="line"></div><div class="line">   jQuery(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     jQuery(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       jQuery(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);</div><div class="line">     &#125;);</div><div class="line">   &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//第二种方式</span></div><div class="line">    <span class="comment">//释放控制权</span></div><div class="line">    <span class="keyword">var</span> xy=$.noConflict();</div><div class="line">    <span class="keyword">var</span> $=<span class="number">10</span>;<span class="comment">//$---&gt;变量</span></div><div class="line"></div><div class="line">    xy(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      xy(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        xy(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>==事件的触发==<br>1.对象.事件();<br>2.对象.trigger(“事件的名字”);<br>3.对象.trigger(“事件名字”);<br>1和2是一样的，都可以触发浏览器的默认事件，3不会触发浏览器的默认的事件。<br>==包装集==可以看成是一个集合，数组。<br>插件一个功能，其他程序员完成了，把该插件加入到自己的项目中修改即可。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jQuery&quot;&gt;&lt;a href=&quot;#jQuery&quot; class=&quot;headerlink&quot; title=&quot;jQuery&quot;&gt;&lt;/a&gt;jQuery&lt;/h2&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;
    
    </summary>
    
      <category term="jQuery" scheme="http://yoursite.com/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript迭代语句</title>
    <link href="http://yoursite.com/2016/04/03/6.ECMAScript%E8%BF%AD%E4%BB%A3%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2016/04/03/6.ECMAScript迭代语句/</id>
    <published>2016-04-03T01:34:02.000Z</published>
    <updated>2017-11-03T09:06:49.455Z</updated>
    
    <content type="html"><![CDATA[<p>迭代语句又叫循环语句，声明一组要反复执行的命令，直到满足某些条件为止。循环通常用于迭代数组的值(因此而得名),或者执行重复的算数任务。   </p>
<h4 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do-while语句"></a>do-while语句</h4><p>do-while语句是后测试循环，即退出条件在执行循环内部的代码之后计算，这意味着在计算表达式之前，至少会执行循环主体一次。<br>它的语法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d0 &#123;sataement&#125; <span class="keyword">while</span> (expression);</div></pre></td></tr></table></figure></p>
<p>例如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">do</span> &#123;i +=<span class="number">2</span>;&#125; <span class="keyword">while</span> (i&lt;<span class="number">10</span>);</div></pre></td></tr></table></figure></p>
<h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><p>while语句是前测试循环。这意味着突出条件是在执行内部的代码之前计算的。因此，循环主体可能根本不背执行。<br>它的语法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (expression) statement</div></pre></td></tr></table></figure></p>
<p>例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (i&lt;<span class="number">10</span>) &#123;</div><div class="line">    i+=<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><p>for语句是前测试循环，而且在进入循环之前，能够初始化变量，并定义循环后要执行的代码。<br>它的语法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (initialization;expression;post-loop-expression) statement</div></pre></td></tr></table></figure></p>
<p>注意：post-loop-expression之后不能写分号，否则无法运行。<br>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">iCount=<span class="number">6</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;iCount;i++)&#123;</div><div class="line">    alert(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码定义了初始值为0的变量i。只有当条件表达式(i&lt;iCount)的值为true时，为进入for循环，这样循环主体可能不被执行。如果执行了循环遍历，那么将执行循环后表达式，并迭代变量i。  </p>
<h4 id="for-in语句"><a href="#for-in语句" class="headerlink" title="for-in语句"></a>for-in语句</h4><p>for语句是严格的迭代语句，用于枚举对象的属性。<br>它的语法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (peoperty <span class="keyword">in</span> expression) statement</div></pre></td></tr></table></figure></p>
<p>例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (sProp <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</div><div class="line">    alert(sProp);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里，for-in语句用于显示window对象的所有属性。  </p>
<h4 id="foreach语句"><a href="#foreach语句" class="headerlink" title="foreach语句"></a>foreach语句</h4><p>foreach语句用于循环遍历数组。<br>每进行一次循环，当前数组元素的值就会被赋值给value变量(数组指针会逐一地移动)，以此类推。<br>语法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foreach (aray <span class="keyword">as</span> value)&#123;</div><div class="line">    code to be executed;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>例子:下面的例子示范了一个循环，这个循环可以呼出给定数组的值：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">&lt;?php</div><div class="line">$arr=array("one","two","three");</div><div class="line">foreach($arr as $value)</div><div class="line">&#123;</div><div class="line">    echo "Value:".$value."&lt;br/&gt;";</div><div class="line">&#125;</div><div class="line">?&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="each方法"><a href="#each方法" class="headerlink" title="each方法"></a>each方法</h4><p>为jQuery对象进行迭代，为每个匹配元素执行函数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迭代语句又叫循环语句，声明一组要反复执行的命令，直到满足某些条件为止。循环通常用于迭代数组的值(因此而得名),或者执行重复的算数任务。   &lt;/p&gt;
&lt;h4 id=&quot;do-while语句&quot;&gt;&lt;a href=&quot;#do-while语句&quot; class=&quot;headerlink&quot; t
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="迭代语句" scheme="http://yoursite.com/tags/%E8%BF%AD%E4%BB%A3%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>BOM</title>
    <link href="http://yoursite.com/2016/02/26/5.BOM%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/02/26/5.BOM笔记/</id>
    <published>2016-02-26T13:11:22.000Z</published>
    <updated>2017-11-03T09:06:07.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>BOM的核心对象是window；它既是通过JavaScript访问浏览器窗口的一个接口，又是ECMAscript规定的Global对象。意味着在网页中所有的元素都是window的。</p>
<h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>定义全局变量与在window对象上直接定义属性还是有一点差别的：全局变量不能通过delete的操作符删除，而直接在window对象上的定义的属性可以。</p>
<h4 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h4><p>动画原理=盒子位置+步长  </p>
<ol>
<li>闪动（瞬间到达）</li>
<li>匀速（每次走一样的距离）</li>
<li>缓动（开始特快越走越慢，步长越来越小）（类似刹车，电梯停止，压缩弹簧）<h5 id="封装的问题"><a href="#封装的问题" class="headerlink" title="封装的问题"></a>封装的问题</h5></li>
<li>小数只能给定样式，最好不要参与运算。（offsetLeft获取值四舍五入取整后计算）</li>
<li>大于0向上取整，小于0向下取整：步长从大到小，会小于0，大于0的时候向上取整能取到1，小于0的时候向下取整才能取到-1（会在9和-9距离的时候出现问题）。<h3 id="json对象"><a href="#json对象" class="headerlink" title="json对象"></a>json对象</h3>JSON(JavaScript Object Notation)是一种轻量级的数据交换格式，我们称之为javascript对象表示法。使用JSON进行数据传输的优势之一。表格方法为键值对，key:value.<br>var myjson={k1:v1,k2:v2}<br>获取方式：v1==myjson.k1；   v2==myjson.k2；<br>json一般就是被当做一个配置单用。<br>两种结构写法：对象和数组<br>获取：json名.属性（点语法）<br>json遍历：forin方法<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断是否声明DTD</span></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="built_in">document</span>.compatMode===<span class="string">"BackCompat"</span>;</div><div class="line">    backCompat;<span class="comment">//未声明</span></div><div class="line">    CSS1Compat;<span class="comment">//已经声明</span></div><div class="line">    <span class="comment">//IE678默认识别CSS1Compat，无论有没有dtd。</span></div><div class="line">    <span class="comment">//注意大小写。</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="滚动到指定坐标"><a href="#滚动到指定坐标" class="headerlink" title="滚动到指定坐标"></a>滚动到指定坐标</h5><p>window.scrollTo<br>方法可以把内容滚动到指定的坐标<br>格式：scrollTo(xpos,ypos)<br>xpos  必须，要在窗口文档显示区左上角显示的文档的x坐标<br>ypos  必须，要在窗口文档显示区左上角显示的温昂的y坐标  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BOM&quot;&gt;&lt;a href=&quot;#BOM&quot; class=&quot;headerlink&quot; title=&quot;BOM&quot;&gt;&lt;/a&gt;BOM&lt;/h2&gt;&lt;p&gt;BOM的核心对象是window；它既是通过JavaScript访问浏览器窗口的一个接口，又是ECMAscript规定的Global对
    
    </summary>
    
      <category term="BOM" scheme="http://yoursite.com/categories/BOM/"/>
    
    
      <category term="BOM" scheme="http://yoursite.com/tags/BOM/"/>
    
  </entry>
  
</feed>
